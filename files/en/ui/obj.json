{
  "addAccordion": {
    "abbrev": "acc",
    "desc": "#addAccordion.md",
    "pNames": [
      "parent",
      "titles",
      "options",
      "width",
      "height"
    ],
    "pTypes": [
      "obj-The parent layout where to add the text.",
      "obj-An array of accordion titles.",
      "str-A comma separated options. Can be one or a combination of the following: `Square` \\n Layout type `Linear` or `Absolute`",
      "num-Fraction of the screen width: [0-1]",
      "num-Fraction of the screen height. [0-1]"
    ],
    "retval": "obj-Accordion Component",
    "shortDesc": "addAccordion",
    "subf": {
      "getLayout": {
        "desc": "Get the layout of the corresponding accordion item. This is very useful when you add a control or component that will be displayed when the accordion collapse\n\n",
        "pNames": [
          "index"
        ],
        "pTypes": [
          "num-The index of the accordion. You can also pass accordion title."
        ],
        "shortDesc": "getLayout",
        "retval": "obj-Layout Component"
      },
      "setTitleText": {
        "desc": "Update the accordion title by passing its corresponding index\n\n",
        "pNames": [
          "index",
          "title"
        ],
        "pTypes": [
          "num-The index of the corresponding title to updates.",
          "str-The new title text."
        ],
        "shortDesc": "setTitleText"
      },
      "setSecondaryText": {
        "desc": "Adds a secondary text on the accordion\n\n",
        "pNames": [
          "text",
          "index"
        ],
        "pTypes": [
          "obj-The secondary text to display. You can pass arguments as string or array by following the format below. \\n String: `\"Secodary text 1,Secondary text 2,Secondary text 3\"` \\n Array: `[ \"Secondary text 1\", \"Secondary text 2\", \"Secondary text 3\" ]`",
          "num-If `index` is provided, the corresponding index will be updated with the new text."
        ],
        "shortDesc": "setSecondaryText"
      },
      "setExpandIcon": {
        "desc": "Sets the expand icon at the right of the accordion\n\n",
        "pNames": [
          "icon"
        ],
        "pTypes": [
          "str-A material icon"
        ],
        "shortDesc": "setExpandIcon"
      },
      "addItem": {
        "desc": "Adds an item to the accordion\n\n",
        "pNames": [
          "title",
          "secondaryText",
          "index"
        ],
        "pTypes": [
          "str-Accordion title",
          "str-Accordion secondary text",
          "num-The index at which the accordion item will be added. If `null`, the item will be added at the bottom of the accordion."
        ],
        "shortDesc": "addItem"
      },
      "removeItemByIndex": {
        "desc": "Removes accordion item by its index\n\n",
        "pNames": [
          "index"
        ],
        "pTypes": [
          "num-The index of the corresponding accordion to remove."
        ],
        "shortDesc": "removeItemByIndex"
      },
      "removeItemByName": {
        "desc": "Removes accordion item by its title name\n\n",
        "pNames": [
          "title"
        ],
        "pTypes": [
          "str-The title of the corresponding accordion to remove."
        ],
        "shortDesc": "removeItemByName"
      },
      "shiftItem": {
        "desc": "Removes the first accordion item\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "shiftItem"
      },
      "popItem": {
        "desc": "Removes the last accordion item\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "popItem"
      },
      "setEnabled": {
        "desc": "Enable or disable the accordion component or an item in the accordion component\n\n",
        "pNames": [
          "index",
          "value"
        ],
        "pTypes": [
          "num-The index of the corresponding accordion.",
          "bin-Values can be `true` or `false`."
        ],
        "shortDesc": "setEnabled"
      },
      "getEnabled": {
        "desc": "Get the enabled state of an accordion item by its index\n\n",
        "pNames": [
          "index"
        ],
        "pTypes": [
          "num-The index of the accordion item."
        ],
        "shortDesc": "getEnabled",
        "retval": "bin"
      },
      "setEnabledByName": {
        "desc": "Enable or disable an accordion item by its name\n\n",
        "pNames": [
          "name",
          "value"
        ],
        "pTypes": [
          "str-The title of the accordion",
          "bin-Values can be `true` or `false`."
        ],
        "shortDesc": "setEnabledByName"
      },
      "getEnabledByName": {
        "desc": "Get the enabled state of an accordion item by its name\n\n",
        "pNames": [
          "name"
        ],
        "pTypes": [
          "str-The title of the accordion."
        ],
        "shortDesc": "getEnabledByName",
        "retval": "bin"
      },
      "getLayoutIndex": {
        "desc": "Get the index of the corresponding layout\n\n",
        "pNames": [
          "layout"
        ],
        "pTypes": [
          "obj-The layout to check."
        ],
        "shortDesc": "getLayoutIndex",
        "retval": "num"
      },
      "setOnTouch": {
        "desc": "Sets a callback function when the accordion is touch\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "index ",
              "expand "
            ],
            "pTypes": [
              "num-The index of the corresponding accordion item.",
              "bin-The expanded state of the accordion."
            ]
          }
        ],
        "shortDesc": "setOnTouch"
      },
      "setOnContextMenu": {
        "desc": "Adds a callback function on right click\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "title ",
              "index ",
              "event "
            ],
            "pTypes": [
              "str-The accordion title text.",
              "num-The index of the corresponding accordion item.",
              "obj-The pointer event object."
            ]
          }
        ],
        "shortDesc": "setOnContextMenu"
      },
      "setTextColor": {
        "desc": "Sets the color of the title and the secondary text respectively\n\n",
        "pNames": [
          "color1",
          "color2"
        ],
        "pTypes": [
          "str-Color of the title text in hexadecimal format `#rrggbb`",
          "str-Color of the secondary text in hexadecimal format `#rrggbb`"
        ],
        "shortDesc": "setTextColor"
      },
      "setCornerRadius": {
        "desc": "Sets the corner radius of the top and bottom accordion panels\n\n",
        "pNames": [
          "tl",
          "tr",
          "bl",
          "br",
          "mode"
        ],
        "pTypes": [
          "num-Top-left corner radius.",
          "num-Top-right corner radius.",
          "num-Bottom-left corner radius.",
          "num-Bottom-right corner radius.",
          "str-Unit. Values are `px` `rem` or `%`."
        ],
        "shortDesc": "setCornerRadius"
      },
      "animate": {
        "desc": "Animate the component\n\n",
        "pNames": [
          "anim",
          "duration"
        ],
        "pTypes": [
          "str-The type of animation. Here are the available values `bounce` `flash` `pulse` `rubberBand` `shakeX` `shakeY` `headShake` `swing` `tada` `wobble` `jello` `heartBeat` \\n Back Entrances `backInDown` `backInLeft` `backInRight` `backInUp` \\n Back Exits `backOutDown` `backOutLeft` `backOutRight` `backOutUp` \\n Bouncing Entrances `bounceIn` `bounceInDown` `bounceInLeft` `bounceInRight` `bounceInUp` \\n Bouncing exits `bounceOut` `bounceOutDown` `bounceOutLeft` `bounceOutRight` `bounceOutUp` \\n Fading entrances `fadeIn` `fadeInDown` `fadeInDownBig` `fadeInLeft` `fadeInLeftBig` `fadeInRight` `fadeInRightBig` `fadeInUp` `fadeInUpBig` `fadeInTopLeft` `fadeInTopRight` `fadeInBottomLeft` `fadeInBottomRight` \\n Fading exits `fadeOut` `fadeOutDown` `fadeOutDownBig` `fadeOutLeft` `fadeOutLeftBig` `fadeOutRight` `fadeOutRightBig` `fadeOutUp` `fadeOutUpBig` `fadeOutTopLeft` `fadeOutTopRight` `fadeOutBottomRight` `fadeOutBottomLeft` \\n Flippers `flip` `flipInX` `flipInY` `flipOutX` `flipOutY` \\n Lightspeed `lightSpeedInRight` `lightSpeedInLeft` `lightSpeedOutRight` `lightSpeedOutLeft` \\n Rotating Entrances `rotateIn` `rotateInDownLeft` `rotateInDownRight` `rotateInUpLeft` `rotateInUpRight` \\n Rotating Exits `rotateOut` `rotateOutDownLeft` `rotateOutDownRight` `rotateOutUpLeft` `rotateOutUpRight` \\n Specials `hinge` `jackInTheBox` `rollIn` `rollOut` \\n Zooming Entrances `zoomIn` `zoomInDown` `zoomInLeft` `zoomInRight` `zoomInUp` \\n Zooming Exits `zoomOut` `zoomOutDown` `zoomOutLeft` `zoomOutRight` `zoomOutUp` \\n Sliding Entrances `slideInDown` `slideInLeft` `slideInRight` `slideInUp` \\n Sliding Exits `slideOutDown` `slideOutLeft` `slideOutRight` `slideOutUp`.",
          "num-The time in milliseconds."
        ],
        "shortDesc": "animate"
      },
      "setSize": {
        "desc": "Sets the size of the component\n\n",
        "pNames": [
          "width",
          "height"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the parent height. [0-1]"
        ],
        "shortDesc": "setSize"
      },
      "show": {
        "desc": "Show the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "show"
      },
      "hide": {
        "desc": "Hide the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "hide"
      },
      "gone": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "gone"
      },
      "destroy": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "destroy"
      },
      "setScale": {
        "desc": "Sets the x and y scaling of the component\n\n",
        "pNames": [
          "x",
          "y"
        ],
        "pTypes": [
          "num-The x-scale of the component.Values less than `0` is smaller than the normal. While values greater than `1` is greater than the normal.",
          "num-The y-scale of the component. Values less than `1` is smaller than the normal. While vaues greater than `1` is greater than the normal."
        ],
        "shortDesc": "setScale"
      },
      "getPosition": {
        "desc": "Returns the position of the component. The return object is of the form `{ left, top, right, bottom\n\n",
        "pNames": [
          "options"
        ],
        "pTypes": [
          "str-The mode of the measurements. Values can be `px` or `%`"
        ],
        "shortDesc": "getPosition",
        "retval": "obj"
      },
      "setMargins": {
        "desc": "Sets the margin of the component\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "str-`px` or `%`"
        ],
        "shortDesc": "setMargins"
      },
      "setPadding": {
        "desc": "Sets the padding component container\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the component width.",
          "num-Fraction of the component height. [0-1]",
          "num-Fraction of the component width. [0-1]",
          "num-Fraction of the component height. [0-1]",
          "str-The size thickness mode. Can be `px`"
        ],
        "shortDesc": "setPadding"
      },
      "setPosition": {
        "desc": "Sets the position of the component relative to its parent dimensions\n\n",
        "pNames": [
          "left",
          "top",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the screen height. [0-1]",
          "str-Unit of measurement. Can be `px` or `%` or any css unit of measurement."
        ],
        "shortDesc": "setPosition"
      },
      "setBorder": {
        "desc": "Sets the border line for the component container\n\n",
        "pNames": [
          "width",
          "clr",
          "style"
        ],
        "pTypes": [
          "num-Border-left thickness in pixels.",
          "str-Border color in hexadecimal form `#rrggbb`",
          "str-Border-styles. Values can be `dotted` `dashed` `solid` `double` `groove` `ridge` `inset` and `outset`. Default is `solid`"
        ],
        "shortDesc": "setBorder"
      },
      "bringForward": {
        "desc": "Bring this component forward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A negative value behaves like `sendBackward` method."
        ],
        "shortDesc": "bringForward"
      },
      "sendBackward": {
        "desc": "Bring this component backward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A positve value behaves like `bringForward` method."
        ],
        "shortDesc": "sendBackward"
      }
    }
  },
  "addAppBar": {
    "abbrev": "apb",
    "desc": "#addAppBar.md",
    "pNames": [
      "parent",
      "title",
      "options",
      "width",
      "height"
    ],
    "pTypes": [
      "obj-The parent layout where to add the AppBar",
      "str-The title text of the appbar",
      "str-A comma separated options. Can be one or a combination of the following: \\n `Menu` : Adds a menu icon on the left \\n `Primary` `Secondary` `Transparent` `Inherit` `Default` : Adds a color \\n `Absolute` `Static` `Fixed` `Relative` : Adds a positioning",
      "num-Fraction of the screen width. [0-1]",
      "num-Fraction of the screen height. [0-1]"
    ],
    "retval": "obj-AppBar Component",
    "shortDesc": "addAppBar",
    "subf": {
      "setOnMenu": {
        "desc": "Sets a function to be called when the user clicks the menu\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          ""
        ],
        "shortDesc": "setOnMenu"
      },
      "addLayout": {
        "desc": "Adds a layout for additional controls at the right of the appbar\n\n",
        "pNames": [
          "lay"
        ],
        "pTypes": [
          "obj-The layout where to add controls"
        ],
        "shortDesc": "addLayout"
      },
      "setCornerRadius": {
        "desc": "Sets the corner radius of the appbar\n\n",
        "pNames": [
          "tl",
          "tr",
          "bl",
          "br",
          "mode"
        ],
        "pTypes": [
          "num-Top-left corner radius.",
          "num-Top-right corner radius.",
          "num-Bottom-left corner radius.",
          "num-Bottom-right corner radius.",
          "str-Unit. Values are `px` `rem` or `%`."
        ],
        "shortDesc": "setCornerRadius"
      },
      "setOnTouch": {
        "desc": "Adds a callback handler when the component is touch\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "event "
            ],
            "pTypes": [
              "obj-The click event object."
            ]
          }
        ],
        "shortDesc": "setOnTouch"
      },
      "setOnContextMenu": {
        "desc": "Adds a callback function on right click\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "event "
            ],
            "pTypes": [
              "obj-The pointer event object."
            ]
          }
        ],
        "shortDesc": "setOnContextMenu"
      },
      "animate": {
        "desc": "Animate the component\n\n",
        "pNames": [
          "anim",
          "duration"
        ],
        "pTypes": [
          "str-The type of animation. Here are the available values `bounce` `flash` `pulse` `rubberBand` `shakeX` `shakeY` `headShake` `swing` `tada` `wobble` `jello` `heartBeat` \\n Back Entrances `backInDown` `backInLeft` `backInRight` `backInUp` \\n Back Exits `backOutDown` `backOutLeft` `backOutRight` `backOutUp` \\n Bouncing Entrances `bounceIn` `bounceInDown` `bounceInLeft` `bounceInRight` `bounceInUp` \\n Bouncing exits `bounceOut` `bounceOutDown` `bounceOutLeft` `bounceOutRight` `bounceOutUp` \\n Fading entrances `fadeIn` `fadeInDown` `fadeInDownBig` `fadeInLeft` `fadeInLeftBig` `fadeInRight` `fadeInRightBig` `fadeInUp` `fadeInUpBig` `fadeInTopLeft` `fadeInTopRight` `fadeInBottomLeft` `fadeInBottomRight` \\n Fading exits `fadeOut` `fadeOutDown` `fadeOutDownBig` `fadeOutLeft` `fadeOutLeftBig` `fadeOutRight` `fadeOutRightBig` `fadeOutUp` `fadeOutUpBig` `fadeOutTopLeft` `fadeOutTopRight` `fadeOutBottomRight` `fadeOutBottomLeft` \\n Flippers `flip` `flipInX` `flipInY` `flipOutX` `flipOutY` \\n Lightspeed `lightSpeedInRight` `lightSpeedInLeft` `lightSpeedOutRight` `lightSpeedOutLeft` \\n Rotating Entrances `rotateIn` `rotateInDownLeft` `rotateInDownRight` `rotateInUpLeft` `rotateInUpRight` \\n Rotating Exits `rotateOut` `rotateOutDownLeft` `rotateOutDownRight` `rotateOutUpLeft` `rotateOutUpRight` \\n Specials `hinge` `jackInTheBox` `rollIn` `rollOut` \\n Zooming Entrances `zoomIn` `zoomInDown` `zoomInLeft` `zoomInRight` `zoomInUp` \\n Zooming Exits `zoomOut` `zoomOutDown` `zoomOutLeft` `zoomOutRight` `zoomOutUp` \\n Sliding Entrances `slideInDown` `slideInLeft` `slideInRight` `slideInUp` \\n Sliding Exits `slideOutDown` `slideOutLeft` `slideOutRight` `slideOutUp`.",
          "num-The time in milliseconds."
        ],
        "shortDesc": "animate"
      },
      "setSize": {
        "desc": "Sets the size of the component\n\n",
        "pNames": [
          "width",
          "height"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the parent height. [0-1]"
        ],
        "shortDesc": "setSize"
      },
      "show": {
        "desc": "Show the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "show"
      },
      "hide": {
        "desc": "Hide the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "hide"
      },
      "gone": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "gone"
      },
      "destroy": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "destroy"
      },
      "setScale": {
        "desc": "Sets the x and y scaling of the component\n\n",
        "pNames": [
          "x",
          "y"
        ],
        "pTypes": [
          "num-The x-scale of the component.Values less than `0` is smaller than the normal. While values greater than `1` is greater than the normal.",
          "num-The y-scale of the component. Values less than `1` is smaller than the normal. While vaues greater than `1` is greater than the normal."
        ],
        "shortDesc": "setScale"
      },
      "getPosition": {
        "desc": "Returns the position of the component. The return object is of the form `{ left, top, right, bottom\n\n",
        "pNames": [
          "options"
        ],
        "pTypes": [
          "str-The mode of the measurements. Values can be `px` or `%`"
        ],
        "shortDesc": "getPosition",
        "retval": "obj"
      },
      "setMargins": {
        "desc": "Sets the margin of the component\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "str-`px` or `%`"
        ],
        "shortDesc": "setMargins"
      },
      "setPadding": {
        "desc": "Sets the padding component container\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the component width.",
          "num-Fraction of the component height. [0-1]",
          "num-Fraction of the component width. [0-1]",
          "num-Fraction of the component height. [0-1]",
          "str-The size thickness mode. Can be `px`"
        ],
        "shortDesc": "setPadding"
      },
      "setPosition": {
        "desc": "Sets the position of the component relative to its parent dimensions\n\n",
        "pNames": [
          "left",
          "top",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the screen height. [0-1]",
          "str-Unit of measurement. Can be `px` or `%` or any css unit of measurement."
        ],
        "shortDesc": "setPosition"
      },
      "setBorder": {
        "desc": "Sets the border line for the component container\n\n",
        "pNames": [
          "width",
          "clr",
          "style"
        ],
        "pTypes": [
          "num-Border-left thickness in pixels.",
          "str-Border color in hexadecimal form `#rrggbb`",
          "str-Border-styles. Values can be `dotted` `dashed` `solid` `double` `groove` `ridge` `inset` and `outset`. Default is `solid`"
        ],
        "shortDesc": "setBorder"
      },
      "bringForward": {
        "desc": "Bring this component forward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A negative value behaves like `sendBackward` method."
        ],
        "shortDesc": "bringForward"
      },
      "sendBackward": {
        "desc": "Bring this component backward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A positve value behaves like `bringForward` method."
        ],
        "shortDesc": "sendBackward"
      }
    }
  },
  "addBottomNavbar": {
    "abbrev": "bmn",
    "desc": "#addBottomNavbar.md",
    "pNames": [
      "parent",
      "navs",
      "options",
      "width",
      "height"
    ],
    "pTypes": [
      "obj-The parent layout where to add the BottomNavbar",
      "lst-An array whose elements are of the form `[ \"Title\", \"Icon\" ]`",
      "str-A comma separated options. Can be one or a combination of the following: `Hidelabels`",
      "num-Fraction of the screen width. [0-1]",
      "num-Fraction of the screen height. [0-1]"
    ],
    "retval": "obj-BottomNavbar Component",
    "shortDesc": "addBottomNavbar",
    "subf": {
      "setOnContextMenu": {
        "desc": "Adds a callback function on right click\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "text ",
              "index ",
              "event "
            ],
            "pTypes": [
              "str-Bottom navigation action text.",
              "num-Bottom navigation action index.",
              "obj-The pointer event object."
            ]
          }
        ],
        "shortDesc": "setOnContextMenu"
      },
      "setList": {
        "desc": "Sets the navigation actions list\n\n",
        "pNames": [
          "navs"
        ],
        "pTypes": [
          "lst-The navigation actions array. See `navs` param above for format."
        ],
        "shortDesc": "setList"
      },
      "getList": {
        "desc": "Returns the navigation actions list\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "getList",
        "retval": "lst"
      },
      "selectItem": {
        "desc": "Sets navigation action to active by its name. If you are providing a wrong name, no action will be active\n\n",
        "pNames": [
          "name"
        ],
        "pTypes": [
          "str-The name to be set to active"
        ],
        "shortDesc": "selectItem"
      },
      "selectItemByIndex": {
        "desc": "Sets a botttom navigation action to active by its index\n\n",
        "pNames": [
          "index"
        ],
        "pTypes": [
          "num-The index of the bottom navigation action to be selected"
        ],
        "shortDesc": "selectItemByIndex"
      },
      "clearSelection": {
        "desc": "Clears the selected navigation action\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "clearSelection"
      },
      "setItemByIndex": {
        "desc": "Updates a navigation action by its index\n\n",
        "pNames": [
          "index",
          "newName",
          "newIcon"
        ],
        "pTypes": [
          "num-The index to update",
          "str-The name of the navigation action",
          "str-Material icon"
        ],
        "shortDesc": "setItemByIndex"
      },
      "setIcon": {
        "desc": "Updates the icon of the given index\n\n",
        "pNames": [
          "index",
          "newIcon"
        ],
        "pTypes": [
          "num-The index of the navigation action to update",
          "str-Material icon"
        ],
        "shortDesc": "setIcon"
      },
      "addItem": {
        "desc": "Adds a navigation action\n\n",
        "pNames": [
          "name",
          "icon",
          "index"
        ],
        "pTypes": [
          "str-The name of the navigation action",
          "str-Material icon",
          "num-The index in which to add the action."
        ],
        "shortDesc": "addItem"
      },
      "removeItemByIndex": {
        "desc": "Removes a navigation action by its given index\n\n",
        "pNames": [
          "index"
        ],
        "pTypes": [
          "num-The index of the navigation action to be remove"
        ],
        "shortDesc": "removeItemByIndex"
      },
      "removeItemByName": {
        "desc": "Removes a navigation action by its given name\n\n",
        "pNames": [
          "name"
        ],
        "pTypes": [
          "str-The name of the navigation action to be remove."
        ],
        "shortDesc": "removeItemByName"
      },
      "shiftItem": {
        "desc": "Removes the first navigation action\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "shiftItem"
      },
      "popItem": {
        "desc": "Removes the last navigation action\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "popItem"
      },
      "setOnChange": {
        "desc": "Sets a callback function to execute when bottom navbar value changes\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "text ",
              "index "
            ],
            "pTypes": [
              "str-Bottom navigation action text.",
              "num-Bottom navigation action index."
            ]
          }
        ],
        "shortDesc": "setOnChange"
      },
      "setEnabled": {
        "desc": "Enable or disable a bottom navigation action. If you want to disable the component, use the `disable` property instead\n\n",
        "pNames": [
          "index",
          "value"
        ],
        "pTypes": [
          "num-The index of the navigation action.",
          "bin-Values can be `true` or `false`."
        ],
        "shortDesc": "setEnabled"
      },
      "getEnabled": {
        "desc": "Get the enabled state of a navigation action\n\n",
        "pNames": [
          "index"
        ],
        "pTypes": [
          "num-The index of the navigation action."
        ],
        "shortDesc": "getEnabled",
        "retval": "bin"
      },
      "setEnabledByName": {
        "desc": "Enabled or disable a bottom navigation action by its name\n\n",
        "pNames": [
          "name",
          "value"
        ],
        "pTypes": [
          "str-The name of the bottom navigation action.",
          "bin-Values can be `true` or `false`"
        ],
        "shortDesc": "setEnabledByName"
      },
      "getEnabledByName": {
        "desc": "Get the enabled state of the bottom navigation action by its name\n\n",
        "pNames": [
          "name"
        ],
        "pTypes": [
          "str-The name of the bottom navigation action."
        ],
        "shortDesc": "getEnabledByName",
        "retval": "bin"
      },
      "showLabels": {
        "desc": "Shows the text label of the bottom navigation action\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "showLabels"
      },
      "hideLabels": {
        "desc": "Hides the text label of the bottom navigation action\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "hideLabels"
      },
      "setOnTouch": {
        "desc": "Adds a callback handler when the component is touch\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "event "
            ],
            "pTypes": [
              "obj-The click event object."
            ]
          }
        ],
        "shortDesc": "setOnTouch"
      },
      "animate": {
        "desc": "Animate the component\n\n",
        "pNames": [
          "anim",
          "duration"
        ],
        "pTypes": [
          "str-The type of animation. Here are the available values `bounce` `flash` `pulse` `rubberBand` `shakeX` `shakeY` `headShake` `swing` `tada` `wobble` `jello` `heartBeat` \\n Back Entrances `backInDown` `backInLeft` `backInRight` `backInUp` \\n Back Exits `backOutDown` `backOutLeft` `backOutRight` `backOutUp` \\n Bouncing Entrances `bounceIn` `bounceInDown` `bounceInLeft` `bounceInRight` `bounceInUp` \\n Bouncing exits `bounceOut` `bounceOutDown` `bounceOutLeft` `bounceOutRight` `bounceOutUp` \\n Fading entrances `fadeIn` `fadeInDown` `fadeInDownBig` `fadeInLeft` `fadeInLeftBig` `fadeInRight` `fadeInRightBig` `fadeInUp` `fadeInUpBig` `fadeInTopLeft` `fadeInTopRight` `fadeInBottomLeft` `fadeInBottomRight` \\n Fading exits `fadeOut` `fadeOutDown` `fadeOutDownBig` `fadeOutLeft` `fadeOutLeftBig` `fadeOutRight` `fadeOutRightBig` `fadeOutUp` `fadeOutUpBig` `fadeOutTopLeft` `fadeOutTopRight` `fadeOutBottomRight` `fadeOutBottomLeft` \\n Flippers `flip` `flipInX` `flipInY` `flipOutX` `flipOutY` \\n Lightspeed `lightSpeedInRight` `lightSpeedInLeft` `lightSpeedOutRight` `lightSpeedOutLeft` \\n Rotating Entrances `rotateIn` `rotateInDownLeft` `rotateInDownRight` `rotateInUpLeft` `rotateInUpRight` \\n Rotating Exits `rotateOut` `rotateOutDownLeft` `rotateOutDownRight` `rotateOutUpLeft` `rotateOutUpRight` \\n Specials `hinge` `jackInTheBox` `rollIn` `rollOut` \\n Zooming Entrances `zoomIn` `zoomInDown` `zoomInLeft` `zoomInRight` `zoomInUp` \\n Zooming Exits `zoomOut` `zoomOutDown` `zoomOutLeft` `zoomOutRight` `zoomOutUp` \\n Sliding Entrances `slideInDown` `slideInLeft` `slideInRight` `slideInUp` \\n Sliding Exits `slideOutDown` `slideOutLeft` `slideOutRight` `slideOutUp`.",
          "num-The time in milliseconds."
        ],
        "shortDesc": "animate"
      },
      "setSize": {
        "desc": "Sets the size of the component\n\n",
        "pNames": [
          "width",
          "height"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the parent height. [0-1]"
        ],
        "shortDesc": "setSize"
      },
      "show": {
        "desc": "Show the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "show"
      },
      "hide": {
        "desc": "Hide the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "hide"
      },
      "gone": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "gone"
      },
      "destroy": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "destroy"
      },
      "setScale": {
        "desc": "Sets the x and y scaling of the component\n\n",
        "pNames": [
          "x",
          "y"
        ],
        "pTypes": [
          "num-The x-scale of the component.Values less than `0` is smaller than the normal. While values greater than `1` is greater than the normal.",
          "num-The y-scale of the component. Values less than `1` is smaller than the normal. While vaues greater than `1` is greater than the normal."
        ],
        "shortDesc": "setScale"
      },
      "getPosition": {
        "desc": "Returns the position of the component. The return object is of the form `{ left, top, right, bottom\n\n",
        "pNames": [
          "options"
        ],
        "pTypes": [
          "str-The mode of the measurements. Values can be `px` or `%`"
        ],
        "shortDesc": "getPosition",
        "retval": "obj"
      },
      "setMargins": {
        "desc": "Sets the margin of the component\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "str-`px` or `%`"
        ],
        "shortDesc": "setMargins"
      },
      "setPadding": {
        "desc": "Sets the padding component container\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the component width.",
          "num-Fraction of the component height. [0-1]",
          "num-Fraction of the component width. [0-1]",
          "num-Fraction of the component height. [0-1]",
          "str-The size thickness mode. Can be `px`"
        ],
        "shortDesc": "setPadding"
      },
      "setPosition": {
        "desc": "Sets the position of the component relative to its parent dimensions\n\n",
        "pNames": [
          "left",
          "top",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the screen height. [0-1]",
          "str-Unit of measurement. Can be `px` or `%` or any css unit of measurement."
        ],
        "shortDesc": "setPosition"
      },
      "setBorder": {
        "desc": "Sets the border line for the component container\n\n",
        "pNames": [
          "width",
          "clr",
          "style"
        ],
        "pTypes": [
          "num-Border-left thickness in pixels.",
          "str-Border color in hexadecimal form `#rrggbb`",
          "str-Border-styles. Values can be `dotted` `dashed` `solid` `double` `groove` `ridge` `inset` and `outset`. Default is `solid`"
        ],
        "shortDesc": "setBorder"
      },
      "setCornerRadius": {
        "desc": "Sets the corner radius of the component\n\n",
        "pNames": [
          "tl",
          "tr",
          "bl",
          "br",
          "mode"
        ],
        "pTypes": [
          "num-Top-Left border radius in pixels.",
          "num-Top-Right border radius in pixels.",
          "num-Bottom-Left border radius in pixels.",
          "num-Bottom-Right border radius in pixels.",
          "str-Unit. Values are `px` `rem` or `%`."
        ],
        "shortDesc": "setCornerRadius"
      },
      "bringForward": {
        "desc": "Bring this component forward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A negative value behaves like `sendBackward` method."
        ],
        "shortDesc": "bringForward"
      },
      "sendBackward": {
        "desc": "Bring this component backward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A positve value behaves like `bringForward` method."
        ],
        "shortDesc": "sendBackward"
      }
    }
  },
  "addButton": {
    "abbrev": "btn",
    "desc": "#addButton.md",
    "pNames": [
      "parent",
      "text",
      "options",
      "width",
      "height"
    ],
    "pTypes": [
      "obj-The layout where to add the button.",
      "str-The button text or the material icon text.",
      "str-A comma separated options. Can be one or a combination of the following: \\n Variant: `Contained` `Outlined` `Text` `Default` \\n Color: `Primary` `Secondary` `Default` \\n Size: `Small` `Medium` `Large` \\n Util: `Icon` `NoRipple` `Upload` \\n In case of upload, you can specify `Multiple` to accept multiple files.",
      "num-Fraction of the parent width. [0-1]",
      "num-Fraction of the parent height. [0-1]"
    ],
    "retval": "obj-Button Component",
    "shortDesc": "addButton",
    "subf": {
      "setOnFileSelect": {
        "desc": "Sets a callback on file select\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "files "
            ],
            "pTypes": [
              "lst-An array of file objects selected."
            ]
          }
        ],
        "shortDesc": "setOnFileSelect"
      },
      "setToolTip": {
        "desc": "Sets a tooltip when the button is hovered\n\n",
        "pNames": [
          "title",
          "pos"
        ],
        "pTypes": [
          "str-The text of the tooltip",
          "str-Position of the tooltip. \\n Positions : `top` `left` `right` `bottom` `bottom-end` `bottom-start` `left-end` `left-start` `right-end` `right-start` `top-end` `top-start`"
        ],
        "shortDesc": "setToolTip"
      },
      "setTextShadow": {
        "desc": "Sets a text-shadow to the button text\n\n",
        "pNames": [
          "radius",
          "dx",
          "dy",
          "color"
        ],
        "pTypes": [
          "num-The radius in pixels",
          "num-The x-offset in pixels",
          "num-The y-offset in pixels",
          "str-The color in hexadecimal `#rrggbb`"
        ],
        "shortDesc": "setTextShadow"
      },
      "setPadding": {
        "desc": "Sets the padding of the button\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-The left padding in pixel.",
          "num-The top padding in pixels,",
          "num-The right padding in pixels.",
          "num-The bottom padding in pixels.",
          "str-Can be `px` `%`"
        ],
        "shortDesc": "setPadding"
      },
      "setCornerRadius": {
        "desc": "Sets the corner radius of the button\n\n",
        "pNames": [
          "tl",
          "tr",
          "bl",
          "br",
          "mode"
        ],
        "pTypes": [
          "num-Top-left corner radius.",
          "num-Top-right corner radius.",
          "num-Bottom-left corner radius.",
          "num-Bottom-right corner radius.",
          "str-Unit. Values are `px` `rem` or `%`."
        ],
        "shortDesc": "setCornerRadius"
      },
      "setOnTouch": {
        "desc": "Adds a callback handler when the component is touch\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "event "
            ],
            "pTypes": [
              "obj-The click event object."
            ]
          }
        ],
        "shortDesc": "setOnTouch"
      },
      "setOnContextMenu": {
        "desc": "Adds a callback function on right click\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "event "
            ],
            "pTypes": [
              "obj-The pointer event object."
            ]
          }
        ],
        "shortDesc": "setOnContextMenu"
      },
      "animate": {
        "desc": "Animate the component\n\n",
        "pNames": [
          "anim",
          "duration"
        ],
        "pTypes": [
          "str-The type of animation. Here are the available values `bounce` `flash` `pulse` `rubberBand` `shakeX` `shakeY` `headShake` `swing` `tada` `wobble` `jello` `heartBeat` \\n Back Entrances `backInDown` `backInLeft` `backInRight` `backInUp` \\n Back Exits `backOutDown` `backOutLeft` `backOutRight` `backOutUp` \\n Bouncing Entrances `bounceIn` `bounceInDown` `bounceInLeft` `bounceInRight` `bounceInUp` \\n Bouncing exits `bounceOut` `bounceOutDown` `bounceOutLeft` `bounceOutRight` `bounceOutUp` \\n Fading entrances `fadeIn` `fadeInDown` `fadeInDownBig` `fadeInLeft` `fadeInLeftBig` `fadeInRight` `fadeInRightBig` `fadeInUp` `fadeInUpBig` `fadeInTopLeft` `fadeInTopRight` `fadeInBottomLeft` `fadeInBottomRight` \\n Fading exits `fadeOut` `fadeOutDown` `fadeOutDownBig` `fadeOutLeft` `fadeOutLeftBig` `fadeOutRight` `fadeOutRightBig` `fadeOutUp` `fadeOutUpBig` `fadeOutTopLeft` `fadeOutTopRight` `fadeOutBottomRight` `fadeOutBottomLeft` \\n Flippers `flip` `flipInX` `flipInY` `flipOutX` `flipOutY` \\n Lightspeed `lightSpeedInRight` `lightSpeedInLeft` `lightSpeedOutRight` `lightSpeedOutLeft` \\n Rotating Entrances `rotateIn` `rotateInDownLeft` `rotateInDownRight` `rotateInUpLeft` `rotateInUpRight` \\n Rotating Exits `rotateOut` `rotateOutDownLeft` `rotateOutDownRight` `rotateOutUpLeft` `rotateOutUpRight` \\n Specials `hinge` `jackInTheBox` `rollIn` `rollOut` \\n Zooming Entrances `zoomIn` `zoomInDown` `zoomInLeft` `zoomInRight` `zoomInUp` \\n Zooming Exits `zoomOut` `zoomOutDown` `zoomOutLeft` `zoomOutRight` `zoomOutUp` \\n Sliding Entrances `slideInDown` `slideInLeft` `slideInRight` `slideInUp` \\n Sliding Exits `slideOutDown` `slideOutLeft` `slideOutRight` `slideOutUp`.",
          "num-The time in milliseconds."
        ],
        "shortDesc": "animate"
      },
      "setSize": {
        "desc": "Sets the size of the component\n\n",
        "pNames": [
          "width",
          "height"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the parent height. [0-1]"
        ],
        "shortDesc": "setSize"
      },
      "show": {
        "desc": "Show the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "show"
      },
      "hide": {
        "desc": "Hide the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "hide"
      },
      "gone": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "gone"
      },
      "destroy": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "destroy"
      },
      "setScale": {
        "desc": "Sets the x and y scaling of the component\n\n",
        "pNames": [
          "x",
          "y"
        ],
        "pTypes": [
          "num-The x-scale of the component.Values less than `0` is smaller than the normal. While values greater than `1` is greater than the normal.",
          "num-The y-scale of the component. Values less than `1` is smaller than the normal. While vaues greater than `1` is greater than the normal."
        ],
        "shortDesc": "setScale"
      },
      "getPosition": {
        "desc": "Returns the position of the component. The return object is of the form `{ left, top, right, bottom\n\n",
        "pNames": [
          "options"
        ],
        "pTypes": [
          "str-The mode of the measurements. Values can be `px` or `%`"
        ],
        "shortDesc": "getPosition",
        "retval": "obj"
      },
      "setMargins": {
        "desc": "Sets the margin of the component\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "str-`px` or `%`"
        ],
        "shortDesc": "setMargins"
      },
      "setPosition": {
        "desc": "Sets the position of the component relative to its parent dimensions\n\n",
        "pNames": [
          "left",
          "top",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the screen height. [0-1]",
          "str-Unit of measurement. Can be `px` or `%` or any css unit of measurement."
        ],
        "shortDesc": "setPosition"
      },
      "setBorder": {
        "desc": "Sets the border line for the component container\n\n",
        "pNames": [
          "width",
          "clr",
          "style"
        ],
        "pTypes": [
          "num-Border-left thickness in pixels.",
          "str-Border color in hexadecimal form `#rrggbb`",
          "str-Border-styles. Values can be `dotted` `dashed` `solid` `double` `groove` `ridge` `inset` and `outset`. Default is `solid`"
        ],
        "shortDesc": "setBorder"
      },
      "bringForward": {
        "desc": "Bring this component forward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A negative value behaves like `sendBackward` method."
        ],
        "shortDesc": "bringForward"
      },
      "sendBackward": {
        "desc": "Bring this component backward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A positve value behaves like `bringForward` method."
        ],
        "shortDesc": "sendBackward"
      }
    }
  },
  "addButtonGroup": {
    "abbrev": "btg",
    "desc": "#addButtonGroup.md",
    "pNames": [
      "parent",
      "list",
      "options",
      "width",
      "height"
    ],
    "pTypes": [
      "obj-The parent layout where to add the ButtonGroup",
      "lst-The item to be displayed on the buttn group.",
      "str-A comma separated options. Can be one or a combination of the following: \\n Variant: `Contained` `Outlined` `Text` `Default` \\n Color: `Primary` `Secondary` `Default` \\n Size: `Small` `Medium` `Large` \\n Orientation: `Horizontal` `Vertical` \\n Util: `Icon` `NoElevation`",
      "num-Fraction of the parent width. [0-1]",
      "num-Fraction of the parent height. [0-1]"
    ],
    "retval": "obj-ButtonGroup Component",
    "shortDesc": "addButtonGroup",
    "subf": {
      "setOnTouch": {
        "desc": "Adds a callback handler when the button is touch\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "text ",
              "index ",
              "event "
            ],
            "pTypes": [
              "str-The button text.",
              "num-The index of the correspoding button.",
              "obj-The pointer click event object."
            ]
          }
        ],
        "shortDesc": "setOnTouch"
      },
      "setOnContextMenu": {
        "desc": "Adds a callback function on right click\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "text ",
              "index ",
              "event "
            ],
            "pTypes": [
              "str-Button text.",
              "num-The index of the corresponding button.",
              "obj-The pointer event object."
            ]
          }
        ],
        "shortDesc": "setOnContextMenu"
      },
      "setList": {
        "desc": "Sets the new list of the button group\n\n",
        "pNames": [
          "items"
        ],
        "pTypes": [
          "str-A comma separated list or an array"
        ],
        "shortDesc": "setList"
      },
      "setItemByIndex": {
        "desc": "Sets a new text for the item in the button group\n\n",
        "pNames": [
          "item",
          "index"
        ],
        "pTypes": [
          "str-The new text",
          "num-The index of the item."
        ],
        "shortDesc": "setItemByIndex"
      },
      "addItem": {
        "desc": "Adds an additional item in the button group\n\n",
        "pNames": [
          "item"
        ],
        "pTypes": [
          "str-The additional item."
        ],
        "shortDesc": "addItem"
      },
      "removeItemIndex": {
        "desc": "Removes an item in the button group by its index\n\n",
        "pNames": [
          "index"
        ],
        "pTypes": [
          "num-The index of the item to be remove."
        ],
        "shortDesc": "removeItemIndex"
      },
      "removeItemByName": {
        "desc": "Removes an item in the button group by its name\n\n",
        "pNames": [
          "name"
        ],
        "pTypes": [
          "str-The name of the item to be remove."
        ],
        "shortDesc": "removeItemByName"
      },
      "popItem": {
        "desc": "Removes the last item of the button group\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "popItem"
      },
      "shiftItem": {
        "desc": "Removes the first item in the button group\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "shiftItem"
      },
      "setToolTip": {
        "desc": "Adds a tooltip to the ButtonGroup items\n\n",
        "pNames": [
          "titles",
          "pos"
        ],
        "pTypes": [
          "lst-The titles for each item in the ButtonGroup.",
          "str-The positio of the tooltip. \\n Can be `top` `left` `right` `bottom` `bottom-end` `bottom-start` `left-end` `left-start` `right-end` `right-start` `top-end` `top-start`"
        ],
        "shortDesc": "setToolTip"
      },
      "enableElevation": {
        "desc": "Enable of disable the elevation of the button group\n\n",
        "pNames": [
          "enable"
        ],
        "pTypes": [
          "bin-Can be `true` or `false`"
        ],
        "shortDesc": "enableElevation"
      },
      "setEnabled": {
        "desc": "Enable or disable a button item in the button group\n\n",
        "pNames": [
          "index",
          "value"
        ],
        "pTypes": [
          "num-The index of the button item.",
          "bin-Values can be `true` or `false`."
        ],
        "shortDesc": "setEnabled"
      },
      "getEnabled": {
        "desc": "Get the enabled state of the button item in the button group\n\n",
        "pNames": [
          "index"
        ],
        "pTypes": [
          "num-The index of the button item in the button group."
        ],
        "shortDesc": "getEnabled",
        "retval": "bin"
      },
      "setEnabledByName": {
        "desc": "Enable or disable a button item by its name\n\n",
        "pNames": [
          "name",
          "value"
        ],
        "pTypes": [
          "str-The button text.",
          "bin-Values can be `true` or `false`."
        ],
        "shortDesc": "setEnabledByName"
      },
      "getEnabledByName": {
        "desc": "Get the enabled state of button item in the button group\n\n",
        "pNames": [
          "name"
        ],
        "pTypes": [
          "str-The button text."
        ],
        "shortDesc": "getEnabledByName",
        "retval": "bin"
      },
      "animate": {
        "desc": "Animate the component\n\n",
        "pNames": [
          "anim",
          "duration"
        ],
        "pTypes": [
          "str-The type of animation. Here are the available values `bounce` `flash` `pulse` `rubberBand` `shakeX` `shakeY` `headShake` `swing` `tada` `wobble` `jello` `heartBeat` \\n Back Entrances `backInDown` `backInLeft` `backInRight` `backInUp` \\n Back Exits `backOutDown` `backOutLeft` `backOutRight` `backOutUp` \\n Bouncing Entrances `bounceIn` `bounceInDown` `bounceInLeft` `bounceInRight` `bounceInUp` \\n Bouncing exits `bounceOut` `bounceOutDown` `bounceOutLeft` `bounceOutRight` `bounceOutUp` \\n Fading entrances `fadeIn` `fadeInDown` `fadeInDownBig` `fadeInLeft` `fadeInLeftBig` `fadeInRight` `fadeInRightBig` `fadeInUp` `fadeInUpBig` `fadeInTopLeft` `fadeInTopRight` `fadeInBottomLeft` `fadeInBottomRight` \\n Fading exits `fadeOut` `fadeOutDown` `fadeOutDownBig` `fadeOutLeft` `fadeOutLeftBig` `fadeOutRight` `fadeOutRightBig` `fadeOutUp` `fadeOutUpBig` `fadeOutTopLeft` `fadeOutTopRight` `fadeOutBottomRight` `fadeOutBottomLeft` \\n Flippers `flip` `flipInX` `flipInY` `flipOutX` `flipOutY` \\n Lightspeed `lightSpeedInRight` `lightSpeedInLeft` `lightSpeedOutRight` `lightSpeedOutLeft` \\n Rotating Entrances `rotateIn` `rotateInDownLeft` `rotateInDownRight` `rotateInUpLeft` `rotateInUpRight` \\n Rotating Exits `rotateOut` `rotateOutDownLeft` `rotateOutDownRight` `rotateOutUpLeft` `rotateOutUpRight` \\n Specials `hinge` `jackInTheBox` `rollIn` `rollOut` \\n Zooming Entrances `zoomIn` `zoomInDown` `zoomInLeft` `zoomInRight` `zoomInUp` \\n Zooming Exits `zoomOut` `zoomOutDown` `zoomOutLeft` `zoomOutRight` `zoomOutUp` \\n Sliding Entrances `slideInDown` `slideInLeft` `slideInRight` `slideInUp` \\n Sliding Exits `slideOutDown` `slideOutLeft` `slideOutRight` `slideOutUp`.",
          "num-The time in milliseconds."
        ],
        "shortDesc": "animate"
      },
      "setSize": {
        "desc": "Sets the size of the component\n\n",
        "pNames": [
          "width",
          "height"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the parent height. [0-1]"
        ],
        "shortDesc": "setSize"
      },
      "show": {
        "desc": "Show the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "show"
      },
      "hide": {
        "desc": "Hide the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "hide"
      },
      "gone": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "gone"
      },
      "destroy": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "destroy"
      },
      "setScale": {
        "desc": "Sets the x and y scaling of the component\n\n",
        "pNames": [
          "x",
          "y"
        ],
        "pTypes": [
          "num-The x-scale of the component.Values less than `0` is smaller than the normal. While values greater than `1` is greater than the normal.",
          "num-The y-scale of the component. Values less than `1` is smaller than the normal. While vaues greater than `1` is greater than the normal."
        ],
        "shortDesc": "setScale"
      },
      "getPosition": {
        "desc": "Returns the position of the component. The return object is of the form `{ left, top, right, bottom\n\n",
        "pNames": [
          "options"
        ],
        "pTypes": [
          "str-The mode of the measurements. Values can be `px` or `%`"
        ],
        "shortDesc": "getPosition",
        "retval": "obj"
      },
      "setMargins": {
        "desc": "Sets the margin of the component\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "str-`px` or `%`"
        ],
        "shortDesc": "setMargins"
      },
      "setPadding": {
        "desc": "Sets the padding component container\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the component width.",
          "num-Fraction of the component height. [0-1]",
          "num-Fraction of the component width. [0-1]",
          "num-Fraction of the component height. [0-1]",
          "str-The size thickness mode. Can be `px`"
        ],
        "shortDesc": "setPadding"
      },
      "setPosition": {
        "desc": "Sets the position of the component relative to its parent dimensions\n\n",
        "pNames": [
          "left",
          "top",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the screen height. [0-1]",
          "str-Unit of measurement. Can be `px` or `%` or any css unit of measurement."
        ],
        "shortDesc": "setPosition"
      },
      "setBorder": {
        "desc": "Sets the border line for the component container\n\n",
        "pNames": [
          "width",
          "clr",
          "style"
        ],
        "pTypes": [
          "num-Border-left thickness in pixels.",
          "str-Border color in hexadecimal form `#rrggbb`",
          "str-Border-styles. Values can be `dotted` `dashed` `solid` `double` `groove` `ridge` `inset` and `outset`. Default is `solid`"
        ],
        "shortDesc": "setBorder"
      },
      "setCornerRadius": {
        "desc": "Sets the corner radius of the component\n\n",
        "pNames": [
          "tl",
          "tr",
          "bl",
          "br",
          "mode"
        ],
        "pTypes": [
          "num-Top-Left border radius in pixels.",
          "num-Top-Right border radius in pixels.",
          "num-Bottom-Left border radius in pixels.",
          "num-Bottom-Right border radius in pixels.",
          "str-Unit. Values are `px` `rem` or `%`."
        ],
        "shortDesc": "setCornerRadius"
      },
      "bringForward": {
        "desc": "Bring this component forward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A negative value behaves like `sendBackward` method."
        ],
        "shortDesc": "bringForward"
      },
      "sendBackward": {
        "desc": "Bring this component backward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A positve value behaves like `bringForward` method."
        ],
        "shortDesc": "sendBackward"
      }
    }
  },
  "addCheckbox": {
    "abbrev": "ckb",
    "desc": "#addCheckbox.md",
    "pNames": [
      "parent",
      "text",
      "options",
      "width",
      "height"
    ],
    "pTypes": [
      "obj-The layout where to add the checkbox",
      "str-The label for the checkbox",
      "str-A comma separated options for the Checkbox. \\n Colors: `Primary` `Secondary` `Medium` `Small` \\n Position: `Left` `Top` `Right` `Bottom` \\n Variant: `Indeterminate` `Determinate`",
      "num-Fraction of the parent width. [0-1]",
      "num-Fraction of the parent height. [0-1]"
    ],
    "retval": "obj-Checkbox Component",
    "shortDesc": "addCheckbox",
    "subf": {
      "setOnTouch": {
        "desc": "Adds an event handler when the checkbox is touch\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "check "
            ],
            "pTypes": [
              "bin-The checked state of the checkbox."
            ]
          }
        ],
        "shortDesc": "setOnTouch"
      },
      "setIcon": {
        "desc": "Sets a custom icon for the checkbox\n\n",
        "pNames": [
          "checked",
          "unchecked"
        ],
        "pTypes": [
          "str-Material icon for checked state",
          "str-Material icon for unchecked state"
        ],
        "shortDesc": "setIcon"
      },
      "getIcon": {
        "desc": "Returns the icons of the form { checkIcon, uncheckedIcon\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "getIcon",
        "retval": "obj"
      },
      "setOnContextMenu": {
        "desc": "Adds a callback function on right click\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "event "
            ],
            "pTypes": [
              "obj-The pointer event object."
            ]
          }
        ],
        "shortDesc": "setOnContextMenu"
      },
      "animate": {
        "desc": "Animate the component\n\n",
        "pNames": [
          "anim",
          "duration"
        ],
        "pTypes": [
          "str-The type of animation. Here are the available values `bounce` `flash` `pulse` `rubberBand` `shakeX` `shakeY` `headShake` `swing` `tada` `wobble` `jello` `heartBeat` \\n Back Entrances `backInDown` `backInLeft` `backInRight` `backInUp` \\n Back Exits `backOutDown` `backOutLeft` `backOutRight` `backOutUp` \\n Bouncing Entrances `bounceIn` `bounceInDown` `bounceInLeft` `bounceInRight` `bounceInUp` \\n Bouncing exits `bounceOut` `bounceOutDown` `bounceOutLeft` `bounceOutRight` `bounceOutUp` \\n Fading entrances `fadeIn` `fadeInDown` `fadeInDownBig` `fadeInLeft` `fadeInLeftBig` `fadeInRight` `fadeInRightBig` `fadeInUp` `fadeInUpBig` `fadeInTopLeft` `fadeInTopRight` `fadeInBottomLeft` `fadeInBottomRight` \\n Fading exits `fadeOut` `fadeOutDown` `fadeOutDownBig` `fadeOutLeft` `fadeOutLeftBig` `fadeOutRight` `fadeOutRightBig` `fadeOutUp` `fadeOutUpBig` `fadeOutTopLeft` `fadeOutTopRight` `fadeOutBottomRight` `fadeOutBottomLeft` \\n Flippers `flip` `flipInX` `flipInY` `flipOutX` `flipOutY` \\n Lightspeed `lightSpeedInRight` `lightSpeedInLeft` `lightSpeedOutRight` `lightSpeedOutLeft` \\n Rotating Entrances `rotateIn` `rotateInDownLeft` `rotateInDownRight` `rotateInUpLeft` `rotateInUpRight` \\n Rotating Exits `rotateOut` `rotateOutDownLeft` `rotateOutDownRight` `rotateOutUpLeft` `rotateOutUpRight` \\n Specials `hinge` `jackInTheBox` `rollIn` `rollOut` \\n Zooming Entrances `zoomIn` `zoomInDown` `zoomInLeft` `zoomInRight` `zoomInUp` \\n Zooming Exits `zoomOut` `zoomOutDown` `zoomOutLeft` `zoomOutRight` `zoomOutUp` \\n Sliding Entrances `slideInDown` `slideInLeft` `slideInRight` `slideInUp` \\n Sliding Exits `slideOutDown` `slideOutLeft` `slideOutRight` `slideOutUp`.",
          "num-The time in milliseconds."
        ],
        "shortDesc": "animate"
      },
      "setSize": {
        "desc": "Sets the size of the component\n\n",
        "pNames": [
          "width",
          "height"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the parent height. [0-1]"
        ],
        "shortDesc": "setSize"
      },
      "show": {
        "desc": "Show the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "show"
      },
      "hide": {
        "desc": "Hide the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "hide"
      },
      "gone": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "gone"
      },
      "destroy": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "destroy"
      },
      "setScale": {
        "desc": "Sets the x and y scaling of the component\n\n",
        "pNames": [
          "x",
          "y"
        ],
        "pTypes": [
          "num-The x-scale of the component.Values less than `0` is smaller than the normal. While values greater than `1` is greater than the normal.",
          "num-The y-scale of the component. Values less than `1` is smaller than the normal. While vaues greater than `1` is greater than the normal."
        ],
        "shortDesc": "setScale"
      },
      "getPosition": {
        "desc": "Returns the position of the component. The return object is of the form `{ left, top, right, bottom\n\n",
        "pNames": [
          "options"
        ],
        "pTypes": [
          "str-The mode of the measurements. Values can be `px` or `%`"
        ],
        "shortDesc": "getPosition",
        "retval": "obj"
      },
      "setMargins": {
        "desc": "Sets the margin of the component\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "str-`px` or `%`"
        ],
        "shortDesc": "setMargins"
      },
      "setPadding": {
        "desc": "Sets the padding component container\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the component width.",
          "num-Fraction of the component height. [0-1]",
          "num-Fraction of the component width. [0-1]",
          "num-Fraction of the component height. [0-1]",
          "str-The size thickness mode. Can be `px`"
        ],
        "shortDesc": "setPadding"
      },
      "setPosition": {
        "desc": "Sets the position of the component relative to its parent dimensions\n\n",
        "pNames": [
          "left",
          "top",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the screen height. [0-1]",
          "str-Unit of measurement. Can be `px` or `%` or any css unit of measurement."
        ],
        "shortDesc": "setPosition"
      },
      "setBorder": {
        "desc": "Sets the border line for the component container\n\n",
        "pNames": [
          "width",
          "clr",
          "style"
        ],
        "pTypes": [
          "num-Border-left thickness in pixels.",
          "str-Border color in hexadecimal form `#rrggbb`",
          "str-Border-styles. Values can be `dotted` `dashed` `solid` `double` `groove` `ridge` `inset` and `outset`. Default is `solid`"
        ],
        "shortDesc": "setBorder"
      },
      "setCornerRadius": {
        "desc": "Sets the corner radius of the component\n\n",
        "pNames": [
          "tl",
          "tr",
          "bl",
          "br",
          "mode"
        ],
        "pTypes": [
          "num-Top-Left border radius in pixels.",
          "num-Top-Right border radius in pixels.",
          "num-Bottom-Left border radius in pixels.",
          "num-Bottom-Right border radius in pixels.",
          "str-Unit. Values are `px` `rem` or `%`."
        ],
        "shortDesc": "setCornerRadius"
      },
      "bringForward": {
        "desc": "Bring this component forward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A negative value behaves like `sendBackward` method."
        ],
        "shortDesc": "bringForward"
      },
      "sendBackward": {
        "desc": "Bring this component backward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A positve value behaves like `bringForward` method."
        ],
        "shortDesc": "sendBackward"
      }
    }
  },
  "addCheckboxGroup": {
    "abbrev": "ckb",
    "desc": "#addCheckboxGroup.md",
    "pNames": [
      "parent",
      "list",
      "options",
      "width",
      "height"
    ],
    "pTypes": [
      "obj-The parent layout where to add the CheckboxGroup.",
      "lst-The items to be displayed.",
      "str-A comma separated options. \\n Colors: `Default` `Primary` `Secondary` \\n Sizes: `Small` `Medium` \\n Icon Position: `Left` or `Right` \\n Container: `Elevated` or `Outlined` \\n Corners : `Square`",
      "num-Fraction of the screen width.",
      "num-Fraction of the screen height."
    ],
    "retval": "obj-CheckboxGroup Component",
    "shortDesc": "addCheckboxGroup",
    "subf": {
      "setOnTouch": {
        "desc": "Sets a callback function when the checkbox item is touch\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "value ",
              "text ",
              "index ",
              "event "
            ],
            "pTypes": [
              "bin-The checked state of the checkbox item.",
              "str-The checkbox label text.",
              "num-The index of the corresponding checkbox.",
              "obj-The click event."
            ]
          }
        ],
        "shortDesc": "setOnTouch"
      },
      "setOnChange": {
        "desc": "Adds a callback function to be called whent there is a change of value\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "values "
            ],
            "pTypes": [
              "lst-An array of indexes corresponding to the checked checkbox items."
            ]
          }
        ],
        "shortDesc": "setOnChange"
      },
      "setIcon": {
        "desc": "Sets the checked icon and unchecked icon\n\n",
        "pNames": [
          "checked",
          "unchecked"
        ],
        "pTypes": [
          "str-Material icon font",
          "str-Material icon font"
        ],
        "shortDesc": "setIcon"
      },
      "getIcon": {
        "desc": "Get the checked and unchecked icon of the checkbox group\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "getIcon",
        "retval": "obj"
      },
      "setCheckedByIndex": {
        "desc": "Checked or unchecked a given item by its index\n\n",
        "pNames": [
          "item",
          "bool"
        ],
        "pTypes": [
          "num-The item or index of the item.",
          "bin-The item value. Can be `true` or `false`."
        ],
        "shortDesc": "setCheckedByIndex"
      },
      "setCheckedByName": {
        "desc": "Checked or unchecked a given item by its name\n\n",
        "pNames": [
          "name",
          "bool"
        ],
        "pTypes": [
          "str-The item or index of the item.",
          "bin-The item value. Can be `true` or `false`."
        ],
        "shortDesc": "setCheckedByName"
      },
      "getCheckedItems": {
        "desc": "Get the list of all checked items\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "getCheckedItems",
        "retval": "str"
      },
      "getCheckedByIndex": {
        "desc": "Get the current value of the item in the list\n\n",
        "pNames": [
          "index"
        ],
        "pTypes": [
          "num-The index of the corresponding item."
        ],
        "shortDesc": "getCheckedByIndex",
        "retval": "bin"
      },
      "getCheckedByName": {
        "desc": "Get the current value of the item in the list\n\n",
        "pNames": [
          "name"
        ],
        "pTypes": [
          "str-The index of the corresponding item."
        ],
        "shortDesc": "getCheckedByName",
        "retval": "bin"
      },
      "setTextByIndex": {
        "desc": "Sets a new text to a given item by its index\n\n",
        "pNames": [
          "index",
          "val"
        ],
        "pTypes": [
          "num-The index of the item.",
          "str-The new text to replace."
        ],
        "shortDesc": "setTextByIndex"
      },
      "setTextByName": {
        "desc": "Sets a new text to a given item by its name\n\n",
        "pNames": [
          "name",
          "val"
        ],
        "pTypes": [
          "str-The name of the item",
          "str-The new text to replace"
        ],
        "shortDesc": "setTextByName"
      },
      "getText": {
        "desc": "Get the text of the item in a given index\n\n",
        "pNames": [
          "index"
        ],
        "pTypes": [
          "num-The index of the list"
        ],
        "shortDesc": "getText",
        "retval": "str"
      },
      "setList": {
        "desc": "Sets a new list of item in the checkbox group\n\n",
        "pNames": [
          "list"
        ],
        "pTypes": [
          "obj-The new list items for the checkbox group."
        ],
        "shortDesc": "setList"
      },
      "setEnabled": {
        "desc": "Enable or disable an item in the checkbox group\n\n",
        "pNames": [
          "index",
          "value"
        ],
        "pTypes": [
          "num-The index of the checkbox item.",
          "bin-Values can be `true` or `false`."
        ],
        "shortDesc": "setEnabled"
      },
      "getEnabled": {
        "desc": "Get the enabled state of a checkbox item\n\n",
        "pNames": [
          "index"
        ],
        "pTypes": [
          "num-The index of the checkbox item."
        ],
        "shortDesc": "getEnabled",
        "retval": "bin"
      },
      "setEnabledByName": {
        "desc": "Enable or disable a checkbox item by its name\n\n",
        "pNames": [
          "name",
          "value"
        ],
        "pTypes": [
          "str-The name of the checkbox item.",
          "bin-Values can be `true` or `false`"
        ],
        "shortDesc": "setEnabledByName"
      },
      "getEnabledByName": {
        "desc": "Get the enabled state of a checkbox item by its name\n\n",
        "pNames": [
          "name"
        ],
        "pTypes": [
          "str-The checkbox item."
        ],
        "shortDesc": "getEnabledByName",
        "retval": "bin"
      },
      "addItem": {
        "desc": "Add or insert an item in the checkbox group\n\n",
        "pNames": [
          "text",
          "index"
        ],
        "pTypes": [
          "str-The text label for the checkbox.",
          "num-The index in which to insert the item."
        ],
        "shortDesc": "addItem"
      },
      "removeItemByIndex": {
        "desc": "Removes an item in the checkbox group by its corresponding index\n\n",
        "pNames": [
          "index"
        ],
        "pTypes": [
          "num-The index of the corresponding item to remove."
        ],
        "shortDesc": "removeItemByIndex"
      },
      "removeItemByName": {
        "desc": "Removes an item in the checkbox group by its title name\n\n",
        "pNames": [
          "title"
        ],
        "pTypes": [
          "str-The title text of the corresponding checkbox item."
        ],
        "shortDesc": "removeItemByName"
      },
      "popItem": {
        "desc": "Removes the last item in the checkbox group\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "popItem"
      },
      "shiftItem": {
        "desc": "Removes the first item in the checkbox group\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "shiftItem"
      },
      "setOnContextMenu": {
        "desc": "Adds a callback function on right click\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "label ",
              "index ",
              "event "
            ],
            "pTypes": [
              "str-The checkbox item label text.",
              "num-The index of the corresponding item.",
              "obj-The pointer event object."
            ]
          }
        ],
        "shortDesc": "setOnContextMenu"
      },
      "setCornerRadius": {
        "desc": "Sets the corner radius of the checkbox group\n\n",
        "pNames": [
          "tl",
          "tr",
          "bl",
          "br",
          "mode"
        ],
        "pTypes": [
          "num-Top-left corner radius.",
          "num-Top-right corner radius.",
          "num-Bottom-left corner radius.",
          "num-Bottom-right corner radius.",
          "str-Unit. Values are `px` `rem` or `%`."
        ],
        "shortDesc": "setCornerRadius"
      },
      "animate": {
        "desc": "Animate the component\n\n",
        "pNames": [
          "anim",
          "duration"
        ],
        "pTypes": [
          "str-The type of animation. Here are the available values `bounce` `flash` `pulse` `rubberBand` `shakeX` `shakeY` `headShake` `swing` `tada` `wobble` `jello` `heartBeat` \\n Back Entrances `backInDown` `backInLeft` `backInRight` `backInUp` \\n Back Exits `backOutDown` `backOutLeft` `backOutRight` `backOutUp` \\n Bouncing Entrances `bounceIn` `bounceInDown` `bounceInLeft` `bounceInRight` `bounceInUp` \\n Bouncing exits `bounceOut` `bounceOutDown` `bounceOutLeft` `bounceOutRight` `bounceOutUp` \\n Fading entrances `fadeIn` `fadeInDown` `fadeInDownBig` `fadeInLeft` `fadeInLeftBig` `fadeInRight` `fadeInRightBig` `fadeInUp` `fadeInUpBig` `fadeInTopLeft` `fadeInTopRight` `fadeInBottomLeft` `fadeInBottomRight` \\n Fading exits `fadeOut` `fadeOutDown` `fadeOutDownBig` `fadeOutLeft` `fadeOutLeftBig` `fadeOutRight` `fadeOutRightBig` `fadeOutUp` `fadeOutUpBig` `fadeOutTopLeft` `fadeOutTopRight` `fadeOutBottomRight` `fadeOutBottomLeft` \\n Flippers `flip` `flipInX` `flipInY` `flipOutX` `flipOutY` \\n Lightspeed `lightSpeedInRight` `lightSpeedInLeft` `lightSpeedOutRight` `lightSpeedOutLeft` \\n Rotating Entrances `rotateIn` `rotateInDownLeft` `rotateInDownRight` `rotateInUpLeft` `rotateInUpRight` \\n Rotating Exits `rotateOut` `rotateOutDownLeft` `rotateOutDownRight` `rotateOutUpLeft` `rotateOutUpRight` \\n Specials `hinge` `jackInTheBox` `rollIn` `rollOut` \\n Zooming Entrances `zoomIn` `zoomInDown` `zoomInLeft` `zoomInRight` `zoomInUp` \\n Zooming Exits `zoomOut` `zoomOutDown` `zoomOutLeft` `zoomOutRight` `zoomOutUp` \\n Sliding Entrances `slideInDown` `slideInLeft` `slideInRight` `slideInUp` \\n Sliding Exits `slideOutDown` `slideOutLeft` `slideOutRight` `slideOutUp`.",
          "num-The time in milliseconds."
        ],
        "shortDesc": "animate"
      },
      "setSize": {
        "desc": "Sets the size of the component\n\n",
        "pNames": [
          "width",
          "height"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the parent height. [0-1]"
        ],
        "shortDesc": "setSize"
      },
      "show": {
        "desc": "Show the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "show"
      },
      "hide": {
        "desc": "Hide the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "hide"
      },
      "gone": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "gone"
      },
      "destroy": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "destroy"
      },
      "setScale": {
        "desc": "Sets the x and y scaling of the component\n\n",
        "pNames": [
          "x",
          "y"
        ],
        "pTypes": [
          "num-The x-scale of the component.Values less than `0` is smaller than the normal. While values greater than `1` is greater than the normal.",
          "num-The y-scale of the component. Values less than `1` is smaller than the normal. While vaues greater than `1` is greater than the normal."
        ],
        "shortDesc": "setScale"
      },
      "getPosition": {
        "desc": "Returns the position of the component. The return object is of the form `{ left, top, right, bottom\n\n",
        "pNames": [
          "options"
        ],
        "pTypes": [
          "str-The mode of the measurements. Values can be `px` or `%`"
        ],
        "shortDesc": "getPosition",
        "retval": "obj"
      },
      "setMargins": {
        "desc": "Sets the margin of the component\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "str-`px` or `%`"
        ],
        "shortDesc": "setMargins"
      },
      "setPadding": {
        "desc": "Sets the padding component container\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the component width.",
          "num-Fraction of the component height. [0-1]",
          "num-Fraction of the component width. [0-1]",
          "num-Fraction of the component height. [0-1]",
          "str-The size thickness mode. Can be `px`"
        ],
        "shortDesc": "setPadding"
      },
      "setPosition": {
        "desc": "Sets the position of the component relative to its parent dimensions\n\n",
        "pNames": [
          "left",
          "top",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the screen height. [0-1]",
          "str-Unit of measurement. Can be `px` or `%` or any css unit of measurement."
        ],
        "shortDesc": "setPosition"
      },
      "setBorder": {
        "desc": "Sets the border line for the component container\n\n",
        "pNames": [
          "width",
          "clr",
          "style"
        ],
        "pTypes": [
          "num-Border-left thickness in pixels.",
          "str-Border color in hexadecimal form `#rrggbb`",
          "str-Border-styles. Values can be `dotted` `dashed` `solid` `double` `groove` `ridge` `inset` and `outset`. Default is `solid`"
        ],
        "shortDesc": "setBorder"
      },
      "bringForward": {
        "desc": "Bring this component forward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A negative value behaves like `sendBackward` method."
        ],
        "shortDesc": "bringForward"
      },
      "sendBackward": {
        "desc": "Bring this component backward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A positve value behaves like `bringForward` method."
        ],
        "shortDesc": "sendBackward"
      }
    }
  },
  "addChip": {
    "abbrev": "chp",
    "desc": "#addChip.md",
    "pNames": [
      "parent",
      "text",
      "options",
      "width",
      "height"
    ],
    "pTypes": [
      "obj-The parent layout where to add the Chip.",
      "str-The text on the chip.",
      "str-A comma separated option. \\n Color: `Primary` `Secondary` `Default` \\n Size: `Small` `Medium` \\n Variant: `Outlined` `Default` \\n Util: `Touchable`",
      "num-Fraction of the screen width. [0-1]",
      "num-Fraction of the screen height. [0-1]"
    ],
    "retval": "obj-Chip Component",
    "shortDesc": "addChip",
    "subf": {
      "setTouchable": {
        "desc": "Sets the chip to clickable. This will add a pointer cursor into the chip when hovered\n\n",
        "pNames": [
          "touchable"
        ],
        "pTypes": [
          "bin-Can be `true` or `false`"
        ],
        "shortDesc": "setTouchable"
      },
      "setOnDelete": {
        "desc": "Sets a callback function when the chip is deleted. This will automatically add a delete icon to the chip\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          ""
        ],
        "shortDesc": "setOnDelete"
      },
      "setCornerRadius": {
        "desc": "Sets the corner radius of the chip\n\n",
        "pNames": [
          "tl",
          "tr",
          "bl",
          "br",
          "mode"
        ],
        "pTypes": [
          "num-Top-left corner radius.",
          "num-Top-right corner radius.",
          "num-Bottom-left corner radius.",
          "num-Bottom-right corner radius.",
          "str-Unit. Values are `px` `rem` or `%`."
        ],
        "shortDesc": "setCornerRadius"
      },
      "setOnTouch": {
        "desc": "Adds a callback handler when the component is touch\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "event "
            ],
            "pTypes": [
              "obj-The click event object."
            ]
          }
        ],
        "shortDesc": "setOnTouch"
      },
      "setOnContextMenu": {
        "desc": "Adds a callback function on right click\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "event "
            ],
            "pTypes": [
              "obj-The pointer event object."
            ]
          }
        ],
        "shortDesc": "setOnContextMenu"
      },
      "animate": {
        "desc": "Animate the component\n\n",
        "pNames": [
          "anim",
          "duration"
        ],
        "pTypes": [
          "str-The type of animation. Here are the available values `bounce` `flash` `pulse` `rubberBand` `shakeX` `shakeY` `headShake` `swing` `tada` `wobble` `jello` `heartBeat` \\n Back Entrances `backInDown` `backInLeft` `backInRight` `backInUp` \\n Back Exits `backOutDown` `backOutLeft` `backOutRight` `backOutUp` \\n Bouncing Entrances `bounceIn` `bounceInDown` `bounceInLeft` `bounceInRight` `bounceInUp` \\n Bouncing exits `bounceOut` `bounceOutDown` `bounceOutLeft` `bounceOutRight` `bounceOutUp` \\n Fading entrances `fadeIn` `fadeInDown` `fadeInDownBig` `fadeInLeft` `fadeInLeftBig` `fadeInRight` `fadeInRightBig` `fadeInUp` `fadeInUpBig` `fadeInTopLeft` `fadeInTopRight` `fadeInBottomLeft` `fadeInBottomRight` \\n Fading exits `fadeOut` `fadeOutDown` `fadeOutDownBig` `fadeOutLeft` `fadeOutLeftBig` `fadeOutRight` `fadeOutRightBig` `fadeOutUp` `fadeOutUpBig` `fadeOutTopLeft` `fadeOutTopRight` `fadeOutBottomRight` `fadeOutBottomLeft` \\n Flippers `flip` `flipInX` `flipInY` `flipOutX` `flipOutY` \\n Lightspeed `lightSpeedInRight` `lightSpeedInLeft` `lightSpeedOutRight` `lightSpeedOutLeft` \\n Rotating Entrances `rotateIn` `rotateInDownLeft` `rotateInDownRight` `rotateInUpLeft` `rotateInUpRight` \\n Rotating Exits `rotateOut` `rotateOutDownLeft` `rotateOutDownRight` `rotateOutUpLeft` `rotateOutUpRight` \\n Specials `hinge` `jackInTheBox` `rollIn` `rollOut` \\n Zooming Entrances `zoomIn` `zoomInDown` `zoomInLeft` `zoomInRight` `zoomInUp` \\n Zooming Exits `zoomOut` `zoomOutDown` `zoomOutLeft` `zoomOutRight` `zoomOutUp` \\n Sliding Entrances `slideInDown` `slideInLeft` `slideInRight` `slideInUp` \\n Sliding Exits `slideOutDown` `slideOutLeft` `slideOutRight` `slideOutUp`.",
          "num-The time in milliseconds."
        ],
        "shortDesc": "animate"
      },
      "setSize": {
        "desc": "Sets the size of the component\n\n",
        "pNames": [
          "width",
          "height"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the parent height. [0-1]"
        ],
        "shortDesc": "setSize"
      },
      "show": {
        "desc": "Show the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "show"
      },
      "hide": {
        "desc": "Hide the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "hide"
      },
      "gone": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "gone"
      },
      "destroy": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "destroy"
      },
      "setScale": {
        "desc": "Sets the x and y scaling of the component\n\n",
        "pNames": [
          "x",
          "y"
        ],
        "pTypes": [
          "num-The x-scale of the component.Values less than `0` is smaller than the normal. While values greater than `1` is greater than the normal.",
          "num-The y-scale of the component. Values less than `1` is smaller than the normal. While vaues greater than `1` is greater than the normal."
        ],
        "shortDesc": "setScale"
      },
      "getPosition": {
        "desc": "Returns the position of the component. The return object is of the form `{ left, top, right, bottom\n\n",
        "pNames": [
          "options"
        ],
        "pTypes": [
          "str-The mode of the measurements. Values can be `px` or `%`"
        ],
        "shortDesc": "getPosition",
        "retval": "obj"
      },
      "setMargins": {
        "desc": "Sets the margin of the component\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "str-`px` or `%`"
        ],
        "shortDesc": "setMargins"
      },
      "setPadding": {
        "desc": "Sets the padding component container\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the component width.",
          "num-Fraction of the component height. [0-1]",
          "num-Fraction of the component width. [0-1]",
          "num-Fraction of the component height. [0-1]",
          "str-The size thickness mode. Can be `px`"
        ],
        "shortDesc": "setPadding"
      },
      "setPosition": {
        "desc": "Sets the position of the component relative to its parent dimensions\n\n",
        "pNames": [
          "left",
          "top",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the screen height. [0-1]",
          "str-Unit of measurement. Can be `px` or `%` or any css unit of measurement."
        ],
        "shortDesc": "setPosition"
      },
      "setBorder": {
        "desc": "Sets the border line for the component container\n\n",
        "pNames": [
          "width",
          "clr",
          "style"
        ],
        "pTypes": [
          "num-Border-left thickness in pixels.",
          "str-Border color in hexadecimal form `#rrggbb`",
          "str-Border-styles. Values can be `dotted` `dashed` `solid` `double` `groove` `ridge` `inset` and `outset`. Default is `solid`"
        ],
        "shortDesc": "setBorder"
      },
      "bringForward": {
        "desc": "Bring this component forward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A negative value behaves like `sendBackward` method."
        ],
        "shortDesc": "bringForward"
      },
      "sendBackward": {
        "desc": "Bring this component backward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A positve value behaves like `bringForward` method."
        ],
        "shortDesc": "sendBackward"
      }
    }
  },
  "showColorPicker": {
    "abbrev": "",
    "desc": "#showColorPicker.md",
    "pNames": [
      "value",
      "options",
      "onSelect"
    ],
    "pTypes": [
      "str-A hexadecimal default value for the color picker.",
      "str-A comma separated color picker options. Values can be \\n `Alpha` Includes an alpha",
      ""
    ],
    "retval": "obj-ColorPicker Component",
    "shortDesc": "showColorPicker",
    "subf": {
      "getValue": {
        "desc": "Returns the hexadecimal string color value of the color picker\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "getValue",
        "retval": "str"
      }
    }
  },
  "addDatePicker": {
    "abbrev": "dtp",
    "desc": "#addDatePicker.md",
    "pNames": [
      "date",
      "options"
    ],
    "pTypes": [
      "str-A default date value to which the datepicker begins. Format `YYYY-MM-DD`",
      "str-A comma separated options for the date picker. Can be `Portrait` `Landscape`"
    ],
    "retval": "obj-DatePicker Component",
    "shortDesc": "addDatePicker",
    "subf": {
      "show": {
        "desc": "Show the date picker the dialog\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "show"
      },
      "hide": {
        "desc": "Hide the date picker dialog\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "hide"
      },
      "setLimits": {
        "desc": "Set a limit to which the date picker dialog can render a date\n\n",
        "pNames": [
          "past",
          "future"
        ],
        "pTypes": [
          "str-Date in the past of the form `YYYY-MM-DD`",
          "str-Date in the future of the form `YYYY-MM-DD`"
        ],
        "shortDesc": "setLimits"
      },
      "setOnSelect": {
        "desc": "Sets a callback function to execute when date picker dialog is submitted\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "date "
            ],
            "pTypes": [
              "str-The selected date in the following format `YYYY-MM-DD`. You change format by setting `format` property."
            ]
          }
        ],
        "shortDesc": "setOnSelect"
      },
      "setFormat": {
        "desc": "Sets the format of the date to be passed into the onSelect callback\n\n",
        "pNames": [
          "format"
        ],
        "pTypes": [
          "str-A date format. Can be `YYYY-MM-DD` `MM-DD-YYYY` `DD-MM-YYYY`"
        ],
        "shortDesc": "setFormat"
      },
      "isVisible": {
        "desc": "Get the current visibility of the date picker\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "isVisible",
        "retval": "bin"
      }
    }
  },
  "showDateTimePicker": {
    "abbrev": "dtp",
    "desc": "#showDateTimePicker.md",
    "pNames": [
      "callback",
      "date",
      "time",
      "format"
    ],
    "pTypes": [
      "",
      "str-Default value for date of the form \"MM/DD/YYYY\"",
      "str-Default value for time of the form \"HH/MM/SS\"",
      "str-The format value that will be pass to callback. Formats can be of the form \\n `MM/DD/YYYY HH:MM:SS` `MM:DD:YYYY HH:MM:SS`"
    ],
    "retval": "obj-DateTimePicker Component",
    "shortDesc": "showDateTimePicker",
    "subf": {
      "setOnSelect": {
        "desc": "Sets a callback function on select date and time\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "value "
            ],
            "pTypes": [
              "str-The selected date and time in the following format `MM/DD/YYYY HH:MM:SS`."
            ]
          }
        ],
        "shortDesc": "setOnSelect"
      }
    }
  },
  "addDialog": {
    "abbrev": "dlg",
    "desc": "#addDialog.md",
    "pNames": [
      "title",
      "body",
      "actions",
      "options"
    ],
    "pTypes": [
      "str-The dialog title text.",
      "str-The dialog message to be shown.",
      "str-A comma separated text for action buttons.",
      "str-A comma separated options for Dialog. Options are \\n Colors: `Primary` `Secondary` \\n Util: `NoCancel` prevents the dialog from closing on action."
    ],
    "retval": "obj-Dialog Component",
    "shortDesc": "addDialog",
    "subf": {
      "setOnAction": {
        "desc": "Adds a callback function when the action buttons are click\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "text ",
              "index "
            ],
            "pTypes": [
              "str-The dialog action text.",
              "num-The index of the corresponding dialog action."
            ]
          }
        ],
        "shortDesc": "setOnAction"
      },
      "setOnClose": {
        "desc": "Adds a callback function when the dialog is close\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          ""
        ],
        "shortDesc": "setOnClose"
      },
      "show": {
        "desc": "Show the dialog\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "show"
      },
      "hide": {
        "desc": "Hide the dialog\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "hide"
      }
    }
  },
  "addDivider": {
    "abbrev": "",
    "desc": "#addDivider.md",
    "pNames": [
      "parent",
      "width",
      "options"
    ],
    "pTypes": [
      "obj-The layour where to add the divider.",
      "num-Fraction of the screen width. Default is 1.",
      "str-A comma separated Divider options. Values can be `Inset`"
    ],
    "retval": "obj-Divider Component",
    "shortDesc": "addDivider",
    "subf": {
      "setOnTouch": {
        "desc": "Adds a callback handler when the component is touch\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "event "
            ],
            "pTypes": [
              "obj-The click event object."
            ]
          }
        ],
        "shortDesc": "setOnTouch"
      },
      "setOnContextMenu": {
        "desc": "Adds a callback function on right click\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "event "
            ],
            "pTypes": [
              "obj-The pointer event object."
            ]
          }
        ],
        "shortDesc": "setOnContextMenu"
      },
      "animate": {
        "desc": "Animate the component\n\n",
        "pNames": [
          "anim",
          "duration"
        ],
        "pTypes": [
          "str-The type of animation. Here are the available values `bounce` `flash` `pulse` `rubberBand` `shakeX` `shakeY` `headShake` `swing` `tada` `wobble` `jello` `heartBeat` \\n Back Entrances `backInDown` `backInLeft` `backInRight` `backInUp` \\n Back Exits `backOutDown` `backOutLeft` `backOutRight` `backOutUp` \\n Bouncing Entrances `bounceIn` `bounceInDown` `bounceInLeft` `bounceInRight` `bounceInUp` \\n Bouncing exits `bounceOut` `bounceOutDown` `bounceOutLeft` `bounceOutRight` `bounceOutUp` \\n Fading entrances `fadeIn` `fadeInDown` `fadeInDownBig` `fadeInLeft` `fadeInLeftBig` `fadeInRight` `fadeInRightBig` `fadeInUp` `fadeInUpBig` `fadeInTopLeft` `fadeInTopRight` `fadeInBottomLeft` `fadeInBottomRight` \\n Fading exits `fadeOut` `fadeOutDown` `fadeOutDownBig` `fadeOutLeft` `fadeOutLeftBig` `fadeOutRight` `fadeOutRightBig` `fadeOutUp` `fadeOutUpBig` `fadeOutTopLeft` `fadeOutTopRight` `fadeOutBottomRight` `fadeOutBottomLeft` \\n Flippers `flip` `flipInX` `flipInY` `flipOutX` `flipOutY` \\n Lightspeed `lightSpeedInRight` `lightSpeedInLeft` `lightSpeedOutRight` `lightSpeedOutLeft` \\n Rotating Entrances `rotateIn` `rotateInDownLeft` `rotateInDownRight` `rotateInUpLeft` `rotateInUpRight` \\n Rotating Exits `rotateOut` `rotateOutDownLeft` `rotateOutDownRight` `rotateOutUpLeft` `rotateOutUpRight` \\n Specials `hinge` `jackInTheBox` `rollIn` `rollOut` \\n Zooming Entrances `zoomIn` `zoomInDown` `zoomInLeft` `zoomInRight` `zoomInUp` \\n Zooming Exits `zoomOut` `zoomOutDown` `zoomOutLeft` `zoomOutRight` `zoomOutUp` \\n Sliding Entrances `slideInDown` `slideInLeft` `slideInRight` `slideInUp` \\n Sliding Exits `slideOutDown` `slideOutLeft` `slideOutRight` `slideOutUp`.",
          "num-The time in milliseconds."
        ],
        "shortDesc": "animate"
      },
      "setSize": {
        "desc": "Sets the size of the component\n\n",
        "pNames": [
          "width",
          "height"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the parent height. [0-1]"
        ],
        "shortDesc": "setSize"
      },
      "show": {
        "desc": "Show the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "show"
      },
      "hide": {
        "desc": "Hide the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "hide"
      },
      "gone": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "gone"
      },
      "destroy": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "destroy"
      },
      "setScale": {
        "desc": "Sets the x and y scaling of the component\n\n",
        "pNames": [
          "x",
          "y"
        ],
        "pTypes": [
          "num-The x-scale of the component.Values less than `0` is smaller than the normal. While values greater than `1` is greater than the normal.",
          "num-The y-scale of the component. Values less than `1` is smaller than the normal. While vaues greater than `1` is greater than the normal."
        ],
        "shortDesc": "setScale"
      },
      "getPosition": {
        "desc": "Returns the position of the component. The return object is of the form `{ left, top, right, bottom\n\n",
        "pNames": [
          "options"
        ],
        "pTypes": [
          "str-The mode of the measurements. Values can be `px` or `%`"
        ],
        "shortDesc": "getPosition",
        "retval": "obj"
      },
      "setMargins": {
        "desc": "Sets the margin of the component\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "str-`px` or `%`"
        ],
        "shortDesc": "setMargins"
      },
      "setPadding": {
        "desc": "Sets the padding component container\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the component width.",
          "num-Fraction of the component height. [0-1]",
          "num-Fraction of the component width. [0-1]",
          "num-Fraction of the component height. [0-1]",
          "str-The size thickness mode. Can be `px`"
        ],
        "shortDesc": "setPadding"
      },
      "setPosition": {
        "desc": "Sets the position of the component relative to its parent dimensions\n\n",
        "pNames": [
          "left",
          "top",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the screen height. [0-1]",
          "str-Unit of measurement. Can be `px` or `%` or any css unit of measurement."
        ],
        "shortDesc": "setPosition"
      },
      "setBorder": {
        "desc": "Sets the border line for the component container\n\n",
        "pNames": [
          "width",
          "clr",
          "style"
        ],
        "pTypes": [
          "num-Border-left thickness in pixels.",
          "str-Border color in hexadecimal form `#rrggbb`",
          "str-Border-styles. Values can be `dotted` `dashed` `solid` `double` `groove` `ridge` `inset` and `outset`. Default is `solid`"
        ],
        "shortDesc": "setBorder"
      },
      "setCornerRadius": {
        "desc": "Sets the corner radius of the component\n\n",
        "pNames": [
          "tl",
          "tr",
          "bl",
          "br",
          "mode"
        ],
        "pTypes": [
          "num-Top-Left border radius in pixels.",
          "num-Top-Right border radius in pixels.",
          "num-Bottom-Left border radius in pixels.",
          "num-Bottom-Right border radius in pixels.",
          "str-Unit. Values are `px` `rem` or `%`."
        ],
        "shortDesc": "setCornerRadius"
      },
      "bringForward": {
        "desc": "Bring this component forward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A negative value behaves like `sendBackward` method."
        ],
        "shortDesc": "bringForward"
      },
      "sendBackward": {
        "desc": "Bring this component backward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A positve value behaves like `bringForward` method."
        ],
        "shortDesc": "sendBackward"
      }
    }
  },
  "addDrawer": {
    "abbrev": "drw",
    "desc": "#addDrawer.md",
    "pNames": [
      "lay",
      "options"
    ],
    "pTypes": [
      "obj-The drawer layout.",
      "str-A comma separated options."
    ],
    "retval": "obj-Drawer Component",
    "shortDesc": "addDrawer",
    "subf": {
      "addLayout": {
        "desc": "Adds a layout into the drawer\n\n",
        "pNames": [
          "lay"
        ],
        "pTypes": [
          "obj-Layout component."
        ],
        "shortDesc": "addLayout"
      },
      "disableSwipeToOpen": {
        "desc": "Disable swipe to open feature of the drawer. You can use this especially for ios devices which has swipe to go back feature\n\n",
        "pNames": [
          "value"
        ],
        "pTypes": [
          "bin-Values can be `true` or `false`."
        ],
        "shortDesc": "disableSwipeToOpen"
      },
      "disableBackdropTransition": {
        "desc": "Disable the backdrop transition. This can improve the FPS on low-end devices\n\n",
        "pNames": [
          "value"
        ],
        "pTypes": [
          "bin-Values can be `true` or `false`."
        ],
        "shortDesc": "disableBackdropTransition"
      },
      "disableDiscovery": {
        "desc": "If `true`, touching the screen near the edge of the drawer will not slide in the drawer a bit to promote accidental discovery of the swipe gesture\n\n",
        "pNames": [
          "value"
        ],
        "pTypes": [
          "bin-Values can be `true` or `false`."
        ],
        "shortDesc": "disableDiscovery"
      },
      "setOnOpen": {
        "desc": "Adds a callback function when the drawer is opened\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          ""
        ],
        "shortDesc": "setOnOpen"
      },
      "setOnClose": {
        "desc": "Adds a callback function when the drawer is closed\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          ""
        ],
        "shortDesc": "setOnClose"
      },
      "show": {
        "desc": "Open the drawer dynamically\n\n",
        "pNames": [
          "anchor"
        ],
        "pTypes": [
          "str-Open position. Can be `left` or `right`. Default is `left`"
        ],
        "shortDesc": "show"
      },
      "hide": {
        "desc": "Close the drawer dynamically\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "hide"
      }
    }
  },
  "addDropdown": {
    "abbrev": "dpd",
    "desc": "#addDropdown.md",
    "pNames": [
      "parent",
      "list",
      "options",
      "width",
      "height"
    ],
    "pTypes": [
      "obj-The layout where to add the dropdown.",
      "lst-The list items to show.",
      "str-A comma separated Dropdown options. Can be \\n Colors: `Primary` `Secondary` `Default` \\n Variants: `Contained` `Outlined` `Text` \\n Sizes: `Small` `Medium` `Large` \\n Orientation: `Horizontal` `Vertical` \\n Util: `NoElevation`",
      "num-Fraction of the screen width. [0-1]",
      "num-Fraction of the screen height. [0-1]"
    ],
    "retval": "obj-Dropdown Component.",
    "shortDesc": "addDropdown",
    "subf": {
      "setOnChange": {
        "desc": "Adds a callback function on change event\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "The ",
              "index "
            ],
            "pTypes": [
              "obj-item text.",
              "num-The index of the corresponding item."
            ]
          }
        ],
        "shortDesc": "setOnChange"
      },
      "setOnClose": {
        "desc": "Adds a callback function on close event\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          ""
        ],
        "shortDesc": "setOnClose"
      },
      "setList": {
        "desc": "Sets the list items on the dropdown\n\n",
        "pNames": [
          "val"
        ],
        "pTypes": [
          "lst-The list of new items t display."
        ],
        "shortDesc": "setList"
      },
      "setItemByIndex": {
        "desc": "Updates the text of the corresponding item in the dropdown\n\n",
        "pNames": [
          "item",
          "index"
        ],
        "pTypes": [
          "str-The new item text.",
          "num-The index of the item to update."
        ],
        "shortDesc": "setItemByIndex"
      },
      "getItemByIndex": {
        "desc": "Returns a dropdown item by its corresponding index\n\n",
        "pNames": [
          "index"
        ],
        "pTypes": [
          "num-The index of corresponding item."
        ],
        "shortDesc": "getItemByIndex",
        "retval": "str"
      },
      "setEnabled": {
        "desc": "Enable or disable an item in the dropdown\n\n",
        "pNames": [
          "index",
          "value"
        ],
        "pTypes": [
          "num-The index of the item.",
          "bin-Values can be `true` `false`."
        ],
        "shortDesc": "setEnabled"
      },
      "getEnabled": {
        "desc": "Get the enabled state of an item in the dropdown menu\n\n",
        "pNames": [
          "index"
        ],
        "pTypes": [
          "num-The index of the item."
        ],
        "shortDesc": "getEnabled",
        "retval": "bin"
      },
      "setEnabledByName": {
        "desc": "Enable or disable an item in the dropdown\n\n",
        "pNames": [
          "name",
          "value"
        ],
        "pTypes": [
          "str-The name of the item.",
          "bin-Values can be `true` `false`."
        ],
        "shortDesc": "setEnabledByName"
      },
      "getEnabledByName": {
        "desc": "Get the enabled state of a menu item by its name\n\n",
        "pNames": [
          "name"
        ],
        "pTypes": [
          "str-The name of the corresponding menu item."
        ],
        "shortDesc": "getEnabledByName",
        "retval": "bin"
      },
      "addItem": {
        "desc": "Add or insert a menu item in the dropdown list\n\n",
        "pNames": [
          "name",
          "index"
        ],
        "pTypes": [
          "str-The name of the menu.",
          "num-The index in which to insert the menu item."
        ],
        "shortDesc": "addItem"
      },
      "removeItemByIndex": {
        "desc": "Removes a menu item in the dropdown by its index\n\n",
        "pNames": [
          "index"
        ],
        "pTypes": [
          "num-The index of the menu item to remove."
        ],
        "shortDesc": "removeItemByIndex"
      },
      "removeItemByName": {
        "desc": "Removes a menu item in the dropdown by its name\n\n",
        "pNames": [
          "name"
        ],
        "pTypes": [
          "str-The name of the menu item."
        ],
        "shortDesc": "removeItemByName"
      },
      "shiftItem": {
        "desc": "Removes the first item in the dropdown menu\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "shiftItem"
      },
      "popItem": {
        "desc": "Removes the last item in the dropdown menu\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "popItem"
      },
      "setCornerRadius": {
        "desc": "Sets the corner radius of the dropdown\n\n",
        "pNames": [
          "tl",
          "tr",
          "bl",
          "br",
          "mode"
        ],
        "pTypes": [
          "num-Top-left corner radius.",
          "num-Top-right corner radius.",
          "num-Bottom-left corner radius.",
          "num-Bottom-right corner radius.",
          "str-Unit. Values are `px` `rem` or `%`."
        ],
        "shortDesc": "setCornerRadius"
      },
      "setOnTouch": {
        "desc": "Adds a callback handler when the component is touch\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "event "
            ],
            "pTypes": [
              "obj-The click event object."
            ]
          }
        ],
        "shortDesc": "setOnTouch"
      },
      "setOnContextMenu": {
        "desc": "Adds a callback function on right click\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "event "
            ],
            "pTypes": [
              "obj-The pointer event object."
            ]
          }
        ],
        "shortDesc": "setOnContextMenu"
      },
      "animate": {
        "desc": "Animate the component\n\n",
        "pNames": [
          "anim",
          "duration"
        ],
        "pTypes": [
          "str-The type of animation. Here are the available values `bounce` `flash` `pulse` `rubberBand` `shakeX` `shakeY` `headShake` `swing` `tada` `wobble` `jello` `heartBeat` \\n Back Entrances `backInDown` `backInLeft` `backInRight` `backInUp` \\n Back Exits `backOutDown` `backOutLeft` `backOutRight` `backOutUp` \\n Bouncing Entrances `bounceIn` `bounceInDown` `bounceInLeft` `bounceInRight` `bounceInUp` \\n Bouncing exits `bounceOut` `bounceOutDown` `bounceOutLeft` `bounceOutRight` `bounceOutUp` \\n Fading entrances `fadeIn` `fadeInDown` `fadeInDownBig` `fadeInLeft` `fadeInLeftBig` `fadeInRight` `fadeInRightBig` `fadeInUp` `fadeInUpBig` `fadeInTopLeft` `fadeInTopRight` `fadeInBottomLeft` `fadeInBottomRight` \\n Fading exits `fadeOut` `fadeOutDown` `fadeOutDownBig` `fadeOutLeft` `fadeOutLeftBig` `fadeOutRight` `fadeOutRightBig` `fadeOutUp` `fadeOutUpBig` `fadeOutTopLeft` `fadeOutTopRight` `fadeOutBottomRight` `fadeOutBottomLeft` \\n Flippers `flip` `flipInX` `flipInY` `flipOutX` `flipOutY` \\n Lightspeed `lightSpeedInRight` `lightSpeedInLeft` `lightSpeedOutRight` `lightSpeedOutLeft` \\n Rotating Entrances `rotateIn` `rotateInDownLeft` `rotateInDownRight` `rotateInUpLeft` `rotateInUpRight` \\n Rotating Exits `rotateOut` `rotateOutDownLeft` `rotateOutDownRight` `rotateOutUpLeft` `rotateOutUpRight` \\n Specials `hinge` `jackInTheBox` `rollIn` `rollOut` \\n Zooming Entrances `zoomIn` `zoomInDown` `zoomInLeft` `zoomInRight` `zoomInUp` \\n Zooming Exits `zoomOut` `zoomOutDown` `zoomOutLeft` `zoomOutRight` `zoomOutUp` \\n Sliding Entrances `slideInDown` `slideInLeft` `slideInRight` `slideInUp` \\n Sliding Exits `slideOutDown` `slideOutLeft` `slideOutRight` `slideOutUp`.",
          "num-The time in milliseconds."
        ],
        "shortDesc": "animate"
      },
      "setSize": {
        "desc": "Sets the size of the component\n\n",
        "pNames": [
          "width",
          "height"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the parent height. [0-1]"
        ],
        "shortDesc": "setSize"
      },
      "show": {
        "desc": "Show the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "show"
      },
      "hide": {
        "desc": "Hide the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "hide"
      },
      "gone": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "gone"
      },
      "destroy": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "destroy"
      },
      "setScale": {
        "desc": "Sets the x and y scaling of the component\n\n",
        "pNames": [
          "x",
          "y"
        ],
        "pTypes": [
          "num-The x-scale of the component.Values less than `0` is smaller than the normal. While values greater than `1` is greater than the normal.",
          "num-The y-scale of the component. Values less than `1` is smaller than the normal. While vaues greater than `1` is greater than the normal."
        ],
        "shortDesc": "setScale"
      },
      "getPosition": {
        "desc": "Returns the position of the component. The return object is of the form `{ left, top, right, bottom\n\n",
        "pNames": [
          "options"
        ],
        "pTypes": [
          "str-The mode of the measurements. Values can be `px` or `%`"
        ],
        "shortDesc": "getPosition",
        "retval": "obj"
      },
      "setMargins": {
        "desc": "Sets the margin of the component\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "str-`px` or `%`"
        ],
        "shortDesc": "setMargins"
      },
      "setPadding": {
        "desc": "Sets the padding component container\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the component width.",
          "num-Fraction of the component height. [0-1]",
          "num-Fraction of the component width. [0-1]",
          "num-Fraction of the component height. [0-1]",
          "str-The size thickness mode. Can be `px`"
        ],
        "shortDesc": "setPadding"
      },
      "setPosition": {
        "desc": "Sets the position of the component relative to its parent dimensions\n\n",
        "pNames": [
          "left",
          "top",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the screen height. [0-1]",
          "str-Unit of measurement. Can be `px` or `%` or any css unit of measurement."
        ],
        "shortDesc": "setPosition"
      },
      "setBorder": {
        "desc": "Sets the border line for the component container\n\n",
        "pNames": [
          "width",
          "clr",
          "style"
        ],
        "pTypes": [
          "num-Border-left thickness in pixels.",
          "str-Border color in hexadecimal form `#rrggbb`",
          "str-Border-styles. Values can be `dotted` `dashed` `solid` `double` `groove` `ridge` `inset` and `outset`. Default is `solid`"
        ],
        "shortDesc": "setBorder"
      },
      "bringForward": {
        "desc": "Bring this component forward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A negative value behaves like `sendBackward` method."
        ],
        "shortDesc": "bringForward"
      },
      "sendBackward": {
        "desc": "Bring this component backward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A positve value behaves like `bringForward` method."
        ],
        "shortDesc": "sendBackward"
      }
    }
  },
  "addFAB": {
    "abbrev": "fab",
    "desc": "#addFAB.md",
    "pNames": [
      "parent",
      "icon",
      "options",
      "text"
    ],
    "pTypes": [
      "obj-The parent layout where to add the fab",
      "str-The string icon of the FAB",
      "str-A comma separated option for the layout. Can be `Fixed` `Static` `Rounded` `Extended` `Left` `Right`",
      "str-Text to show for extended FABs."
    ],
    "retval": "obj-FAB Component",
    "shortDesc": "addFAB",
    "subf": {
      "setCornerRadius": {
        "desc": "Sets the corner radius of the button\n\n",
        "pNames": [
          "tl",
          "tr",
          "bl",
          "br",
          "mode"
        ],
        "pTypes": [
          "num-Top-left corner radius.",
          "num-Top-right corner radius.",
          "num-Bottom-left corner radius.",
          "num-Bottom-right corner radius.",
          "str-Unit. Values are `px` `rem` or `%`."
        ],
        "shortDesc": "setCornerRadius"
      },
      "setOnTouch": {
        "desc": "Adds a callback handler when the component is touch\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "event "
            ],
            "pTypes": [
              "obj-The click event object."
            ]
          }
        ],
        "shortDesc": "setOnTouch"
      },
      "setOnContextMenu": {
        "desc": "Adds a callback function on right click\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "event "
            ],
            "pTypes": [
              "obj-The pointer event object."
            ]
          }
        ],
        "shortDesc": "setOnContextMenu"
      },
      "animate": {
        "desc": "Animate the component\n\n",
        "pNames": [
          "anim",
          "duration"
        ],
        "pTypes": [
          "str-The type of animation. Here are the available values `bounce` `flash` `pulse` `rubberBand` `shakeX` `shakeY` `headShake` `swing` `tada` `wobble` `jello` `heartBeat` \\n Back Entrances `backInDown` `backInLeft` `backInRight` `backInUp` \\n Back Exits `backOutDown` `backOutLeft` `backOutRight` `backOutUp` \\n Bouncing Entrances `bounceIn` `bounceInDown` `bounceInLeft` `bounceInRight` `bounceInUp` \\n Bouncing exits `bounceOut` `bounceOutDown` `bounceOutLeft` `bounceOutRight` `bounceOutUp` \\n Fading entrances `fadeIn` `fadeInDown` `fadeInDownBig` `fadeInLeft` `fadeInLeftBig` `fadeInRight` `fadeInRightBig` `fadeInUp` `fadeInUpBig` `fadeInTopLeft` `fadeInTopRight` `fadeInBottomLeft` `fadeInBottomRight` \\n Fading exits `fadeOut` `fadeOutDown` `fadeOutDownBig` `fadeOutLeft` `fadeOutLeftBig` `fadeOutRight` `fadeOutRightBig` `fadeOutUp` `fadeOutUpBig` `fadeOutTopLeft` `fadeOutTopRight` `fadeOutBottomRight` `fadeOutBottomLeft` \\n Flippers `flip` `flipInX` `flipInY` `flipOutX` `flipOutY` \\n Lightspeed `lightSpeedInRight` `lightSpeedInLeft` `lightSpeedOutRight` `lightSpeedOutLeft` \\n Rotating Entrances `rotateIn` `rotateInDownLeft` `rotateInDownRight` `rotateInUpLeft` `rotateInUpRight` \\n Rotating Exits `rotateOut` `rotateOutDownLeft` `rotateOutDownRight` `rotateOutUpLeft` `rotateOutUpRight` \\n Specials `hinge` `jackInTheBox` `rollIn` `rollOut` \\n Zooming Entrances `zoomIn` `zoomInDown` `zoomInLeft` `zoomInRight` `zoomInUp` \\n Zooming Exits `zoomOut` `zoomOutDown` `zoomOutLeft` `zoomOutRight` `zoomOutUp` \\n Sliding Entrances `slideInDown` `slideInLeft` `slideInRight` `slideInUp` \\n Sliding Exits `slideOutDown` `slideOutLeft` `slideOutRight` `slideOutUp`.",
          "num-The time in milliseconds."
        ],
        "shortDesc": "animate"
      },
      "setSize": {
        "desc": "Sets the size of the component\n\n",
        "pNames": [
          "width",
          "height"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the parent height. [0-1]"
        ],
        "shortDesc": "setSize"
      },
      "show": {
        "desc": "Show the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "show"
      },
      "hide": {
        "desc": "Hide the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "hide"
      },
      "gone": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "gone"
      },
      "destroy": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "destroy"
      },
      "setScale": {
        "desc": "Sets the x and y scaling of the component\n\n",
        "pNames": [
          "x",
          "y"
        ],
        "pTypes": [
          "num-The x-scale of the component.Values less than `0` is smaller than the normal. While values greater than `1` is greater than the normal.",
          "num-The y-scale of the component. Values less than `1` is smaller than the normal. While vaues greater than `1` is greater than the normal."
        ],
        "shortDesc": "setScale"
      },
      "getPosition": {
        "desc": "Returns the position of the component. The return object is of the form `{ left, top, right, bottom\n\n",
        "pNames": [
          "options"
        ],
        "pTypes": [
          "str-The mode of the measurements. Values can be `px` or `%`"
        ],
        "shortDesc": "getPosition",
        "retval": "obj"
      },
      "setMargins": {
        "desc": "Sets the margin of the component\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "str-`px` or `%`"
        ],
        "shortDesc": "setMargins"
      },
      "setPadding": {
        "desc": "Sets the padding component container\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the component width.",
          "num-Fraction of the component height. [0-1]",
          "num-Fraction of the component width. [0-1]",
          "num-Fraction of the component height. [0-1]",
          "str-The size thickness mode. Can be `px`"
        ],
        "shortDesc": "setPadding"
      },
      "setPosition": {
        "desc": "Sets the position of the component relative to its parent dimensions\n\n",
        "pNames": [
          "left",
          "top",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the screen height. [0-1]",
          "str-Unit of measurement. Can be `px` or `%` or any css unit of measurement."
        ],
        "shortDesc": "setPosition"
      },
      "setBorder": {
        "desc": "Sets the border line for the component container\n\n",
        "pNames": [
          "width",
          "clr",
          "style"
        ],
        "pTypes": [
          "num-Border-left thickness in pixels.",
          "str-Border color in hexadecimal form `#rrggbb`",
          "str-Border-styles. Values can be `dotted` `dashed` `solid` `double` `groove` `ridge` `inset` and `outset`. Default is `solid`"
        ],
        "shortDesc": "setBorder"
      },
      "bringForward": {
        "desc": "Bring this component forward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A negative value behaves like `sendBackward` method."
        ],
        "shortDesc": "bringForward"
      },
      "sendBackward": {
        "desc": "Bring this component backward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A positve value behaves like `bringForward` method."
        ],
        "shortDesc": "sendBackward"
      }
    }
  },
  "addImage": {
    "abbrev": "img",
    "desc": "#addImage.md",
    "pNames": [
      "parent",
      "file",
      "options",
      "width",
      "height"
    ],
    "pTypes": [
      "obj-The parent layout where to add the image.",
      "str-The path to the image.",
      "str-A comma seprated options for the image. Can be `Canvas` `Button` or `Avatar`",
      "num-Fraction of the screen width.",
      "num-Fraction of the screen height."
    ],
    "retval": "obj-Image Component.",
    "shortDesc": "addImage",
    "subf": {
      "setOnLoad": {
        "desc": "Sets a callback function on load event\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          ""
        ],
        "shortDesc": "setOnLoad"
      },
      "enableContextMenu": {
        "desc": "Enable or disbale the context menu or the right click menus\n\n",
        "pNames": [
          "value"
        ],
        "pTypes": [
          "bin-Value. Can be `true` `false`"
        ],
        "shortDesc": "enableContextMenu"
      },
      "setImage": {
        "desc": "Update the image file\n\n",
        "pNames": [
          "file"
        ],
        "pTypes": [
          "str-The path to the image file."
        ],
        "shortDesc": "setImage"
      },
      "getPixelColor": {
        "desc": "Get the pixel color of a single pixel in the image\n\n",
        "pNames": [
          "x",
          "y"
        ],
        "pTypes": [
          "num-The x-coordinate of the pixel from the left.",
          "num-The y-coordinate of the pixel from the top."
        ],
        "shortDesc": "getPixelColor",
        "retval": "lst"
      },
      "getPixelData": {
        "desc": "Returns the pixel data of the image\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "getPixelData",
        "retval": "str"
      },
      "drawLine": {
        "desc": "Draws a line between two points in the canvas\n\n",
        "pNames": [
          "x1",
          "y1",
          "x2",
          "y2",
          "strokeColor",
          "strokeWidth"
        ],
        "pTypes": [
          "num-The x-coordinate of the starting point in pixels.",
          "num-The y-coordinate of the starting point in pixels",
          "num-The x-coordinate of the second point in pixels.",
          "num-The y-coordinate of the second point in pixels.",
          "str-A hexadecimal color.",
          "num-The stroke thickness."
        ],
        "shortDesc": "drawLine"
      },
      "drawCircle": {
        "desc": "Draws a circle in the canvas\n\n",
        "pNames": [
          "x",
          "y",
          "radius",
          "fillColor",
          "strokeColor",
          "strokeWidth"
        ],
        "pTypes": [
          "num-The x-coordinate of the center of the circle in pixels.",
          "num-The y-coordinate of the center of the circle in pixels.",
          "num-The radius of the circle in pixels.",
          "str-A hexadecimal color.",
          "str-A hexadecimal color.",
          "num-The stoke thickness."
        ],
        "shortDesc": "drawCircle"
      },
      "drawSquare": {
        "desc": "Draws a square into the canvas\n\n",
        "pNames": [
          "x",
          "y",
          "width",
          "fillColor",
          "strokeColor",
          "strokeWidth"
        ],
        "pTypes": [
          "num-The position from the left of the top-left corner of the square in pixels.",
          "num-The distance from the top of the top-left corner of the square in pixels.",
          "num-The width of the square in pixels.",
          "str-A hexadecimal color.",
          "str-A hexadecimal color.",
          "num-The stroke thickness in pixels."
        ],
        "shortDesc": "drawSquare"
      },
      "drawRectangle": {
        "desc": "Draws a rectangle into the canvas\n\n",
        "pNames": [
          "x1",
          "y1",
          "width",
          "height",
          "fillColor",
          "strokeColor",
          "strokeWidth"
        ],
        "pTypes": [
          "num-The distance from the left of the top-left corner of the rectangle in pixels.",
          "num-The distance from the top of the top-left corner of the rectangle in pixels.",
          "num-The width of the rectangle in pixels.",
          "num-The height of the rectangle in pixels.",
          "str-A hexadecimal color.",
          "str-A hexadecimal color.",
          "num-The stroke thickness."
        ],
        "shortDesc": "drawRectangle"
      },
      "drawArc": {
        "desc": "Draws an arc in the canvas\n\n",
        "pNames": [
          "x",
          "y",
          "radius",
          "start",
          "end",
          "fillColor",
          "strokeColor",
          "strokeWidth"
        ],
        "pTypes": [
          "num-The x-coordinate of the center of the arc in pixels.",
          "num-The y-coordinate of the center of the arc in pixels.",
          "num-The radius of the arc in pixels.",
          "num-The starting angle in degress",
          "num-The angle in degress in which the arc will stop.",
          "str-A hexadecimal color.",
          "str-A hexadecimal color.",
          "num-The stroke thickness."
        ],
        "shortDesc": "drawArc"
      },
      "drawImage": {
        "desc": "Draws an image to the canvas\n\n",
        "pNames": [
          "img",
          "x",
          "y",
          "width",
          "height"
        ],
        "pTypes": [
          "str-Path to image file.",
          "num-The distance from the left of the top-left corner of the image in pixels.",
          "num-The distance from the top of the top-left corner of the image in pixels.",
          "num-If provided, the image will be shrink or stretch to fill this width in pixels.",
          "num-If provided, the height of the image will be shrink or stretch to fill this height in pixels."
        ],
        "shortDesc": "drawImage"
      },
      "clear": {
        "desc": "Clears the drawings by filling the whole canvas with white background color\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "clear"
      },
      "drawPolyline": {
        "desc": "Draws a polyline on the canvas by passing an array of points\n\n",
        "pNames": [
          "points",
          "strokeColor",
          "strokeWidth"
        ],
        "pTypes": [
          "lst-An array of coordinates. Each element on this array if an array of the form `[x, y]` where `x` is the x-coordinate of a point and `y` is the y-coordinate of a point.",
          "str-A hexadecimal color.",
          "num-The stroke thickness."
        ],
        "shortDesc": "drawPolyline"
      },
      "drawPolygon": {
        "desc": "Draws a polygon on the canvas by passing an array of points\n\n",
        "pNames": [
          "points",
          "fillColor",
          "strokeColor",
          "strokeWidth"
        ],
        "pTypes": [
          "lst-An array of coordinates. Each element on this array if an array of the form `[x, y]` where `x` is the x-coordinate of a point and `y` is the y-coordinate of a point.",
          "str-A hexadecimal color.",
          "str-A hexadecimal color.",
          "num-The stroke thickness."
        ],
        "shortDesc": "drawPolygon"
      },
      "drawPoint": {
        "desc": "Draws a single pixel point in a specified coordinate\n\n",
        "pNames": [
          "x",
          "y",
          "color"
        ],
        "pTypes": [
          "num-The x-coordinate in pixels.",
          "num-The y-coordinate in pixels.",
          "str-A hexadecimal color."
        ],
        "shortDesc": "drawPoint"
      },
      "setOnTouchMove": {
        "desc": "Sets a callback function when the a mouse move event is triggered\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          ""
        ],
        "shortDesc": "setOnTouchMove"
      },
      "setOnTouch": {
        "desc": "Adds a callback handler when the component is touch\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "event "
            ],
            "pTypes": [
              "obj-The click event object."
            ]
          }
        ],
        "shortDesc": "setOnTouch"
      },
      "setOnContextMenu": {
        "desc": "Adds a callback function on right click\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "event "
            ],
            "pTypes": [
              "obj-The pointer event object."
            ]
          }
        ],
        "shortDesc": "setOnContextMenu"
      },
      "animate": {
        "desc": "Animate the component\n\n",
        "pNames": [
          "anim",
          "duration"
        ],
        "pTypes": [
          "str-The type of animation. Here are the available values `bounce` `flash` `pulse` `rubberBand` `shakeX` `shakeY` `headShake` `swing` `tada` `wobble` `jello` `heartBeat` \\n Back Entrances `backInDown` `backInLeft` `backInRight` `backInUp` \\n Back Exits `backOutDown` `backOutLeft` `backOutRight` `backOutUp` \\n Bouncing Entrances `bounceIn` `bounceInDown` `bounceInLeft` `bounceInRight` `bounceInUp` \\n Bouncing exits `bounceOut` `bounceOutDown` `bounceOutLeft` `bounceOutRight` `bounceOutUp` \\n Fading entrances `fadeIn` `fadeInDown` `fadeInDownBig` `fadeInLeft` `fadeInLeftBig` `fadeInRight` `fadeInRightBig` `fadeInUp` `fadeInUpBig` `fadeInTopLeft` `fadeInTopRight` `fadeInBottomLeft` `fadeInBottomRight` \\n Fading exits `fadeOut` `fadeOutDown` `fadeOutDownBig` `fadeOutLeft` `fadeOutLeftBig` `fadeOutRight` `fadeOutRightBig` `fadeOutUp` `fadeOutUpBig` `fadeOutTopLeft` `fadeOutTopRight` `fadeOutBottomRight` `fadeOutBottomLeft` \\n Flippers `flip` `flipInX` `flipInY` `flipOutX` `flipOutY` \\n Lightspeed `lightSpeedInRight` `lightSpeedInLeft` `lightSpeedOutRight` `lightSpeedOutLeft` \\n Rotating Entrances `rotateIn` `rotateInDownLeft` `rotateInDownRight` `rotateInUpLeft` `rotateInUpRight` \\n Rotating Exits `rotateOut` `rotateOutDownLeft` `rotateOutDownRight` `rotateOutUpLeft` `rotateOutUpRight` \\n Specials `hinge` `jackInTheBox` `rollIn` `rollOut` \\n Zooming Entrances `zoomIn` `zoomInDown` `zoomInLeft` `zoomInRight` `zoomInUp` \\n Zooming Exits `zoomOut` `zoomOutDown` `zoomOutLeft` `zoomOutRight` `zoomOutUp` \\n Sliding Entrances `slideInDown` `slideInLeft` `slideInRight` `slideInUp` \\n Sliding Exits `slideOutDown` `slideOutLeft` `slideOutRight` `slideOutUp`.",
          "num-The time in milliseconds."
        ],
        "shortDesc": "animate"
      },
      "setSize": {
        "desc": "Sets the size of the component\n\n",
        "pNames": [
          "width",
          "height"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the parent height. [0-1]"
        ],
        "shortDesc": "setSize"
      },
      "show": {
        "desc": "Show the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "show"
      },
      "hide": {
        "desc": "Hide the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "hide"
      },
      "gone": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "gone"
      },
      "destroy": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "destroy"
      },
      "setScale": {
        "desc": "Sets the x and y scaling of the component\n\n",
        "pNames": [
          "x",
          "y"
        ],
        "pTypes": [
          "num-The x-scale of the component.Values less than `0` is smaller than the normal. While values greater than `1` is greater than the normal.",
          "num-The y-scale of the component. Values less than `1` is smaller than the normal. While vaues greater than `1` is greater than the normal."
        ],
        "shortDesc": "setScale"
      },
      "getPosition": {
        "desc": "Returns the position of the component. The return object is of the form `{ left, top, right, bottom\n\n",
        "pNames": [
          "options"
        ],
        "pTypes": [
          "str-The mode of the measurements. Values can be `px` or `%`"
        ],
        "shortDesc": "getPosition",
        "retval": "obj"
      },
      "setMargins": {
        "desc": "Sets the margin of the component\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "str-`px` or `%`"
        ],
        "shortDesc": "setMargins"
      },
      "setPadding": {
        "desc": "Sets the padding component container\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the component width.",
          "num-Fraction of the component height. [0-1]",
          "num-Fraction of the component width. [0-1]",
          "num-Fraction of the component height. [0-1]",
          "str-The size thickness mode. Can be `px`"
        ],
        "shortDesc": "setPadding"
      },
      "setPosition": {
        "desc": "Sets the position of the component relative to its parent dimensions\n\n",
        "pNames": [
          "left",
          "top",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the screen height. [0-1]",
          "str-Unit of measurement. Can be `px` or `%` or any css unit of measurement."
        ],
        "shortDesc": "setPosition"
      },
      "setBorder": {
        "desc": "Sets the border line for the component container\n\n",
        "pNames": [
          "width",
          "clr",
          "style"
        ],
        "pTypes": [
          "num-Border-left thickness in pixels.",
          "str-Border color in hexadecimal form `#rrggbb`",
          "str-Border-styles. Values can be `dotted` `dashed` `solid` `double` `groove` `ridge` `inset` and `outset`. Default is `solid`"
        ],
        "shortDesc": "setBorder"
      },
      "setCornerRadius": {
        "desc": "Sets the corner radius of the component\n\n",
        "pNames": [
          "tl",
          "tr",
          "bl",
          "br",
          "mode"
        ],
        "pTypes": [
          "num-Top-Left border radius in pixels.",
          "num-Top-Right border radius in pixels.",
          "num-Bottom-Left border radius in pixels.",
          "num-Bottom-Right border radius in pixels.",
          "str-Unit. Values are `px` `rem` or `%`."
        ],
        "shortDesc": "setCornerRadius"
      },
      "bringForward": {
        "desc": "Bring this component forward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A negative value behaves like `sendBackward` method."
        ],
        "shortDesc": "bringForward"
      },
      "sendBackward": {
        "desc": "Bring this component backward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A positve value behaves like `bringForward` method."
        ],
        "shortDesc": "sendBackward"
      }
    }
  },
  "addLayout": {
    "abbrev": "lay",
    "desc": "#addLayout.md",
    "pNames": [
      "parent",
      "type",
      "options",
      "width",
      "height"
    ],
    "pTypes": [
      "obj-The parent layout where to add this component. Pass a string `main` for the main layout of your app.",
      "str-The layout type. Values can be `Linear` `Absolute` `Frame` `Slide`",
      "str-Layout options. Values can be \\n Orientation:  `Horizontal` `Vertical` \\n Horizontal Alignment: `Left` `Center` `Right` \\n Vertical Alignment: `Top` `VCenter` `Bottom` \\n Dimensions: `FillX` `FillY` \\n Scroll: `ScrollX` `ScrollY` `ScrollXY` `NoScrollBar` \\n Utils: `BackColor` to apply light or dark background rather than transparent.",
      "num-Fraction of the screen width. [0-1]",
      "obj-Fraction of the screen height. [0-1]"
    ],
    "retval": "obj-Layout Component",
    "shortDesc": "addLayout",
    "subf": {
      "setChildMargins": {
        "desc": "Sets a default margins for the children of the layout component\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Left margin.",
          "num-Top margin.",
          "num-Right margin.",
          "num-Bottom margin.",
          "str-Can be `px`. Default is a fraction of viewport."
        ],
        "shortDesc": "setChildMargins"
      },
      "show": {
        "desc": "Makes the layout visible\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "show"
      },
      "goto": {
        "desc": "Transition to the given index\n\n",
        "pNames": [
          "index"
        ],
        "pTypes": [
          "num-Index of a given layout."
        ],
        "shortDesc": "goto"
      },
      "getCurrentSlide": {
        "desc": "Returns the index of the current Slide Layout\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "getCurrentSlide",
        "retval": "num"
      },
      "next": {
        "desc": "Transition to the next slide\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "next"
      },
      "previous": {
        "desc": "Transition to the previous slide\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "previous"
      },
      "getChildOrder": {
        "desc": "Returns the index of the child from the layout children stack in order\n\n",
        "pNames": [
          "child"
        ],
        "pTypes": [
          "obj-The child component of the layout."
        ],
        "shortDesc": "getChildOrder",
        "retval": "num"
      },
      "childToFront": {
        "desc": "Move the child to the front\n\n",
        "pNames": [
          "child"
        ],
        "pTypes": [
          "obj-The child object of the layout."
        ],
        "shortDesc": "childToFront"
      },
      "hasChild": {
        "desc": "Check whether a component is a child of this layout\n\n",
        "pNames": [
          "child"
        ],
        "pTypes": [
          "obj-The child component to check."
        ],
        "shortDesc": "hasChild",
        "retval": "bin"
      },
      "removeChild": {
        "desc": "Removes a child from this layout\n\n",
        "pNames": [
          "child"
        ],
        "pTypes": [
          "obj-The child component to be remove."
        ],
        "shortDesc": "removeChild"
      },
      "setOnTouch": {
        "desc": "Adds a callback handler when the component is touch\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "event "
            ],
            "pTypes": [
              "obj-The click event object."
            ]
          }
        ],
        "shortDesc": "setOnTouch"
      },
      "setOnContextMenu": {
        "desc": "Adds a callback function on right click\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "event "
            ],
            "pTypes": [
              "obj-The pointer event object."
            ]
          }
        ],
        "shortDesc": "setOnContextMenu"
      },
      "animate": {
        "desc": "Animate the component\n\n",
        "pNames": [
          "anim",
          "duration"
        ],
        "pTypes": [
          "str-The type of animation. Here are the available values `bounce` `flash` `pulse` `rubberBand` `shakeX` `shakeY` `headShake` `swing` `tada` `wobble` `jello` `heartBeat` \\n Back Entrances `backInDown` `backInLeft` `backInRight` `backInUp` \\n Back Exits `backOutDown` `backOutLeft` `backOutRight` `backOutUp` \\n Bouncing Entrances `bounceIn` `bounceInDown` `bounceInLeft` `bounceInRight` `bounceInUp` \\n Bouncing exits `bounceOut` `bounceOutDown` `bounceOutLeft` `bounceOutRight` `bounceOutUp` \\n Fading entrances `fadeIn` `fadeInDown` `fadeInDownBig` `fadeInLeft` `fadeInLeftBig` `fadeInRight` `fadeInRightBig` `fadeInUp` `fadeInUpBig` `fadeInTopLeft` `fadeInTopRight` `fadeInBottomLeft` `fadeInBottomRight` \\n Fading exits `fadeOut` `fadeOutDown` `fadeOutDownBig` `fadeOutLeft` `fadeOutLeftBig` `fadeOutRight` `fadeOutRightBig` `fadeOutUp` `fadeOutUpBig` `fadeOutTopLeft` `fadeOutTopRight` `fadeOutBottomRight` `fadeOutBottomLeft` \\n Flippers `flip` `flipInX` `flipInY` `flipOutX` `flipOutY` \\n Lightspeed `lightSpeedInRight` `lightSpeedInLeft` `lightSpeedOutRight` `lightSpeedOutLeft` \\n Rotating Entrances `rotateIn` `rotateInDownLeft` `rotateInDownRight` `rotateInUpLeft` `rotateInUpRight` \\n Rotating Exits `rotateOut` `rotateOutDownLeft` `rotateOutDownRight` `rotateOutUpLeft` `rotateOutUpRight` \\n Specials `hinge` `jackInTheBox` `rollIn` `rollOut` \\n Zooming Entrances `zoomIn` `zoomInDown` `zoomInLeft` `zoomInRight` `zoomInUp` \\n Zooming Exits `zoomOut` `zoomOutDown` `zoomOutLeft` `zoomOutRight` `zoomOutUp` \\n Sliding Entrances `slideInDown` `slideInLeft` `slideInRight` `slideInUp` \\n Sliding Exits `slideOutDown` `slideOutLeft` `slideOutRight` `slideOutUp`.",
          "num-The time in milliseconds."
        ],
        "shortDesc": "animate"
      },
      "setSize": {
        "desc": "Sets the size of the component\n\n",
        "pNames": [
          "width",
          "height"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the parent height. [0-1]"
        ],
        "shortDesc": "setSize"
      },
      "hide": {
        "desc": "Hide the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "hide"
      },
      "gone": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "gone"
      },
      "destroy": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "destroy"
      },
      "setScale": {
        "desc": "Sets the x and y scaling of the component\n\n",
        "pNames": [
          "x",
          "y"
        ],
        "pTypes": [
          "num-The x-scale of the component.Values less than `0` is smaller than the normal. While values greater than `1` is greater than the normal.",
          "num-The y-scale of the component. Values less than `1` is smaller than the normal. While vaues greater than `1` is greater than the normal."
        ],
        "shortDesc": "setScale"
      },
      "getPosition": {
        "desc": "Returns the position of the component. The return object is of the form `{ left, top, right, bottom\n\n",
        "pNames": [
          "options"
        ],
        "pTypes": [
          "str-The mode of the measurements. Values can be `px` or `%`"
        ],
        "shortDesc": "getPosition",
        "retval": "obj"
      },
      "setMargins": {
        "desc": "Sets the margin of the component\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "str-`px` or `%`"
        ],
        "shortDesc": "setMargins"
      },
      "setPadding": {
        "desc": "Sets the padding component container\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the component width.",
          "num-Fraction of the component height. [0-1]",
          "num-Fraction of the component width. [0-1]",
          "num-Fraction of the component height. [0-1]",
          "str-The size thickness mode. Can be `px`"
        ],
        "shortDesc": "setPadding"
      },
      "setPosition": {
        "desc": "Sets the position of the component relative to its parent dimensions\n\n",
        "pNames": [
          "left",
          "top",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the screen height. [0-1]",
          "str-Unit of measurement. Can be `px` or `%` or any css unit of measurement."
        ],
        "shortDesc": "setPosition"
      },
      "setBorder": {
        "desc": "Sets the border line for the component container\n\n",
        "pNames": [
          "width",
          "clr",
          "style"
        ],
        "pTypes": [
          "num-Border-left thickness in pixels.",
          "str-Border color in hexadecimal form `#rrggbb`",
          "str-Border-styles. Values can be `dotted` `dashed` `solid` `double` `groove` `ridge` `inset` and `outset`. Default is `solid`"
        ],
        "shortDesc": "setBorder"
      },
      "setCornerRadius": {
        "desc": "Sets the corner radius of the component\n\n",
        "pNames": [
          "tl",
          "tr",
          "bl",
          "br",
          "mode"
        ],
        "pTypes": [
          "num-Top-Left border radius in pixels.",
          "num-Top-Right border radius in pixels.",
          "num-Bottom-Left border radius in pixels.",
          "num-Bottom-Right border radius in pixels.",
          "str-Unit. Values are `px` `rem` or `%`."
        ],
        "shortDesc": "setCornerRadius"
      },
      "bringForward": {
        "desc": "Bring this component forward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A negative value behaves like `sendBackward` method."
        ],
        "shortDesc": "bringForward"
      },
      "sendBackward": {
        "desc": "Bring this component backward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A positve value behaves like `bringForward` method."
        ],
        "shortDesc": "sendBackward"
      }
    }
  },
  "addList": {
    "abbrev": "lst",
    "desc": "#addList.md",
    "pNames": [
      "parent",
      "list",
      "options",
      "width",
      "height"
    ],
    "pTypes": [
      "obj-The parent layout",
      "lst-An array of arrays. Each element is of the form `[icon, title, body, secondary]`",
      "str-A comma separated options for list styling and behaviours. Options can be \\n Media: `Icon` `Avatar` \\n Styling: `Dense` `Inset` \\n Util: `Selectable` `Divider` `SecondaryText`, `NoRipple` to disable ripple effect",
      "num-Fraction of the screen width. [0-1]",
      "num-Fraction of the screen height. [0-1]"
    ],
    "retval": "obj-List Component",
    "shortDesc": "addList",
    "subf": {
      "addItem": {
        "desc": "Adds an item in the list\n\n",
        "pNames": [
          "title",
          "body",
          "image",
          "index"
        ],
        "pTypes": [
          "str-The title of the item.",
          "str-The text description of the item.",
          "str-A material icon or image file path.",
          "num-The index in which to add or insert the item."
        ],
        "shortDesc": "addItem"
      },
      "setOnTouch": {
        "desc": "Adds a callback function when the list item is click\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "title ",
              "body ",
              "icon ",
              "index ",
              "event "
            ],
            "pTypes": [
              "str-The list item title text.",
              "str-The list item body text.",
              "str-The list item icon.",
              "num-The list item index.",
              "obj-The pointer event object."
            ]
          }
        ],
        "shortDesc": "setOnTouch"
      },
      "setOnSelect": {
        "desc": "Sets a callback handler when an item in the list is selected\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "title ",
              "index "
            ],
            "pTypes": [
              "str-The list item title text.",
              "num-The index of the selected list item."
            ]
          }
        ],
        "shortDesc": "setOnSelect"
      },
      "setOnAction": {
        "desc": "Sets a callback handler when an action icon is click\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "icon ",
              "index "
            ],
            "pTypes": [
              "str-The icon text.",
              "num-The index of the corresponding secondary action."
            ]
          }
        ],
        "shortDesc": "setOnAction"
      },
      "setOnContextMenu": {
        "desc": "Adds a callback function on right click\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "title ",
              "body ",
              "icon ",
              "index ",
              "event "
            ],
            "pTypes": [
              "str-The list item title text.",
              "str-The list item body text.",
              "str-The list item icon.",
              "num-The list item index.",
              "obj-The pointer event object."
            ]
          }
        ],
        "shortDesc": "setOnContextMenu"
      },
      "getSelectedItems": {
        "desc": "Returns an array of indexes of the selected items\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "getSelectedItems"
      },
      "getSelectedTitles": {
        "desc": "Returns an array of titles of selected items\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "getSelectedTitles"
      },
      "setList": {
        "desc": "Updtes the list\n\n",
        "pNames": [
          "list"
        ],
        "pTypes": [
          "lst-A comma separated list of items or an array. See the list format above."
        ],
        "shortDesc": "setList"
      },
      "setSelectable": {
        "desc": "Make the list selectable or not\n\n",
        "pNames": [
          "selectable"
        ],
        "pTypes": [
          "bin-If true, make the list selectable. Otherwise, list is not selectable"
        ],
        "shortDesc": "setSelectable"
      },
      "setItemByIndex": {
        "desc": "Change the content of an item in a list\n\n",
        "pNames": [
          "index",
          "newTitle",
          "newBody",
          "newImage"
        ],
        "pTypes": [
          "num-The index of the item to update",
          "str-The new title of the item",
          "str-The new body text",
          "str-The new icon or image"
        ],
        "shortDesc": "setItemByIndex"
      },
      "getItemByIndex": {
        "desc": "Get the item in a list by its corresponding index\n\n",
        "pNames": [
          "index"
        ],
        "pTypes": [
          "num-Returns the item in a list as an object of the following format { title, body, image }"
        ],
        "shortDesc": "getItemByIndex"
      },
      "setItem": {
        "desc": "Updates an item in the list\n\n",
        "pNames": [
          "title",
          "newTitle",
          "newBody",
          "newImage"
        ],
        "pTypes": [
          "str-The title of the list item to update.",
          "str-The new title of the list item.",
          "str-The new description of the list item.",
          "str-A material icon font or image file path."
        ],
        "shortDesc": "setItem"
      },
      "getItem": {
        "desc": "Get the item in the list by its correspding title\n\n",
        "pNames": [
          "title"
        ],
        "pTypes": [
          "str-Returns the item in a list as an object of the following format { title, body, image }"
        ],
        "shortDesc": "getItem"
      },
      "removeItemByIndex": {
        "desc": "Removes an element from the list\n\n",
        "pNames": [
          "index"
        ],
        "pTypes": [
          "num-The index of the item to remove"
        ],
        "shortDesc": "removeItemByIndex"
      },
      "removeItemByName": {
        "desc": "Removes an item in the list by its title\n\n",
        "pNames": [
          "name"
        ],
        "pTypes": [
          "str-The title of the list to remove."
        ],
        "shortDesc": "removeItemByName"
      },
      "shiftItem": {
        "desc": "Removes the first item the list\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "shiftItem"
      },
      "popItem": {
        "desc": "Removes the last item in the list\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "popItem"
      },
      "deselectAll": {
        "desc": "Clears all selection in the list if the list is selectable\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "deselectAll"
      },
      "selectItemByIndex": {
        "desc": "Selects an item in the list by its index and marked the checkbox. List must be selectable\n\n",
        "pNames": [
          "index"
        ],
        "pTypes": [
          "num-The index to be selected."
        ],
        "shortDesc": "selectItemByIndex"
      },
      "setTitleText": {
        "desc": "Sets a new title text to a corresponding item in a list\n\n",
        "pNames": [
          "index",
          "title"
        ],
        "pTypes": [
          "num-The index of the corresponding list item.",
          "str-The new title text."
        ],
        "shortDesc": "setTitleText"
      },
      "setBodyText": {
        "desc": "Sets a new secondary text to a corresponding item in a list\n\n",
        "pNames": [
          "index",
          "newText"
        ],
        "pTypes": [
          "num-The index of the list whose secondary text to be changed.",
          "str-The new secondary text."
        ],
        "shortDesc": "setBodyText"
      },
      "setIcon": {
        "desc": "Updates an icon in a list by its corresponding index\n\n",
        "pNames": [
          "index",
          "icon"
        ],
        "pTypes": [
          "num-The index of the corresponding list item.",
          "str-Material icon font."
        ],
        "shortDesc": "setIcon"
      },
      "setCornerRadius": {
        "desc": "Sets the corner radius of the list container\n\n",
        "pNames": [
          "tl",
          "tr",
          "bl",
          "br",
          "mode"
        ],
        "pTypes": [
          "num-Top-left corner radius.",
          "num-Top-right corner radius.",
          "num-Bottom-left corner radius.",
          "num-Bottom-right corner radius.",
          "str-Unit. Values are `px` `rem` or `%`."
        ],
        "shortDesc": "setCornerRadius"
      },
      "animate": {
        "desc": "Animate the component\n\n",
        "pNames": [
          "anim",
          "duration"
        ],
        "pTypes": [
          "str-The type of animation. Here are the available values `bounce` `flash` `pulse` `rubberBand` `shakeX` `shakeY` `headShake` `swing` `tada` `wobble` `jello` `heartBeat` \\n Back Entrances `backInDown` `backInLeft` `backInRight` `backInUp` \\n Back Exits `backOutDown` `backOutLeft` `backOutRight` `backOutUp` \\n Bouncing Entrances `bounceIn` `bounceInDown` `bounceInLeft` `bounceInRight` `bounceInUp` \\n Bouncing exits `bounceOut` `bounceOutDown` `bounceOutLeft` `bounceOutRight` `bounceOutUp` \\n Fading entrances `fadeIn` `fadeInDown` `fadeInDownBig` `fadeInLeft` `fadeInLeftBig` `fadeInRight` `fadeInRightBig` `fadeInUp` `fadeInUpBig` `fadeInTopLeft` `fadeInTopRight` `fadeInBottomLeft` `fadeInBottomRight` \\n Fading exits `fadeOut` `fadeOutDown` `fadeOutDownBig` `fadeOutLeft` `fadeOutLeftBig` `fadeOutRight` `fadeOutRightBig` `fadeOutUp` `fadeOutUpBig` `fadeOutTopLeft` `fadeOutTopRight` `fadeOutBottomRight` `fadeOutBottomLeft` \\n Flippers `flip` `flipInX` `flipInY` `flipOutX` `flipOutY` \\n Lightspeed `lightSpeedInRight` `lightSpeedInLeft` `lightSpeedOutRight` `lightSpeedOutLeft` \\n Rotating Entrances `rotateIn` `rotateInDownLeft` `rotateInDownRight` `rotateInUpLeft` `rotateInUpRight` \\n Rotating Exits `rotateOut` `rotateOutDownLeft` `rotateOutDownRight` `rotateOutUpLeft` `rotateOutUpRight` \\n Specials `hinge` `jackInTheBox` `rollIn` `rollOut` \\n Zooming Entrances `zoomIn` `zoomInDown` `zoomInLeft` `zoomInRight` `zoomInUp` \\n Zooming Exits `zoomOut` `zoomOutDown` `zoomOutLeft` `zoomOutRight` `zoomOutUp` \\n Sliding Entrances `slideInDown` `slideInLeft` `slideInRight` `slideInUp` \\n Sliding Exits `slideOutDown` `slideOutLeft` `slideOutRight` `slideOutUp`.",
          "num-The time in milliseconds."
        ],
        "shortDesc": "animate"
      },
      "setSize": {
        "desc": "Sets the size of the component\n\n",
        "pNames": [
          "width",
          "height"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the parent height. [0-1]"
        ],
        "shortDesc": "setSize"
      },
      "show": {
        "desc": "Show the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "show"
      },
      "hide": {
        "desc": "Hide the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "hide"
      },
      "gone": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "gone"
      },
      "destroy": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "destroy"
      },
      "setScale": {
        "desc": "Sets the x and y scaling of the component\n\n",
        "pNames": [
          "x",
          "y"
        ],
        "pTypes": [
          "num-The x-scale of the component.Values less than `0` is smaller than the normal. While values greater than `1` is greater than the normal.",
          "num-The y-scale of the component. Values less than `1` is smaller than the normal. While vaues greater than `1` is greater than the normal."
        ],
        "shortDesc": "setScale"
      },
      "getPosition": {
        "desc": "Returns the position of the component. The return object is of the form `{ left, top, right, bottom\n\n",
        "pNames": [
          "options"
        ],
        "pTypes": [
          "str-The mode of the measurements. Values can be `px` or `%`"
        ],
        "shortDesc": "getPosition",
        "retval": "obj"
      },
      "setMargins": {
        "desc": "Sets the margin of the component\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "str-`px` or `%`"
        ],
        "shortDesc": "setMargins"
      },
      "setPadding": {
        "desc": "Sets the padding component container\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the component width.",
          "num-Fraction of the component height. [0-1]",
          "num-Fraction of the component width. [0-1]",
          "num-Fraction of the component height. [0-1]",
          "str-The size thickness mode. Can be `px`"
        ],
        "shortDesc": "setPadding"
      },
      "setPosition": {
        "desc": "Sets the position of the component relative to its parent dimensions\n\n",
        "pNames": [
          "left",
          "top",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the screen height. [0-1]",
          "str-Unit of measurement. Can be `px` or `%` or any css unit of measurement."
        ],
        "shortDesc": "setPosition"
      },
      "setBorder": {
        "desc": "Sets the border line for the component container\n\n",
        "pNames": [
          "width",
          "clr",
          "style"
        ],
        "pTypes": [
          "num-Border-left thickness in pixels.",
          "str-Border color in hexadecimal form `#rrggbb`",
          "str-Border-styles. Values can be `dotted` `dashed` `solid` `double` `groove` `ridge` `inset` and `outset`. Default is `solid`"
        ],
        "shortDesc": "setBorder"
      },
      "bringForward": {
        "desc": "Bring this component forward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A negative value behaves like `sendBackward` method."
        ],
        "shortDesc": "bringForward"
      },
      "sendBackward": {
        "desc": "Bring this component backward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A positve value behaves like `bringForward` method."
        ],
        "shortDesc": "sendBackward"
      }
    }
  },
  "addMenu": {
    "abbrev": "men",
    "desc": "#addMenu.md",
    "pNames": [
      "parent",
      "list",
      "options",
      "width",
      "height"
    ],
    "pTypes": [
      "obj-The component where to anchor the Menu.",
      "lst-A list of items to be shown in the pop-up menu. You can also pass a comma separated string. For menu with icon the format is `icon:title` \\n Add a `colon` before an item to display it as the label text.",
      "str-A comma separated options for the Menu. Values can be \\n Color: `Primary` `Secondary` `Error` \\n List: `Dense` \\n Icons: `Icon`",
      "num-Fraction of the screen width. [0-1]",
      "num-Fraction of the screen height. [0-1]"
    ],
    "retval": "obj-Menu Component",
    "shortDesc": "addMenu",
    "subf": {
      "setOnTouch": {
        "desc": "Adds a callback handler when the menu is touch\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "item ",
              "icon ",
              "index "
            ],
            "pTypes": [
              "str-The menu item text.",
              "str-The menu item icon.",
              "num-The menu item index."
            ]
          }
        ],
        "shortDesc": "setOnTouch"
      },
      "show": {
        "desc": "Show the menu pop-up\nIf you passed a parent on initialization, then the menu si anchored on that component\n\n",
        "pNames": [
          "parent"
        ],
        "pTypes": [
          "obj-The component where to anchor the menu. It can be a `Button` or an `Image`."
        ],
        "shortDesc": "show"
      },
      "hide": {
        "desc": "Hide the pop-up menu\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "hide"
      },
      "setList": {
        "desc": "Updates the list items on the menu\n\n",
        "pNames": [
          "list"
        ],
        "pTypes": [
          "lst-The list items to show."
        ],
        "shortDesc": "setList"
      },
      "addItem": {
        "desc": "Adds an item in the menu list\n\n",
        "pNames": [
          "name",
          "index"
        ],
        "pTypes": [
          "str-The new item to be added.",
          "num-The index at which to add the item."
        ],
        "shortDesc": "addItem"
      },
      "removeItemByIndex": {
        "desc": "Removes an item in the menu items list by its index\n\n",
        "pNames": [
          "index"
        ],
        "pTypes": [
          "num-The index of the item to remove."
        ],
        "shortDesc": "removeItemByIndex"
      },
      "removeItemByName": {
        "desc": "Removes an item in the menu items list by its name\n\n",
        "pNames": [
          "name"
        ],
        "pTypes": [
          "str-The name of the item to remove."
        ],
        "shortDesc": "removeItemByName"
      },
      "popItem": {
        "desc": "Removes the last item\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "popItem"
      },
      "shiftItem": {
        "desc": "Removes the first item\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "shiftItem"
      },
      "setPosition": {
        "desc": "Set the position of the menu from the left and top of the anchor component\n\n",
        "pNames": [
          "left",
          "top"
        ],
        "pTypes": [
          "num-The position of the menu from the left of the parent or anchor component. The unit is in pixels.",
          "num-The position of the menu from the top of the parent or anchor component. The unit is in pixels."
        ],
        "shortDesc": "setPosition"
      },
      "setAutoFocus": {
        "desc": "Sets the autofocus value of the menu items\n\n",
        "pNames": [
          "bool"
        ],
        "pTypes": [
          "bin-Value can be `true` or `false`"
        ],
        "shortDesc": "setAutoFocus"
      },
      "setEnabled": {
        "desc": "Enable or disable an item in the menu popup\n\n",
        "pNames": [
          "index",
          "value"
        ],
        "pTypes": [
          "num-The index of the item.",
          "bin-Values can be `true` or `false`. `false` to disable."
        ],
        "shortDesc": "setEnabled"
      },
      "getEnabled": {
        "desc": "Get the enabled state of an item the menu popup\n\n",
        "pNames": [
          "index"
        ],
        "pTypes": [
          "num-The index of the item."
        ],
        "shortDesc": "getEnabled",
        "retval": "bin"
      },
      "setEnabledByName": {
        "desc": "Enable or disable an item in the menu popup by its name\n\n",
        "pNames": [
          "name",
          "value"
        ],
        "pTypes": [
          "str-The name of the corresping item the menu.",
          "bin-Values can be `true` or `false`. `false` to disable an item."
        ],
        "shortDesc": "setEnabledByName"
      },
      "getEnabledByName": {
        "desc": "Get the enabled state of an item in the menu popup\n\n",
        "pNames": [
          "name"
        ],
        "pTypes": [
          "str-The name of the item."
        ],
        "shortDesc": "getEnabledByName",
        "retval": "bin"
      },
      "setOnContextMenu": {
        "desc": "Adds a callback function on right click\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "event "
            ],
            "pTypes": [
              "obj-The pointer event object."
            ]
          }
        ],
        "shortDesc": "setOnContextMenu"
      },
      "animate": {
        "desc": "Animate the component\n\n",
        "pNames": [
          "anim",
          "duration"
        ],
        "pTypes": [
          "str-The type of animation. Here are the available values `bounce` `flash` `pulse` `rubberBand` `shakeX` `shakeY` `headShake` `swing` `tada` `wobble` `jello` `heartBeat` \\n Back Entrances `backInDown` `backInLeft` `backInRight` `backInUp` \\n Back Exits `backOutDown` `backOutLeft` `backOutRight` `backOutUp` \\n Bouncing Entrances `bounceIn` `bounceInDown` `bounceInLeft` `bounceInRight` `bounceInUp` \\n Bouncing exits `bounceOut` `bounceOutDown` `bounceOutLeft` `bounceOutRight` `bounceOutUp` \\n Fading entrances `fadeIn` `fadeInDown` `fadeInDownBig` `fadeInLeft` `fadeInLeftBig` `fadeInRight` `fadeInRightBig` `fadeInUp` `fadeInUpBig` `fadeInTopLeft` `fadeInTopRight` `fadeInBottomLeft` `fadeInBottomRight` \\n Fading exits `fadeOut` `fadeOutDown` `fadeOutDownBig` `fadeOutLeft` `fadeOutLeftBig` `fadeOutRight` `fadeOutRightBig` `fadeOutUp` `fadeOutUpBig` `fadeOutTopLeft` `fadeOutTopRight` `fadeOutBottomRight` `fadeOutBottomLeft` \\n Flippers `flip` `flipInX` `flipInY` `flipOutX` `flipOutY` \\n Lightspeed `lightSpeedInRight` `lightSpeedInLeft` `lightSpeedOutRight` `lightSpeedOutLeft` \\n Rotating Entrances `rotateIn` `rotateInDownLeft` `rotateInDownRight` `rotateInUpLeft` `rotateInUpRight` \\n Rotating Exits `rotateOut` `rotateOutDownLeft` `rotateOutDownRight` `rotateOutUpLeft` `rotateOutUpRight` \\n Specials `hinge` `jackInTheBox` `rollIn` `rollOut` \\n Zooming Entrances `zoomIn` `zoomInDown` `zoomInLeft` `zoomInRight` `zoomInUp` \\n Zooming Exits `zoomOut` `zoomOutDown` `zoomOutLeft` `zoomOutRight` `zoomOutUp` \\n Sliding Entrances `slideInDown` `slideInLeft` `slideInRight` `slideInUp` \\n Sliding Exits `slideOutDown` `slideOutLeft` `slideOutRight` `slideOutUp`.",
          "num-The time in milliseconds."
        ],
        "shortDesc": "animate"
      },
      "setSize": {
        "desc": "Sets the size of the component\n\n",
        "pNames": [
          "width",
          "height"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the parent height. [0-1]"
        ],
        "shortDesc": "setSize"
      },
      "gone": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "gone"
      },
      "destroy": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "destroy"
      },
      "setScale": {
        "desc": "Sets the x and y scaling of the component\n\n",
        "pNames": [
          "x",
          "y"
        ],
        "pTypes": [
          "num-The x-scale of the component.Values less than `0` is smaller than the normal. While values greater than `1` is greater than the normal.",
          "num-The y-scale of the component. Values less than `1` is smaller than the normal. While vaues greater than `1` is greater than the normal."
        ],
        "shortDesc": "setScale"
      },
      "getPosition": {
        "desc": "Returns the position of the component. The return object is of the form `{ left, top, right, bottom\n\n",
        "pNames": [
          "options"
        ],
        "pTypes": [
          "str-The mode of the measurements. Values can be `px` or `%`"
        ],
        "shortDesc": "getPosition",
        "retval": "obj"
      },
      "setMargins": {
        "desc": "Sets the margin of the component\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "str-`px` or `%`"
        ],
        "shortDesc": "setMargins"
      },
      "setPadding": {
        "desc": "Sets the padding component container\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the component width.",
          "num-Fraction of the component height. [0-1]",
          "num-Fraction of the component width. [0-1]",
          "num-Fraction of the component height. [0-1]",
          "str-The size thickness mode. Can be `px`"
        ],
        "shortDesc": "setPadding"
      },
      "setBorder": {
        "desc": "Sets the border line for the component container\n\n",
        "pNames": [
          "width",
          "clr",
          "style"
        ],
        "pTypes": [
          "num-Border-left thickness in pixels.",
          "str-Border color in hexadecimal form `#rrggbb`",
          "str-Border-styles. Values can be `dotted` `dashed` `solid` `double` `groove` `ridge` `inset` and `outset`. Default is `solid`"
        ],
        "shortDesc": "setBorder"
      },
      "setCornerRadius": {
        "desc": "Sets the corner radius of the component\n\n",
        "pNames": [
          "tl",
          "tr",
          "bl",
          "br",
          "mode"
        ],
        "pTypes": [
          "num-Top-Left border radius in pixels.",
          "num-Top-Right border radius in pixels.",
          "num-Bottom-Left border radius in pixels.",
          "num-Bottom-Right border radius in pixels.",
          "str-Unit. Values are `px` `rem` or `%`."
        ],
        "shortDesc": "setCornerRadius"
      },
      "bringForward": {
        "desc": "Bring this component forward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A negative value behaves like `sendBackward` method."
        ],
        "shortDesc": "bringForward"
      },
      "sendBackward": {
        "desc": "Bring this component backward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A positve value behaves like `bringForward` method."
        ],
        "shortDesc": "sendBackward"
      }
    }
  },
  "showPopover": {
    "abbrev": "",
    "desc": "#showPopover.md",
    "pNames": [
      "parent",
      "text",
      "position",
      "width",
      "height"
    ],
    "pTypes": [
      "obj-UI component. Can be a `Layout` `Button` `Image` `Text` or any UI component except dialogs.",
      "str-The text to de displayed. For displaying more data, pass a `Layout`",
      "str-A comma separated values representing the `anchorOrigin,transformOrigin` \\n `anchorOrigin` Position of the popover on its parent. Available values are `tl` for top-left, `tc` for top-center, `tr` `cl` `cc` `cr` `bl` `bc` and `br` for bottom-right. \\n `transformOrigin` Origin on the popover itselt. Values are the same as the `anchorOrigin`",
      "num-Fraction of the screen width.",
      "num-Fraction of the screen height."
    ],
    "retval": "obj-Popover Component.",
    "shortDesc": "showPopover",
    "subf": {}
  },
  "showPopup": {
    "abbrev": "pop",
    "desc": "#showPopup.md",
    "pNames": [
      "msg",
      "options",
      "duration",
      "action"
    ],
    "pTypes": [
      "str-The message to display on the pop-up.",
      "str-A comma separated Menu options. Values can be \\n Duration: `Short` `Long` \\n Vertical Alignment: `Top` `Bottom` \\n Horizontal Alignment: `Left` `Center` `Right` \\n Action options: `Icon` or `HideOnAction` \\n Transition: `Grow` `Fade` `Slide` `Collapse` `Zoom`",
      "num-Time in milliseconds. Pass this, if you don't want the default auto hide duration.",
      "str-Action button text."
    ],
    "retval": "obj-Popup Component.",
    "shortDesc": "showPopup",
    "subf": {
      "setOnClose": {
        "desc": "Adds an onClose callback to your popup\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          ""
        ],
        "shortDesc": "setOnClose"
      },
      "setOnAction": {
        "desc": "Adds an action callback when the user touches the action button. The `btnText` param must\nbe provided in order to create an action button\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          ""
        ],
        "shortDesc": "setOnAction"
      },
      "show": {
        "desc": "Show the popup\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "show"
      },
      "hide": {
        "desc": "Hide the popup\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "hide"
      },
      "setPosition": {
        "desc": "Updates the position of the popup\n\n",
        "pNames": [
          "vertical",
          "horizontal"
        ],
        "pTypes": [
          "str-Vertical alignment. Values can be `Top` `Bottom`",
          "str-Horizontal alignment. Values can be `Left` `Center` and `Right`"
        ],
        "shortDesc": "setPosition"
      },
      "getPosition": {
        "desc": "Returns the position of the popup. The returned object is of the form `{ vertical, horizontal\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "getPosition",
        "retval": "obj"
      }
    }
  },
  "addProgress": {
    "abbrev": "prg",
    "desc": "#addProgress.md",
    "pNames": [
      "parent",
      "value",
      "options",
      "width",
      "height"
    ],
    "pTypes": [
      "obj-The parent layout where to add the prgress component.",
      "num-the initial value of the progress component.",
      "str-A comma separated option for progress component. Options can be \\n Color: `Primary` `Secondary` \\n Type: `Circular` `Linear` \\n Variant: `Determinate` `Indeterminate`",
      "num-Fraction of the screen width. [0-1]",
      "num-Fraction fo the screen height. [0-1]"
    ],
    "retval": "obj-Progress Component",
    "shortDesc": "addProgress",
    "subf": {
      "setOnTouch": {
        "desc": "Adds a callback handler when the component is touch\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "event "
            ],
            "pTypes": [
              "obj-The click event object."
            ]
          }
        ],
        "shortDesc": "setOnTouch"
      },
      "setOnContextMenu": {
        "desc": "Adds a callback function on right click\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "event "
            ],
            "pTypes": [
              "obj-The pointer event object."
            ]
          }
        ],
        "shortDesc": "setOnContextMenu"
      },
      "animate": {
        "desc": "Animate the component\n\n",
        "pNames": [
          "anim",
          "duration"
        ],
        "pTypes": [
          "str-The type of animation. Here are the available values `bounce` `flash` `pulse` `rubberBand` `shakeX` `shakeY` `headShake` `swing` `tada` `wobble` `jello` `heartBeat` \\n Back Entrances `backInDown` `backInLeft` `backInRight` `backInUp` \\n Back Exits `backOutDown` `backOutLeft` `backOutRight` `backOutUp` \\n Bouncing Entrances `bounceIn` `bounceInDown` `bounceInLeft` `bounceInRight` `bounceInUp` \\n Bouncing exits `bounceOut` `bounceOutDown` `bounceOutLeft` `bounceOutRight` `bounceOutUp` \\n Fading entrances `fadeIn` `fadeInDown` `fadeInDownBig` `fadeInLeft` `fadeInLeftBig` `fadeInRight` `fadeInRightBig` `fadeInUp` `fadeInUpBig` `fadeInTopLeft` `fadeInTopRight` `fadeInBottomLeft` `fadeInBottomRight` \\n Fading exits `fadeOut` `fadeOutDown` `fadeOutDownBig` `fadeOutLeft` `fadeOutLeftBig` `fadeOutRight` `fadeOutRightBig` `fadeOutUp` `fadeOutUpBig` `fadeOutTopLeft` `fadeOutTopRight` `fadeOutBottomRight` `fadeOutBottomLeft` \\n Flippers `flip` `flipInX` `flipInY` `flipOutX` `flipOutY` \\n Lightspeed `lightSpeedInRight` `lightSpeedInLeft` `lightSpeedOutRight` `lightSpeedOutLeft` \\n Rotating Entrances `rotateIn` `rotateInDownLeft` `rotateInDownRight` `rotateInUpLeft` `rotateInUpRight` \\n Rotating Exits `rotateOut` `rotateOutDownLeft` `rotateOutDownRight` `rotateOutUpLeft` `rotateOutUpRight` \\n Specials `hinge` `jackInTheBox` `rollIn` `rollOut` \\n Zooming Entrances `zoomIn` `zoomInDown` `zoomInLeft` `zoomInRight` `zoomInUp` \\n Zooming Exits `zoomOut` `zoomOutDown` `zoomOutLeft` `zoomOutRight` `zoomOutUp` \\n Sliding Entrances `slideInDown` `slideInLeft` `slideInRight` `slideInUp` \\n Sliding Exits `slideOutDown` `slideOutLeft` `slideOutRight` `slideOutUp`.",
          "num-The time in milliseconds."
        ],
        "shortDesc": "animate"
      },
      "setSize": {
        "desc": "Sets the size of the component\n\n",
        "pNames": [
          "width",
          "height"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the parent height. [0-1]"
        ],
        "shortDesc": "setSize"
      },
      "show": {
        "desc": "Show the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "show"
      },
      "hide": {
        "desc": "Hide the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "hide"
      },
      "gone": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "gone"
      },
      "destroy": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "destroy"
      },
      "setScale": {
        "desc": "Sets the x and y scaling of the component\n\n",
        "pNames": [
          "x",
          "y"
        ],
        "pTypes": [
          "num-The x-scale of the component.Values less than `0` is smaller than the normal. While values greater than `1` is greater than the normal.",
          "num-The y-scale of the component. Values less than `1` is smaller than the normal. While vaues greater than `1` is greater than the normal."
        ],
        "shortDesc": "setScale"
      },
      "getPosition": {
        "desc": "Returns the position of the component. The return object is of the form `{ left, top, right, bottom\n\n",
        "pNames": [
          "options"
        ],
        "pTypes": [
          "str-The mode of the measurements. Values can be `px` or `%`"
        ],
        "shortDesc": "getPosition",
        "retval": "obj"
      },
      "setMargins": {
        "desc": "Sets the margin of the component\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "str-`px` or `%`"
        ],
        "shortDesc": "setMargins"
      },
      "setPadding": {
        "desc": "Sets the padding component container\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the component width.",
          "num-Fraction of the component height. [0-1]",
          "num-Fraction of the component width. [0-1]",
          "num-Fraction of the component height. [0-1]",
          "str-The size thickness mode. Can be `px`"
        ],
        "shortDesc": "setPadding"
      },
      "setPosition": {
        "desc": "Sets the position of the component relative to its parent dimensions\n\n",
        "pNames": [
          "left",
          "top",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the screen height. [0-1]",
          "str-Unit of measurement. Can be `px` or `%` or any css unit of measurement."
        ],
        "shortDesc": "setPosition"
      },
      "setBorder": {
        "desc": "Sets the border line for the component container\n\n",
        "pNames": [
          "width",
          "clr",
          "style"
        ],
        "pTypes": [
          "num-Border-left thickness in pixels.",
          "str-Border color in hexadecimal form `#rrggbb`",
          "str-Border-styles. Values can be `dotted` `dashed` `solid` `double` `groove` `ridge` `inset` and `outset`. Default is `solid`"
        ],
        "shortDesc": "setBorder"
      },
      "setCornerRadius": {
        "desc": "Sets the corner radius of the component\n\n",
        "pNames": [
          "tl",
          "tr",
          "bl",
          "br",
          "mode"
        ],
        "pTypes": [
          "num-Top-Left border radius in pixels.",
          "num-Top-Right border radius in pixels.",
          "num-Bottom-Left border radius in pixels.",
          "num-Bottom-Right border radius in pixels.",
          "str-Unit. Values are `px` `rem` or `%`."
        ],
        "shortDesc": "setCornerRadius"
      },
      "bringForward": {
        "desc": "Bring this component forward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A negative value behaves like `sendBackward` method."
        ],
        "shortDesc": "bringForward"
      },
      "sendBackward": {
        "desc": "Bring this component backward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A positve value behaves like `bringForward` method."
        ],
        "shortDesc": "sendBackward"
      }
    }
  },
  "showProgressDialog": {
    "abbrev": "prd",
    "desc": "#showProgressDialog.md",
    "pNames": [
      "text",
      "options"
    ],
    "pTypes": [
      "str-The text message of the progress dialog. Options can be \\n `AutoCancel` to close the dialog when backdrop is click.",
      "str-A comma separated options for Progress Dialog."
    ],
    "retval": "obj-ProgressDialog",
    "shortDesc": "showProgressDialog",
    "subf": {
      "show": {
        "desc": "Show the progress dialog component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "show"
      },
      "hide": {
        "desc": "Hides the dialog component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "hide"
      },
      "setOnClose": {
        "desc": "Adds a callback handler method on close event\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          ""
        ],
        "shortDesc": "setOnClose"
      }
    }
  },
  "addRadioGroup": {
    "abbrev": "rdg",
    "desc": "#addRadioGroup.md",
    "pNames": [
      "parent",
      "list",
      "options",
      "width",
      "height"
    ],
    "pTypes": [
      "obj-The parent where to add the RadioGroup component.",
      "lst-The list items array.",
      "str-A comma separated options for RadioGroup component.Options can be \\n Radio Sizes: `Small` `Medium` \\n Colors: `Primary` `Secondary` \\n Icon Position: `Left` or `Right` \\n Container: `Elevated` or `Outlined` \\n Corner: `Square` \\n `Required`",
      "num-Fraction of the screen width. [0-1]",
      "num-Fraction of the screen height. [0-1]"
    ],
    "retval": "obj-RadioGroup Component",
    "shortDesc": "addRadioGroup",
    "subf": {
      "setOnChange": {
        "desc": "Call a function when the value of the radio group has changed\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "index "
            ],
            "pTypes": [
              "num-The index of the selected item."
            ]
          }
        ],
        "shortDesc": "setOnChange"
      },
      "setOnTouch": {
        "desc": "Adds a callback function when an item is click\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "checked ",
              "label ",
              "index ",
              "event "
            ],
            "pTypes": [
              "bin-The checked state of the radio item.",
              "str-The radio item label text.",
              "num- The index of the radio item.",
              "obj-The click event object."
            ]
          }
        ],
        "shortDesc": "setOnTouch"
      },
      "setList": {
        "desc": "Sets the the radiogroup list items\n\n",
        "pNames": [
          "val"
        ],
        "pTypes": [
          "str-A comma separated items"
        ],
        "shortDesc": "setList"
      },
      "setItemByIndex": {
        "desc": "Sets an item in the radiogroup component\n\n",
        "pNames": [
          "item",
          "index"
        ],
        "pTypes": [
          "str-The new item name to be displayed",
          "num-The index to of the item to be updated"
        ],
        "shortDesc": "setItemByIndex"
      },
      "setItemByName": {
        "desc": "Updates an item in the list by its corresponding name\n\n",
        "pNames": [
          "name",
          "text"
        ],
        "pTypes": [
          "str-The name of the item.",
          "str-The new text to replaced the name of the item."
        ],
        "shortDesc": "setItemByName"
      },
      "addItem": {
        "desc": "Adds an item in the radio group list\n\n",
        "pNames": [
          "name",
          "index"
        ],
        "pTypes": [
          "str-The new item to be added.",
          "num-The index in which to add the item."
        ],
        "shortDesc": "addItem"
      },
      "removeItemByIndex": {
        "desc": "Removes an item in the radiogroup items list by its index\n\n",
        "pNames": [
          "index"
        ],
        "pTypes": [
          "num-The index of the item to remove."
        ],
        "shortDesc": "removeItemByIndex"
      },
      "removeItemByName": {
        "desc": "Removes an item in the radiogroup items list by its name\n\n",
        "pNames": [
          "name"
        ],
        "pTypes": [
          "str-The name of the item to remove."
        ],
        "shortDesc": "removeItemByName"
      },
      "popItem": {
        "desc": "Removes the last item in the radiogroup\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "popItem"
      },
      "shiftItem": {
        "desc": "Removes the first item in the radiogroup\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "shiftItem"
      },
      "setEnabled": {
        "desc": "Enable or disable the radiogroup or an item in the radiogroup\n\n",
        "pNames": [
          "index",
          "value"
        ],
        "pTypes": [
          "num-The index of the item.",
          "bin-Values can be `true` or `false`. If `false`, the item will be disabled."
        ],
        "shortDesc": "setEnabled"
      },
      "getEnabled": {
        "desc": "Get the enabled state of an item in the radio group\n\n",
        "pNames": [
          "index"
        ],
        "pTypes": [
          "num-The index of the corresponding item."
        ],
        "shortDesc": "getEnabled",
        "retval": "bin"
      },
      "setEnabledByName": {
        "desc": "Enable or disable a radiogroup item by its name\n\n",
        "pNames": [
          "name",
          "value"
        ],
        "pTypes": [
          "str-The radiogroup text.",
          "bin-Values can be `true` or `false`."
        ],
        "shortDesc": "setEnabledByName"
      },
      "getEnabledByName": {
        "desc": "Get the enabled state of a radiogroup item by its name\n\n",
        "pNames": [
          "name"
        ],
        "pTypes": [
          "str-The radiogroup text."
        ],
        "shortDesc": "getEnabledByName",
        "retval": "bin"
      },
      "setOnContextMenu": {
        "desc": "Adds a callback function on right click\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "label ",
              "index ",
              "event "
            ],
            "pTypes": [
              "str-The list item label text.",
              "num-The index of the corresponding radio item.",
              "obj-The pointer event object."
            ]
          }
        ],
        "shortDesc": "setOnContextMenu"
      },
      "setCornerRadius": {
        "desc": "Sets the corner radius of the radiogroup container\n\n",
        "pNames": [
          "tl",
          "tr",
          "bl",
          "br",
          "mode"
        ],
        "pTypes": [
          "num-Top-left corner radius.",
          "num-Top-right corner radius.",
          "num-Bottom-left corner radius.",
          "num-Bottom-right corner radius.",
          "str-Unit. Values are `px` `rem` or `%`."
        ],
        "shortDesc": "setCornerRadius"
      },
      "animate": {
        "desc": "Animate the component\n\n",
        "pNames": [
          "anim",
          "duration"
        ],
        "pTypes": [
          "str-The type of animation. Here are the available values `bounce` `flash` `pulse` `rubberBand` `shakeX` `shakeY` `headShake` `swing` `tada` `wobble` `jello` `heartBeat` \\n Back Entrances `backInDown` `backInLeft` `backInRight` `backInUp` \\n Back Exits `backOutDown` `backOutLeft` `backOutRight` `backOutUp` \\n Bouncing Entrances `bounceIn` `bounceInDown` `bounceInLeft` `bounceInRight` `bounceInUp` \\n Bouncing exits `bounceOut` `bounceOutDown` `bounceOutLeft` `bounceOutRight` `bounceOutUp` \\n Fading entrances `fadeIn` `fadeInDown` `fadeInDownBig` `fadeInLeft` `fadeInLeftBig` `fadeInRight` `fadeInRightBig` `fadeInUp` `fadeInUpBig` `fadeInTopLeft` `fadeInTopRight` `fadeInBottomLeft` `fadeInBottomRight` \\n Fading exits `fadeOut` `fadeOutDown` `fadeOutDownBig` `fadeOutLeft` `fadeOutLeftBig` `fadeOutRight` `fadeOutRightBig` `fadeOutUp` `fadeOutUpBig` `fadeOutTopLeft` `fadeOutTopRight` `fadeOutBottomRight` `fadeOutBottomLeft` \\n Flippers `flip` `flipInX` `flipInY` `flipOutX` `flipOutY` \\n Lightspeed `lightSpeedInRight` `lightSpeedInLeft` `lightSpeedOutRight` `lightSpeedOutLeft` \\n Rotating Entrances `rotateIn` `rotateInDownLeft` `rotateInDownRight` `rotateInUpLeft` `rotateInUpRight` \\n Rotating Exits `rotateOut` `rotateOutDownLeft` `rotateOutDownRight` `rotateOutUpLeft` `rotateOutUpRight` \\n Specials `hinge` `jackInTheBox` `rollIn` `rollOut` \\n Zooming Entrances `zoomIn` `zoomInDown` `zoomInLeft` `zoomInRight` `zoomInUp` \\n Zooming Exits `zoomOut` `zoomOutDown` `zoomOutLeft` `zoomOutRight` `zoomOutUp` \\n Sliding Entrances `slideInDown` `slideInLeft` `slideInRight` `slideInUp` \\n Sliding Exits `slideOutDown` `slideOutLeft` `slideOutRight` `slideOutUp`.",
          "num-The time in milliseconds."
        ],
        "shortDesc": "animate"
      },
      "setSize": {
        "desc": "Sets the size of the component\n\n",
        "pNames": [
          "width",
          "height"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the parent height. [0-1]"
        ],
        "shortDesc": "setSize"
      },
      "show": {
        "desc": "Show the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "show"
      },
      "hide": {
        "desc": "Hide the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "hide"
      },
      "gone": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "gone"
      },
      "destroy": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "destroy"
      },
      "setScale": {
        "desc": "Sets the x and y scaling of the component\n\n",
        "pNames": [
          "x",
          "y"
        ],
        "pTypes": [
          "num-The x-scale of the component.Values less than `0` is smaller than the normal. While values greater than `1` is greater than the normal.",
          "num-The y-scale of the component. Values less than `1` is smaller than the normal. While vaues greater than `1` is greater than the normal."
        ],
        "shortDesc": "setScale"
      },
      "getPosition": {
        "desc": "Returns the position of the component. The return object is of the form `{ left, top, right, bottom\n\n",
        "pNames": [
          "options"
        ],
        "pTypes": [
          "str-The mode of the measurements. Values can be `px` or `%`"
        ],
        "shortDesc": "getPosition",
        "retval": "obj"
      },
      "setMargins": {
        "desc": "Sets the margin of the component\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "str-`px` or `%`"
        ],
        "shortDesc": "setMargins"
      },
      "setPadding": {
        "desc": "Sets the padding component container\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the component width.",
          "num-Fraction of the component height. [0-1]",
          "num-Fraction of the component width. [0-1]",
          "num-Fraction of the component height. [0-1]",
          "str-The size thickness mode. Can be `px`"
        ],
        "shortDesc": "setPadding"
      },
      "setPosition": {
        "desc": "Sets the position of the component relative to its parent dimensions\n\n",
        "pNames": [
          "left",
          "top",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the screen height. [0-1]",
          "str-Unit of measurement. Can be `px` or `%` or any css unit of measurement."
        ],
        "shortDesc": "setPosition"
      },
      "setBorder": {
        "desc": "Sets the border line for the component container\n\n",
        "pNames": [
          "width",
          "clr",
          "style"
        ],
        "pTypes": [
          "num-Border-left thickness in pixels.",
          "str-Border color in hexadecimal form `#rrggbb`",
          "str-Border-styles. Values can be `dotted` `dashed` `solid` `double` `groove` `ridge` `inset` and `outset`. Default is `solid`"
        ],
        "shortDesc": "setBorder"
      },
      "bringForward": {
        "desc": "Bring this component forward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A negative value behaves like `sendBackward` method."
        ],
        "shortDesc": "bringForward"
      },
      "sendBackward": {
        "desc": "Bring this component backward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A positve value behaves like `bringForward` method."
        ],
        "shortDesc": "sendBackward"
      }
    }
  },
  "addSelect": {
    "abbrev": "sel",
    "desc": "#addSelect.md",
    "pNames": [
      "parent",
      "list",
      "options",
      "width",
      "height"
    ],
    "pTypes": [
      "obj-The parent layout where to add the control",
      "lst-The list of items for the Select options",
      "str-A comma separated options. Can be \\n Sizes: `Small` `Medium` \\n Variant: `Filled` `Outlined` `Standard` \\n Margin: `Dense` `Normal` \\n Utils: `Required` `Multiple` `Radio` `Disabled` `AutoFocus` `FullWidth`",
      "num-Fraction of the screen width. [0-1]",
      "num-Fraction of the screen height. [0-1]"
    ],
    "retval": "obj-Select Component",
    "shortDesc": "addSelect",
    "subf": {
      "setOnChange": {
        "desc": "Sets a callback function when the value changes\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "value "
            ],
            "pTypes": [
              "str-The value of the select input."
            ]
          }
        ],
        "shortDesc": "setOnChange"
      },
      "setOnOpen": {
        "desc": "Sets a callback function when the menu is open\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          ""
        ],
        "shortDesc": "setOnOpen"
      },
      "setOnClose": {
        "desc": "Sets a callback function when the menu dialog is close\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "value "
            ],
            "pTypes": [
              "str-The value of the select input."
            ]
          }
        ],
        "shortDesc": "setOnClose"
      },
      "addItem": {
        "desc": "Adds an item on the select component options list\n\n",
        "pNames": [
          "item",
          "index"
        ],
        "pTypes": [
          "str-A new item to be added.",
          "num-The index in which to add the item."
        ],
        "shortDesc": "addItem"
      },
      "removeItemByIndex": {
        "desc": "Removes an item in the select component item list by its index\n\n",
        "pNames": [
          "index"
        ],
        "pTypes": [
          "num-The index of the corresponding item to remove."
        ],
        "shortDesc": "removeItemByIndex"
      },
      "removeItemByName": {
        "desc": "Removes an item in the select component item list by its name\n\n",
        "pNames": [
          "name"
        ],
        "pTypes": [
          "str-The name of the item to remove."
        ],
        "shortDesc": "removeItemByName"
      },
      "shifItem": {
        "desc": "Removes an item at the beginning of the list items\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "shifItem"
      },
      "popItem": {
        "desc": "Removes an item at the end of the list items\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "popItem"
      },
      "getItem": {
        "desc": "Returns the item at a given index\n\n",
        "pNames": [
          "index"
        ],
        "pTypes": [
          "num-The index of the item."
        ],
        "shortDesc": "getItem"
      },
      "setList": {
        "desc": "Sets the list items in the menu popup\n\n",
        "pNames": [
          "items"
        ],
        "pTypes": [
          "obj-A comma separated string or array of options"
        ],
        "shortDesc": "setList"
      },
      "setEnabled": {
        "desc": "Enable or disable the select component\n\n",
        "pNames": [
          "index",
          "value"
        ],
        "pTypes": [
          "num-Can be `true` or `false`. You can also pass a `Boolean` to enable or disable the Select component.",
          "bin-Values can be `true` or `false`."
        ],
        "shortDesc": "setEnabled"
      },
      "getEnabled": {
        "desc": "Get the enabled state of an item in the select menu\n\n",
        "pNames": [
          "index"
        ],
        "pTypes": [
          "num-The index of the corresponding item in the select menu."
        ],
        "shortDesc": "getEnabled",
        "retval": "bin"
      },
      "setEnabledByName": {
        "desc": "Enable or disable an item in the menu popup\n\n",
        "pNames": [
          "name",
          "value"
        ],
        "pTypes": [
          "str-The name of the menu item.",
          "bin-Value can be `true` or `false`"
        ],
        "shortDesc": "setEnabledByName"
      },
      "getEnabledByName": {
        "desc": "Get the enabled state of an item in the menu popup\n\n",
        "pNames": [
          "name"
        ],
        "pTypes": [
          "str-The name of the menu item."
        ],
        "shortDesc": "getEnabledByName",
        "retval": "bin"
      },
      "setOnTouch": {
        "desc": "Adds a callback handler when the component is touch\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "event "
            ],
            "pTypes": [
              "obj-The click event object."
            ]
          }
        ],
        "shortDesc": "setOnTouch"
      },
      "setOnContextMenu": {
        "desc": "Adds a callback function on right click\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "event "
            ],
            "pTypes": [
              "obj-The pointer event object."
            ]
          }
        ],
        "shortDesc": "setOnContextMenu"
      },
      "animate": {
        "desc": "Animate the component\n\n",
        "pNames": [
          "anim",
          "duration"
        ],
        "pTypes": [
          "str-The type of animation. Here are the available values `bounce` `flash` `pulse` `rubberBand` `shakeX` `shakeY` `headShake` `swing` `tada` `wobble` `jello` `heartBeat` \\n Back Entrances `backInDown` `backInLeft` `backInRight` `backInUp` \\n Back Exits `backOutDown` `backOutLeft` `backOutRight` `backOutUp` \\n Bouncing Entrances `bounceIn` `bounceInDown` `bounceInLeft` `bounceInRight` `bounceInUp` \\n Bouncing exits `bounceOut` `bounceOutDown` `bounceOutLeft` `bounceOutRight` `bounceOutUp` \\n Fading entrances `fadeIn` `fadeInDown` `fadeInDownBig` `fadeInLeft` `fadeInLeftBig` `fadeInRight` `fadeInRightBig` `fadeInUp` `fadeInUpBig` `fadeInTopLeft` `fadeInTopRight` `fadeInBottomLeft` `fadeInBottomRight` \\n Fading exits `fadeOut` `fadeOutDown` `fadeOutDownBig` `fadeOutLeft` `fadeOutLeftBig` `fadeOutRight` `fadeOutRightBig` `fadeOutUp` `fadeOutUpBig` `fadeOutTopLeft` `fadeOutTopRight` `fadeOutBottomRight` `fadeOutBottomLeft` \\n Flippers `flip` `flipInX` `flipInY` `flipOutX` `flipOutY` \\n Lightspeed `lightSpeedInRight` `lightSpeedInLeft` `lightSpeedOutRight` `lightSpeedOutLeft` \\n Rotating Entrances `rotateIn` `rotateInDownLeft` `rotateInDownRight` `rotateInUpLeft` `rotateInUpRight` \\n Rotating Exits `rotateOut` `rotateOutDownLeft` `rotateOutDownRight` `rotateOutUpLeft` `rotateOutUpRight` \\n Specials `hinge` `jackInTheBox` `rollIn` `rollOut` \\n Zooming Entrances `zoomIn` `zoomInDown` `zoomInLeft` `zoomInRight` `zoomInUp` \\n Zooming Exits `zoomOut` `zoomOutDown` `zoomOutLeft` `zoomOutRight` `zoomOutUp` \\n Sliding Entrances `slideInDown` `slideInLeft` `slideInRight` `slideInUp` \\n Sliding Exits `slideOutDown` `slideOutLeft` `slideOutRight` `slideOutUp`.",
          "num-The time in milliseconds."
        ],
        "shortDesc": "animate"
      },
      "setSize": {
        "desc": "Sets the size of the component\n\n",
        "pNames": [
          "width",
          "height"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the parent height. [0-1]"
        ],
        "shortDesc": "setSize"
      },
      "show": {
        "desc": "Show the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "show"
      },
      "hide": {
        "desc": "Hide the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "hide"
      },
      "gone": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "gone"
      },
      "destroy": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "destroy"
      },
      "setScale": {
        "desc": "Sets the x and y scaling of the component\n\n",
        "pNames": [
          "x",
          "y"
        ],
        "pTypes": [
          "num-The x-scale of the component.Values less than `0` is smaller than the normal. While values greater than `1` is greater than the normal.",
          "num-The y-scale of the component. Values less than `1` is smaller than the normal. While vaues greater than `1` is greater than the normal."
        ],
        "shortDesc": "setScale"
      },
      "getPosition": {
        "desc": "Returns the position of the component. The return object is of the form `{ left, top, right, bottom\n\n",
        "pNames": [
          "options"
        ],
        "pTypes": [
          "str-The mode of the measurements. Values can be `px` or `%`"
        ],
        "shortDesc": "getPosition",
        "retval": "obj"
      },
      "setMargins": {
        "desc": "Sets the margin of the component\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "str-`px` or `%`"
        ],
        "shortDesc": "setMargins"
      },
      "setPadding": {
        "desc": "Sets the padding component container\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the component width.",
          "num-Fraction of the component height. [0-1]",
          "num-Fraction of the component width. [0-1]",
          "num-Fraction of the component height. [0-1]",
          "str-The size thickness mode. Can be `px`"
        ],
        "shortDesc": "setPadding"
      },
      "setPosition": {
        "desc": "Sets the position of the component relative to its parent dimensions\n\n",
        "pNames": [
          "left",
          "top",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the screen height. [0-1]",
          "str-Unit of measurement. Can be `px` or `%` or any css unit of measurement."
        ],
        "shortDesc": "setPosition"
      },
      "setBorder": {
        "desc": "Sets the border line for the component container\n\n",
        "pNames": [
          "width",
          "clr",
          "style"
        ],
        "pTypes": [
          "num-Border-left thickness in pixels.",
          "str-Border color in hexadecimal form `#rrggbb`",
          "str-Border-styles. Values can be `dotted` `dashed` `solid` `double` `groove` `ridge` `inset` and `outset`. Default is `solid`"
        ],
        "shortDesc": "setBorder"
      },
      "setCornerRadius": {
        "desc": "Sets the corner radius of the component\n\n",
        "pNames": [
          "tl",
          "tr",
          "bl",
          "br",
          "mode"
        ],
        "pTypes": [
          "num-Top-Left border radius in pixels.",
          "num-Top-Right border radius in pixels.",
          "num-Bottom-Left border radius in pixels.",
          "num-Bottom-Right border radius in pixels.",
          "str-Unit. Values are `px` `rem` or `%`."
        ],
        "shortDesc": "setCornerRadius"
      },
      "bringForward": {
        "desc": "Bring this component forward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A negative value behaves like `sendBackward` method."
        ],
        "shortDesc": "bringForward"
      },
      "sendBackward": {
        "desc": "Bring this component backward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A positve value behaves like `bringForward` method."
        ],
        "shortDesc": "sendBackward"
      }
    }
  },
  "addSlider": {
    "abbrev": "sld",
    "desc": "#addSlider.md",
    "pNames": [
      "parent",
      "value",
      "options",
      "width",
      "height"
    ],
    "pTypes": [
      "obj-The layout where to add the Slider Component.",
      "num-The initial value of the Slider. Value must be between 0-100, the default min and max values.",
      "str-A comma separated options for the Slider Component. Options can be \\n Color: `Primary` `Secondary` \\n Orienation: `Horizontal` `Vertical` \\n Track: `Normal` `Inverted` `False`",
      "num-Fraction of the screen width. [0-1]",
      "num-Fraction of the screen height."
    ],
    "retval": "obj-Slider Component.",
    "shortDesc": "addSlider",
    "subf": {
      "setOnChange": {
        "desc": "Sets a callback function when the value of the Slider Component changes\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "value "
            ],
            "pTypes": [
              "num-The value of the Slider component."
            ]
          }
        ],
        "shortDesc": "setOnChange"
      },
      "setOnSelect": {
        "desc": "Sets a callback function when a final value is selected. This is equal to submit value event\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "value "
            ],
            "pTypes": [
              "num-The value of the Slider component."
            ]
          }
        ],
        "shortDesc": "setOnSelect"
      },
      "setRange": {
        "desc": "Sets a range value for the Slider Component\n\n",
        "pNames": [
          "min",
          "max"
        ],
        "pTypes": [
          "num-Minimum value of the slider.",
          "num-Maximum value of the slider."
        ],
        "shortDesc": "setRange"
      },
      "setMarks": {
        "desc": "Sets the marks of the Slider Component\nIf value is `Boolean` the marks is base on the step\nIf the value is `Array`, the elements must be an object of the form `{ label, value }` where `label` is a string and `value` is a number within the range\n\n",
        "pNames": [
          "val"
        ],
        "pTypes": [
          "obj-The marks on the Slider Component."
        ],
        "shortDesc": "setMarks"
      },
      "getMarks": {
        "desc": "Returns the step marks of the Slider Component. See `setMarks` methods for possible values\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "getMarks",
        "retval": "bin"
      },
      "setOnTouch": {
        "desc": "Adds a callback handler when the component is touch\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "event "
            ],
            "pTypes": [
              "obj-The click event object."
            ]
          }
        ],
        "shortDesc": "setOnTouch"
      },
      "setOnContextMenu": {
        "desc": "Adds a callback function on right click\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "event "
            ],
            "pTypes": [
              "obj-The pointer event object."
            ]
          }
        ],
        "shortDesc": "setOnContextMenu"
      },
      "animate": {
        "desc": "Animate the component\n\n",
        "pNames": [
          "anim",
          "duration"
        ],
        "pTypes": [
          "str-The type of animation. Here are the available values `bounce` `flash` `pulse` `rubberBand` `shakeX` `shakeY` `headShake` `swing` `tada` `wobble` `jello` `heartBeat` \\n Back Entrances `backInDown` `backInLeft` `backInRight` `backInUp` \\n Back Exits `backOutDown` `backOutLeft` `backOutRight` `backOutUp` \\n Bouncing Entrances `bounceIn` `bounceInDown` `bounceInLeft` `bounceInRight` `bounceInUp` \\n Bouncing exits `bounceOut` `bounceOutDown` `bounceOutLeft` `bounceOutRight` `bounceOutUp` \\n Fading entrances `fadeIn` `fadeInDown` `fadeInDownBig` `fadeInLeft` `fadeInLeftBig` `fadeInRight` `fadeInRightBig` `fadeInUp` `fadeInUpBig` `fadeInTopLeft` `fadeInTopRight` `fadeInBottomLeft` `fadeInBottomRight` \\n Fading exits `fadeOut` `fadeOutDown` `fadeOutDownBig` `fadeOutLeft` `fadeOutLeftBig` `fadeOutRight` `fadeOutRightBig` `fadeOutUp` `fadeOutUpBig` `fadeOutTopLeft` `fadeOutTopRight` `fadeOutBottomRight` `fadeOutBottomLeft` \\n Flippers `flip` `flipInX` `flipInY` `flipOutX` `flipOutY` \\n Lightspeed `lightSpeedInRight` `lightSpeedInLeft` `lightSpeedOutRight` `lightSpeedOutLeft` \\n Rotating Entrances `rotateIn` `rotateInDownLeft` `rotateInDownRight` `rotateInUpLeft` `rotateInUpRight` \\n Rotating Exits `rotateOut` `rotateOutDownLeft` `rotateOutDownRight` `rotateOutUpLeft` `rotateOutUpRight` \\n Specials `hinge` `jackInTheBox` `rollIn` `rollOut` \\n Zooming Entrances `zoomIn` `zoomInDown` `zoomInLeft` `zoomInRight` `zoomInUp` \\n Zooming Exits `zoomOut` `zoomOutDown` `zoomOutLeft` `zoomOutRight` `zoomOutUp` \\n Sliding Entrances `slideInDown` `slideInLeft` `slideInRight` `slideInUp` \\n Sliding Exits `slideOutDown` `slideOutLeft` `slideOutRight` `slideOutUp`.",
          "num-The time in milliseconds."
        ],
        "shortDesc": "animate"
      },
      "setSize": {
        "desc": "Sets the size of the component\n\n",
        "pNames": [
          "width",
          "height"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the parent height. [0-1]"
        ],
        "shortDesc": "setSize"
      },
      "show": {
        "desc": "Show the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "show"
      },
      "hide": {
        "desc": "Hide the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "hide"
      },
      "gone": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "gone"
      },
      "destroy": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "destroy"
      },
      "setScale": {
        "desc": "Sets the x and y scaling of the component\n\n",
        "pNames": [
          "x",
          "y"
        ],
        "pTypes": [
          "num-The x-scale of the component.Values less than `0` is smaller than the normal. While values greater than `1` is greater than the normal.",
          "num-The y-scale of the component. Values less than `1` is smaller than the normal. While vaues greater than `1` is greater than the normal."
        ],
        "shortDesc": "setScale"
      },
      "getPosition": {
        "desc": "Returns the position of the component. The return object is of the form `{ left, top, right, bottom\n\n",
        "pNames": [
          "options"
        ],
        "pTypes": [
          "str-The mode of the measurements. Values can be `px` or `%`"
        ],
        "shortDesc": "getPosition",
        "retval": "obj"
      },
      "setMargins": {
        "desc": "Sets the margin of the component\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "str-`px` or `%`"
        ],
        "shortDesc": "setMargins"
      },
      "setPadding": {
        "desc": "Sets the padding component container\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the component width.",
          "num-Fraction of the component height. [0-1]",
          "num-Fraction of the component width. [0-1]",
          "num-Fraction of the component height. [0-1]",
          "str-The size thickness mode. Can be `px`"
        ],
        "shortDesc": "setPadding"
      },
      "setPosition": {
        "desc": "Sets the position of the component relative to its parent dimensions\n\n",
        "pNames": [
          "left",
          "top",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the screen height. [0-1]",
          "str-Unit of measurement. Can be `px` or `%` or any css unit of measurement."
        ],
        "shortDesc": "setPosition"
      },
      "setBorder": {
        "desc": "Sets the border line for the component container\n\n",
        "pNames": [
          "width",
          "clr",
          "style"
        ],
        "pTypes": [
          "num-Border-left thickness in pixels.",
          "str-Border color in hexadecimal form `#rrggbb`",
          "str-Border-styles. Values can be `dotted` `dashed` `solid` `double` `groove` `ridge` `inset` and `outset`. Default is `solid`"
        ],
        "shortDesc": "setBorder"
      },
      "setCornerRadius": {
        "desc": "Sets the corner radius of the component\n\n",
        "pNames": [
          "tl",
          "tr",
          "bl",
          "br",
          "mode"
        ],
        "pTypes": [
          "num-Top-Left border radius in pixels.",
          "num-Top-Right border radius in pixels.",
          "num-Bottom-Left border radius in pixels.",
          "num-Bottom-Right border radius in pixels.",
          "str-Unit. Values are `px` `rem` or `%`."
        ],
        "shortDesc": "setCornerRadius"
      },
      "bringForward": {
        "desc": "Bring this component forward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A negative value behaves like `sendBackward` method."
        ],
        "shortDesc": "bringForward"
      },
      "sendBackward": {
        "desc": "Bring this component backward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A positve value behaves like `bringForward` method."
        ],
        "shortDesc": "sendBackward"
      }
    }
  },
  "addStepper": {
    "abbrev": "stp",
    "desc": "#addStepper.md",
    "pNames": [
      "parent",
      "steps",
      "options",
      "width",
      "height"
    ],
    "pTypes": [
      "obj-The parent layout of the Stepper",
      "lst-An array of titles.",
      "str-A comma separated Stepper options. Values can be `Vertical` `Horizontal` `Loop` `Mobile` or `AlternativeLabel`.",
      "num-Fraction of the screen width. [0-1]",
      "num-Fraction of the screen height. [0-1]"
    ],
    "retval": "obj-Stepper Component",
    "shortDesc": "addStepper",
    "subf": {
      "setOnComplete": {
        "desc": "Adds a callback function to be called when the stepper is complete\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          ""
        ],
        "shortDesc": "setOnComplete"
      },
      "setOnChange": {
        "desc": "Adds a callback function to be called when the stepper has changed step\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "index "
            ],
            "pTypes": [
              "num-The index of the active step."
            ]
          }
        ],
        "shortDesc": "setOnChange"
      },
      "nextStep": {
        "desc": "Go to the next step\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "nextStep"
      },
      "previousStep": {
        "desc": "Go to the previous step\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "previousStep"
      },
      "getLayout": {
        "desc": "Returns the layout of the corresponding step layout where you can add controls\n\n",
        "pNames": [
          "index"
        ],
        "pTypes": [
          "num-The index of the corresponing stepper layout"
        ],
        "shortDesc": "getLayout",
        "retval": "obj-Layout"
      },
      "getLayoutIndex": {
        "desc": "Get the index of the corresponding layout\n\n",
        "pNames": [
          "layout"
        ],
        "pTypes": [
          "obj-The layout to check."
        ],
        "shortDesc": "getLayoutIndex",
        "retval": "num"
      },
      "removeStep": {
        "desc": "Removes a corresponding step by its index\n\n",
        "pNames": [
          "index"
        ],
        "pTypes": [
          "num-The index of the step to remove."
        ],
        "shortDesc": "removeStep"
      },
      "setTitleText": {
        "desc": "Sets a new title for the corresponding step by its index\n\n",
        "pNames": [
          "index",
          "title"
        ],
        "pTypes": [
          "num-The index of the Stepper.",
          "str-The new title text."
        ],
        "shortDesc": "setTitleText"
      },
      "setOnTouch": {
        "desc": "Adds a callback handler when the component is touch\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "event "
            ],
            "pTypes": [
              "obj-The click event object."
            ]
          }
        ],
        "shortDesc": "setOnTouch"
      },
      "setOnContextMenu": {
        "desc": "Adds a callback function on right click\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "event "
            ],
            "pTypes": [
              "obj-The pointer event object."
            ]
          }
        ],
        "shortDesc": "setOnContextMenu"
      },
      "animate": {
        "desc": "Animate the component\n\n",
        "pNames": [
          "anim",
          "duration"
        ],
        "pTypes": [
          "str-The type of animation. Here are the available values `bounce` `flash` `pulse` `rubberBand` `shakeX` `shakeY` `headShake` `swing` `tada` `wobble` `jello` `heartBeat` \\n Back Entrances `backInDown` `backInLeft` `backInRight` `backInUp` \\n Back Exits `backOutDown` `backOutLeft` `backOutRight` `backOutUp` \\n Bouncing Entrances `bounceIn` `bounceInDown` `bounceInLeft` `bounceInRight` `bounceInUp` \\n Bouncing exits `bounceOut` `bounceOutDown` `bounceOutLeft` `bounceOutRight` `bounceOutUp` \\n Fading entrances `fadeIn` `fadeInDown` `fadeInDownBig` `fadeInLeft` `fadeInLeftBig` `fadeInRight` `fadeInRightBig` `fadeInUp` `fadeInUpBig` `fadeInTopLeft` `fadeInTopRight` `fadeInBottomLeft` `fadeInBottomRight` \\n Fading exits `fadeOut` `fadeOutDown` `fadeOutDownBig` `fadeOutLeft` `fadeOutLeftBig` `fadeOutRight` `fadeOutRightBig` `fadeOutUp` `fadeOutUpBig` `fadeOutTopLeft` `fadeOutTopRight` `fadeOutBottomRight` `fadeOutBottomLeft` \\n Flippers `flip` `flipInX` `flipInY` `flipOutX` `flipOutY` \\n Lightspeed `lightSpeedInRight` `lightSpeedInLeft` `lightSpeedOutRight` `lightSpeedOutLeft` \\n Rotating Entrances `rotateIn` `rotateInDownLeft` `rotateInDownRight` `rotateInUpLeft` `rotateInUpRight` \\n Rotating Exits `rotateOut` `rotateOutDownLeft` `rotateOutDownRight` `rotateOutUpLeft` `rotateOutUpRight` \\n Specials `hinge` `jackInTheBox` `rollIn` `rollOut` \\n Zooming Entrances `zoomIn` `zoomInDown` `zoomInLeft` `zoomInRight` `zoomInUp` \\n Zooming Exits `zoomOut` `zoomOutDown` `zoomOutLeft` `zoomOutRight` `zoomOutUp` \\n Sliding Entrances `slideInDown` `slideInLeft` `slideInRight` `slideInUp` \\n Sliding Exits `slideOutDown` `slideOutLeft` `slideOutRight` `slideOutUp`.",
          "num-The time in milliseconds."
        ],
        "shortDesc": "animate"
      },
      "setSize": {
        "desc": "Sets the size of the component\n\n",
        "pNames": [
          "width",
          "height"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the parent height. [0-1]"
        ],
        "shortDesc": "setSize"
      },
      "show": {
        "desc": "Show the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "show"
      },
      "hide": {
        "desc": "Hide the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "hide"
      },
      "gone": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "gone"
      },
      "destroy": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "destroy"
      },
      "setScale": {
        "desc": "Sets the x and y scaling of the component\n\n",
        "pNames": [
          "x",
          "y"
        ],
        "pTypes": [
          "num-The x-scale of the component.Values less than `0` is smaller than the normal. While values greater than `1` is greater than the normal.",
          "num-The y-scale of the component. Values less than `1` is smaller than the normal. While vaues greater than `1` is greater than the normal."
        ],
        "shortDesc": "setScale"
      },
      "getPosition": {
        "desc": "Returns the position of the component. The return object is of the form `{ left, top, right, bottom\n\n",
        "pNames": [
          "options"
        ],
        "pTypes": [
          "str-The mode of the measurements. Values can be `px` or `%`"
        ],
        "shortDesc": "getPosition",
        "retval": "obj"
      },
      "setMargins": {
        "desc": "Sets the margin of the component\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "str-`px` or `%`"
        ],
        "shortDesc": "setMargins"
      },
      "setPadding": {
        "desc": "Sets the padding component container\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the component width.",
          "num-Fraction of the component height. [0-1]",
          "num-Fraction of the component width. [0-1]",
          "num-Fraction of the component height. [0-1]",
          "str-The size thickness mode. Can be `px`"
        ],
        "shortDesc": "setPadding"
      },
      "setPosition": {
        "desc": "Sets the position of the component relative to its parent dimensions\n\n",
        "pNames": [
          "left",
          "top",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the screen height. [0-1]",
          "str-Unit of measurement. Can be `px` or `%` or any css unit of measurement."
        ],
        "shortDesc": "setPosition"
      },
      "setBorder": {
        "desc": "Sets the border line for the component container\n\n",
        "pNames": [
          "width",
          "clr",
          "style"
        ],
        "pTypes": [
          "num-Border-left thickness in pixels.",
          "str-Border color in hexadecimal form `#rrggbb`",
          "str-Border-styles. Values can be `dotted` `dashed` `solid` `double` `groove` `ridge` `inset` and `outset`. Default is `solid`"
        ],
        "shortDesc": "setBorder"
      },
      "setCornerRadius": {
        "desc": "Sets the corner radius of the component\n\n",
        "pNames": [
          "tl",
          "tr",
          "bl",
          "br",
          "mode"
        ],
        "pTypes": [
          "num-Top-Left border radius in pixels.",
          "num-Top-Right border radius in pixels.",
          "num-Bottom-Left border radius in pixels.",
          "num-Bottom-Right border radius in pixels.",
          "str-Unit. Values are `px` `rem` or `%`."
        ],
        "shortDesc": "setCornerRadius"
      },
      "bringForward": {
        "desc": "Bring this component forward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A negative value behaves like `sendBackward` method."
        ],
        "shortDesc": "bringForward"
      },
      "sendBackward": {
        "desc": "Bring this component backward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A positve value behaves like `bringForward` method."
        ],
        "shortDesc": "sendBackward"
      }
    }
  },
  "addSwitch": {
    "abbrev": "swt",
    "desc": "#addSwitch.md",
    "pNames": [
      "parent",
      "text",
      "options",
      "width",
      "height"
    ],
    "pTypes": [
      "obj-The parent layout where to add the Switch Component.",
      "str-The label text.",
      "str-A comma separated switch options. Options can be one or a combination of the following \\n Color: `Primary` `Secondary` `Default` \\n Icon Position: `Left` `Top` `Right` `Bottom` \\n Sizes: `Small` `Medium`",
      "num-Fraction of the screen width. [0-1]",
      "num-Fraction of the screen height. [0-1]"
    ],
    "retval": "obj-Switch Component",
    "shortDesc": "addSwitch",
    "subf": {
      "setOnTouch": {
        "desc": "Adds an event handler when the switch is touch\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "check "
            ],
            "pTypes": [
              "bin-The checked state of the switch control."
            ]
          }
        ],
        "shortDesc": "setOnTouch"
      },
      "setOnContextMenu": {
        "desc": "Adds a callback function on right click\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "event "
            ],
            "pTypes": [
              "obj-The pointer event object."
            ]
          }
        ],
        "shortDesc": "setOnContextMenu"
      },
      "animate": {
        "desc": "Animate the component\n\n",
        "pNames": [
          "anim",
          "duration"
        ],
        "pTypes": [
          "str-The type of animation. Here are the available values `bounce` `flash` `pulse` `rubberBand` `shakeX` `shakeY` `headShake` `swing` `tada` `wobble` `jello` `heartBeat` \\n Back Entrances `backInDown` `backInLeft` `backInRight` `backInUp` \\n Back Exits `backOutDown` `backOutLeft` `backOutRight` `backOutUp` \\n Bouncing Entrances `bounceIn` `bounceInDown` `bounceInLeft` `bounceInRight` `bounceInUp` \\n Bouncing exits `bounceOut` `bounceOutDown` `bounceOutLeft` `bounceOutRight` `bounceOutUp` \\n Fading entrances `fadeIn` `fadeInDown` `fadeInDownBig` `fadeInLeft` `fadeInLeftBig` `fadeInRight` `fadeInRightBig` `fadeInUp` `fadeInUpBig` `fadeInTopLeft` `fadeInTopRight` `fadeInBottomLeft` `fadeInBottomRight` \\n Fading exits `fadeOut` `fadeOutDown` `fadeOutDownBig` `fadeOutLeft` `fadeOutLeftBig` `fadeOutRight` `fadeOutRightBig` `fadeOutUp` `fadeOutUpBig` `fadeOutTopLeft` `fadeOutTopRight` `fadeOutBottomRight` `fadeOutBottomLeft` \\n Flippers `flip` `flipInX` `flipInY` `flipOutX` `flipOutY` \\n Lightspeed `lightSpeedInRight` `lightSpeedInLeft` `lightSpeedOutRight` `lightSpeedOutLeft` \\n Rotating Entrances `rotateIn` `rotateInDownLeft` `rotateInDownRight` `rotateInUpLeft` `rotateInUpRight` \\n Rotating Exits `rotateOut` `rotateOutDownLeft` `rotateOutDownRight` `rotateOutUpLeft` `rotateOutUpRight` \\n Specials `hinge` `jackInTheBox` `rollIn` `rollOut` \\n Zooming Entrances `zoomIn` `zoomInDown` `zoomInLeft` `zoomInRight` `zoomInUp` \\n Zooming Exits `zoomOut` `zoomOutDown` `zoomOutLeft` `zoomOutRight` `zoomOutUp` \\n Sliding Entrances `slideInDown` `slideInLeft` `slideInRight` `slideInUp` \\n Sliding Exits `slideOutDown` `slideOutLeft` `slideOutRight` `slideOutUp`.",
          "num-The time in milliseconds."
        ],
        "shortDesc": "animate"
      },
      "setSize": {
        "desc": "Sets the size of the component\n\n",
        "pNames": [
          "width",
          "height"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the parent height. [0-1]"
        ],
        "shortDesc": "setSize"
      },
      "show": {
        "desc": "Show the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "show"
      },
      "hide": {
        "desc": "Hide the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "hide"
      },
      "gone": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "gone"
      },
      "destroy": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "destroy"
      },
      "setScale": {
        "desc": "Sets the x and y scaling of the component\n\n",
        "pNames": [
          "x",
          "y"
        ],
        "pTypes": [
          "num-The x-scale of the component.Values less than `0` is smaller than the normal. While values greater than `1` is greater than the normal.",
          "num-The y-scale of the component. Values less than `1` is smaller than the normal. While vaues greater than `1` is greater than the normal."
        ],
        "shortDesc": "setScale"
      },
      "getPosition": {
        "desc": "Returns the position of the component. The return object is of the form `{ left, top, right, bottom\n\n",
        "pNames": [
          "options"
        ],
        "pTypes": [
          "str-The mode of the measurements. Values can be `px` or `%`"
        ],
        "shortDesc": "getPosition",
        "retval": "obj"
      },
      "setMargins": {
        "desc": "Sets the margin of the component\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "str-`px` or `%`"
        ],
        "shortDesc": "setMargins"
      },
      "setPadding": {
        "desc": "Sets the padding component container\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the component width.",
          "num-Fraction of the component height. [0-1]",
          "num-Fraction of the component width. [0-1]",
          "num-Fraction of the component height. [0-1]",
          "str-The size thickness mode. Can be `px`"
        ],
        "shortDesc": "setPadding"
      },
      "setPosition": {
        "desc": "Sets the position of the component relative to its parent dimensions\n\n",
        "pNames": [
          "left",
          "top",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the screen height. [0-1]",
          "str-Unit of measurement. Can be `px` or `%` or any css unit of measurement."
        ],
        "shortDesc": "setPosition"
      },
      "setBorder": {
        "desc": "Sets the border line for the component container\n\n",
        "pNames": [
          "width",
          "clr",
          "style"
        ],
        "pTypes": [
          "num-Border-left thickness in pixels.",
          "str-Border color in hexadecimal form `#rrggbb`",
          "str-Border-styles. Values can be `dotted` `dashed` `solid` `double` `groove` `ridge` `inset` and `outset`. Default is `solid`"
        ],
        "shortDesc": "setBorder"
      },
      "setCornerRadius": {
        "desc": "Sets the corner radius of the component\n\n",
        "pNames": [
          "tl",
          "tr",
          "bl",
          "br",
          "mode"
        ],
        "pTypes": [
          "num-Top-Left border radius in pixels.",
          "num-Top-Right border radius in pixels.",
          "num-Bottom-Left border radius in pixels.",
          "num-Bottom-Right border radius in pixels.",
          "str-Unit. Values are `px` `rem` or `%`."
        ],
        "shortDesc": "setCornerRadius"
      },
      "bringForward": {
        "desc": "Bring this component forward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A negative value behaves like `sendBackward` method."
        ],
        "shortDesc": "bringForward"
      },
      "sendBackward": {
        "desc": "Bring this component backward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A positve value behaves like `bringForward` method."
        ],
        "shortDesc": "sendBackward"
      }
    }
  },
  "addSwitchGroup": {
    "abbrev": "swg",
    "desc": "#addSwitchGroup.md",
    "pNames": [
      "parent",
      "list",
      "options",
      "width",
      "height"
    ],
    "pTypes": [
      "obj-The parent layout where to add the SwitchGroup Component.",
      "obj-The list items array whose elements can be `String` if items is text only, or `Array` of the form `[ \"icon\", \"label\" ]` if items is icon and text.",
      "str-A comma separated options for the SwitchGroup. Options can be \\n Icon: `Icon` \\n Color: `Primary` or `Secondary` \\n Container: `Elevated` or `Outlined` \\n Corner: `Square` \\n`Divider`",
      "num-Fraction of the screen width. [0-1]",
      "num-Fraction of the screen height. [0-1]"
    ],
    "retval": "obj-SwitchGroup Component",
    "shortDesc": "addSwitchGroup",
    "subf": {
      "setOnTouch": {
        "desc": "Sets a callback function when the switch item is touch\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "value ",
              "text ",
              "index ",
              "event "
            ],
            "pTypes": [
              "bin-The checked state of the switch item.",
              "str-The switch item label text.",
              "num-The index of the corresponding switch item.",
              "obj-The click event."
            ]
          }
        ],
        "shortDesc": "setOnTouch"
      },
      "setOnChange": {
        "desc": "Adds a callback function to be called whent there is a change of value\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "values "
            ],
            "pTypes": [
              "lst-An array of indexes corresponding to the checked switch items."
            ]
          }
        ],
        "shortDesc": "setOnChange"
      },
      "setValueByIndex": {
        "desc": "Sets the value of the corresponding item in the list\n\n",
        "pNames": [
          "index",
          "val"
        ],
        "pTypes": [
          "num-The index of the corresponding item.",
          "bin-A Values can be `true` or `false`"
        ],
        "shortDesc": "setValueByIndex"
      },
      "getValueByIndex": {
        "desc": "Returns whether an item is check or unchecked\n\n",
        "pNames": [
          "index"
        ],
        "pTypes": [
          "num-The index of the corresponding item."
        ],
        "shortDesc": "getValueByIndex",
        "retval": "bin"
      },
      "setList": {
        "desc": "Updates the list on the switchgroup component\n\n",
        "pNames": [
          "lst"
        ],
        "pTypes": [
          "obj-The list array or a comma separated list."
        ],
        "shortDesc": "setList"
      },
      "addItem": {
        "desc": "Adds or insert an item in the SwitchGroup list\n\n",
        "pNames": [
          "title",
          "icon",
          "value",
          "index"
        ],
        "pTypes": [
          "str-The title text.",
          "str-Material icon font.",
          "bin-The value of the item.",
          "num-The index in which to insert the item. Default is at the bottom of the list."
        ],
        "shortDesc": "addItem"
      },
      "removeItemByIndex": {
        "desc": "Removes an item in the SwitchGroup by its index\n\n",
        "pNames": [
          "index"
        ],
        "pTypes": [
          "num-The index of the corresponding item to remove."
        ],
        "shortDesc": "removeItemByIndex"
      },
      "removeItemByName": {
        "desc": "Removes an item in the SwitchGroup component by its title name\n\n",
        "pNames": [
          "title"
        ],
        "pTypes": [
          "str-The title text of the SwitchGroup item."
        ],
        "shortDesc": "removeItemByName"
      },
      "popItem": {
        "desc": "Removes the last item in the SwitchGroup list\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "popItem"
      },
      "shiftItem": {
        "desc": "Removes the first item in SwitchGroup list\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "shiftItem"
      },
      "setEnabled": {
        "desc": "Enable or disable an item in the switchgroup component\n\n",
        "pNames": [
          "index",
          "value"
        ],
        "pTypes": [
          "num-The index of the corresponding item in the list. You can also pass `Boolean` to enable or disable the switchgroup component.",
          "bin-Values can be `true` or `false`."
        ],
        "shortDesc": "setEnabled"
      },
      "getEnabled": {
        "desc": "Get the enabled state of an item in the switch group\n\n",
        "pNames": [
          "index"
        ],
        "pTypes": [
          "num-The index of the corresponding item in the switch group."
        ],
        "shortDesc": "getEnabled",
        "retval": "bin"
      },
      "setOnContextMenu": {
        "desc": "Adds a callback function on right click\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "text ",
              "index ",
              "event "
            ],
            "pTypes": [
              "str-The label text of the switchgroup item.",
              "num-The index of the corresponding switchgroup item.",
              "obj-The pointer event object."
            ]
          }
        ],
        "shortDesc": "setOnContextMenu"
      },
      "setCornerRadius": {
        "desc": "Sets the corner radius of the switchgroup container\n\n",
        "pNames": [
          "tl",
          "tr",
          "bl",
          "br",
          "mode"
        ],
        "pTypes": [
          "num-Top-left corner radius.",
          "num-Top-right corner radius.",
          "num-Bottom-left corner radius.",
          "num-Bottom-right corner radius.",
          "str-Unit. Values are `px` `rem` or `%`."
        ],
        "shortDesc": "setCornerRadius"
      },
      "animate": {
        "desc": "Animate the component\n\n",
        "pNames": [
          "anim",
          "duration"
        ],
        "pTypes": [
          "str-The type of animation. Here are the available values `bounce` `flash` `pulse` `rubberBand` `shakeX` `shakeY` `headShake` `swing` `tada` `wobble` `jello` `heartBeat` \\n Back Entrances `backInDown` `backInLeft` `backInRight` `backInUp` \\n Back Exits `backOutDown` `backOutLeft` `backOutRight` `backOutUp` \\n Bouncing Entrances `bounceIn` `bounceInDown` `bounceInLeft` `bounceInRight` `bounceInUp` \\n Bouncing exits `bounceOut` `bounceOutDown` `bounceOutLeft` `bounceOutRight` `bounceOutUp` \\n Fading entrances `fadeIn` `fadeInDown` `fadeInDownBig` `fadeInLeft` `fadeInLeftBig` `fadeInRight` `fadeInRightBig` `fadeInUp` `fadeInUpBig` `fadeInTopLeft` `fadeInTopRight` `fadeInBottomLeft` `fadeInBottomRight` \\n Fading exits `fadeOut` `fadeOutDown` `fadeOutDownBig` `fadeOutLeft` `fadeOutLeftBig` `fadeOutRight` `fadeOutRightBig` `fadeOutUp` `fadeOutUpBig` `fadeOutTopLeft` `fadeOutTopRight` `fadeOutBottomRight` `fadeOutBottomLeft` \\n Flippers `flip` `flipInX` `flipInY` `flipOutX` `flipOutY` \\n Lightspeed `lightSpeedInRight` `lightSpeedInLeft` `lightSpeedOutRight` `lightSpeedOutLeft` \\n Rotating Entrances `rotateIn` `rotateInDownLeft` `rotateInDownRight` `rotateInUpLeft` `rotateInUpRight` \\n Rotating Exits `rotateOut` `rotateOutDownLeft` `rotateOutDownRight` `rotateOutUpLeft` `rotateOutUpRight` \\n Specials `hinge` `jackInTheBox` `rollIn` `rollOut` \\n Zooming Entrances `zoomIn` `zoomInDown` `zoomInLeft` `zoomInRight` `zoomInUp` \\n Zooming Exits `zoomOut` `zoomOutDown` `zoomOutLeft` `zoomOutRight` `zoomOutUp` \\n Sliding Entrances `slideInDown` `slideInLeft` `slideInRight` `slideInUp` \\n Sliding Exits `slideOutDown` `slideOutLeft` `slideOutRight` `slideOutUp`.",
          "num-The time in milliseconds."
        ],
        "shortDesc": "animate"
      },
      "setSize": {
        "desc": "Sets the size of the component\n\n",
        "pNames": [
          "width",
          "height"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the parent height. [0-1]"
        ],
        "shortDesc": "setSize"
      },
      "show": {
        "desc": "Show the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "show"
      },
      "hide": {
        "desc": "Hide the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "hide"
      },
      "gone": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "gone"
      },
      "destroy": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "destroy"
      },
      "setScale": {
        "desc": "Sets the x and y scaling of the component\n\n",
        "pNames": [
          "x",
          "y"
        ],
        "pTypes": [
          "num-The x-scale of the component.Values less than `0` is smaller than the normal. While values greater than `1` is greater than the normal.",
          "num-The y-scale of the component. Values less than `1` is smaller than the normal. While vaues greater than `1` is greater than the normal."
        ],
        "shortDesc": "setScale"
      },
      "getPosition": {
        "desc": "Returns the position of the component. The return object is of the form `{ left, top, right, bottom\n\n",
        "pNames": [
          "options"
        ],
        "pTypes": [
          "str-The mode of the measurements. Values can be `px` or `%`"
        ],
        "shortDesc": "getPosition",
        "retval": "obj"
      },
      "setMargins": {
        "desc": "Sets the margin of the component\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "str-`px` or `%`"
        ],
        "shortDesc": "setMargins"
      },
      "setPadding": {
        "desc": "Sets the padding component container\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the component width.",
          "num-Fraction of the component height. [0-1]",
          "num-Fraction of the component width. [0-1]",
          "num-Fraction of the component height. [0-1]",
          "str-The size thickness mode. Can be `px`"
        ],
        "shortDesc": "setPadding"
      },
      "setPosition": {
        "desc": "Sets the position of the component relative to its parent dimensions\n\n",
        "pNames": [
          "left",
          "top",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the screen height. [0-1]",
          "str-Unit of measurement. Can be `px` or `%` or any css unit of measurement."
        ],
        "shortDesc": "setPosition"
      },
      "setBorder": {
        "desc": "Sets the border line for the component container\n\n",
        "pNames": [
          "width",
          "clr",
          "style"
        ],
        "pTypes": [
          "num-Border-left thickness in pixels.",
          "str-Border color in hexadecimal form `#rrggbb`",
          "str-Border-styles. Values can be `dotted` `dashed` `solid` `double` `groove` `ridge` `inset` and `outset`. Default is `solid`"
        ],
        "shortDesc": "setBorder"
      },
      "bringForward": {
        "desc": "Bring this component forward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A negative value behaves like `sendBackward` method."
        ],
        "shortDesc": "bringForward"
      },
      "sendBackward": {
        "desc": "Bring this component backward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A positve value behaves like `bringForward` method."
        ],
        "shortDesc": "sendBackward"
      }
    }
  },
  "addTabs": {
    "abbrev": "",
    "desc": "#addTabs.md",
    "pNames": [
      "parent",
      "list",
      "options",
      "width",
      "height"
    ],
    "pTypes": [
      "obj-The parent layout where to add the Tabs Component.",
      "lst-An array of tab names.",
      "str-A comma separated options for Tabs. \\n Enable swipe: `Swipeable` \\n Colors: `Primary` `Secondary` `Inherit` `Transparent` `Default` \\n Variant: `Standard` `Scrollable` `FullWidth` \\n Layout: `Linear`, `Absolute` \\nUtils: `Icon` `Center` `Paper`",
      "num-Fraction of the screen width. [0-1]",
      "num-Fraction of the screen height. [0-1]"
    ],
    "retval": "obj-Tabs Component",
    "shortDesc": "addTabs",
    "subf": {
      "setOnChange": {
        "desc": "Sets a callback function when the value of the tab changes\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "name ",
              "index "
            ],
            "pTypes": [
              "str-The tab name.",
              "num-The index of the corresponding tab."
            ]
          }
        ],
        "shortDesc": "setOnChange"
      },
      "setOnTouch": {
        "desc": "Add a callback function when a tab item i click\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "name ",
              "The "
            ],
            "pTypes": [
              "str-The tab name text.",
              "num-tab item index."
            ]
          }
        ],
        "shortDesc": "setOnTouch"
      },
      "setTabs": {
        "desc": "Sets the tab titles array\n\n",
        "pNames": [
          "tabs"
        ],
        "pTypes": [
          "lst-The tab titles array. See examples for format."
        ],
        "shortDesc": "setTabs"
      },
      "addTab": {
        "desc": "Add or insert a tab to the Tabs Component\n\n",
        "pNames": [
          "name",
          "icon",
          "index"
        ],
        "pTypes": [
          "str-The name of the tab.",
          "str-Material icon font.",
          "num-The index in which to insert the tab."
        ],
        "shortDesc": "addTab"
      },
      "setTitleText": {
        "desc": "Sets a new title for the corresponding tab\n\n",
        "pNames": [
          "index",
          "title"
        ],
        "pTypes": [
          "num-Index of the tab.",
          "str-The new title."
        ],
        "shortDesc": "setTitleText"
      },
      "setIcon": {
        "desc": "Sets an icon to a corresponding tab title\n\n",
        "pNames": [
          "index",
          "icon"
        ],
        "pTypes": [
          "num-The index of the tab.",
          "str-Material icon font."
        ],
        "shortDesc": "setIcon"
      },
      "removeTabByIndex": {
        "desc": "Removes a tab item by its corresponding index\n\n",
        "pNames": [
          "index"
        ],
        "pTypes": [
          "num-The index of the corresponding tab to remove."
        ],
        "shortDesc": "removeTabByIndex"
      },
      "removeTabByName": {
        "desc": "Removes a tab item by its corresponding name\n\n",
        "pNames": [
          "name"
        ],
        "pTypes": [
          "str-The name of the corresponding tab to remove."
        ],
        "shortDesc": "removeTabByName"
      },
      "getLayout": {
        "desc": "Returns the layout of the corresponding tab. You can then add components into the returned layout\n\n",
        "pNames": [
          "name"
        ],
        "pTypes": [
          "str-The name of the tab. You can also pass the index of the tab."
        ],
        "shortDesc": "getLayout",
        "retval": "obj-Layout Component"
      },
      "showTab": {
        "desc": "Show a tab panel by its corresponding name. This will make the tab in active state\n\n",
        "pNames": [
          "name"
        ],
        "pTypes": [
          "str-The name of the tab to be shown."
        ],
        "shortDesc": "showTab"
      },
      "showTabByIndex": {
        "desc": "Show a tab panel by its corresponding name. This will make the tab in active state\n\n",
        "pNames": [
          "index"
        ],
        "pTypes": [
          "num-The index of the tab to be shown."
        ],
        "shortDesc": "showTabByIndex"
      },
      "setEnabled": {
        "desc": "Enable or disable a tab item. Pass `index` as number if you want the corresponding tab index to be enabled or disabled\nPass `index` as Boolean, if you want to disable the entire Tabs component\n\n",
        "pNames": [
          "index",
          "value"
        ],
        "pTypes": [
          "num-The index of the corresponding tab. Pass `Boolean` if you want to disable the entire Tabs component.",
          "bin-Values can be `true` or `false`."
        ],
        "shortDesc": "setEnabled"
      },
      "getEnabled": {
        "desc": "Get the enabled state of a tab\n\n",
        "pNames": [
          "index"
        ],
        "pTypes": [
          "num-The index of the corresponding tab."
        ],
        "shortDesc": "getEnabled",
        "retval": "bin"
      },
      "setEnabledByName": {
        "desc": "Enable or disable a tab by its name\n\n",
        "pNames": [
          "name",
          "value"
        ],
        "pTypes": [
          "str-The name of the tab.",
          "bin-Values can be `true` or `false`."
        ],
        "shortDesc": "setEnabledByName"
      },
      "getEnabledByName": {
        "desc": "Get the enabled state of a tab by its name\n\n",
        "pNames": [
          "name"
        ],
        "pTypes": [
          "str-The name of the tab."
        ],
        "shortDesc": "getEnabledByName",
        "retval": "bin"
      },
      "showScrollButton": {
        "desc": "Determines the behavior of scroll buttons when tabs are set to `scrollable\n\n",
        "pNames": [
          "mode"
        ],
        "pTypes": [
          "str-Values can be \\n `auto` : will only present them when not all the items are visible \\n `desktop` : will only present them on medium and larger viewports \\n `on` : will always present them \\n `off` : will never present them."
        ],
        "shortDesc": "showScrollButton"
      },
      "getLayoutIndex": {
        "desc": "Get the index of the corresponding layout\n\n",
        "pNames": [
          "layout"
        ],
        "pTypes": [
          "obj-The layout to check."
        ],
        "shortDesc": "getLayoutIndex",
        "retval": "num"
      },
      "setOnContextMenu": {
        "desc": "Adds a callback function on right click\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "text ",
              "index ",
              "event "
            ],
            "pTypes": [
              "str-The text of the tab item.",
              "num-The index of the corresponding tab item.",
              "obj-The pointer event object."
            ]
          }
        ],
        "shortDesc": "setOnContextMenu"
      },
      "setCornerRadius": {
        "desc": "Sets the corner radius of the tab\n\n",
        "pNames": [
          "tl",
          "tr",
          "bl",
          "br",
          "mode"
        ],
        "pTypes": [
          "num-Top-left corner radius.",
          "num-Top-right corner radius.",
          "num-Bottom-left corner radius.",
          "num-Bottom-right corner radius.",
          "str-Unit. Values are `px` `rem` or `%`."
        ],
        "shortDesc": "setCornerRadius"
      },
      "setIndicatorStyle": {
        "desc": "Add a custom styling to the indicator color\n\n",
        "pNames": [
          "width",
          "thickness",
          "color",
          "radius"
        ],
        "pTypes": [
          "num-Fraction of the tab item width. This works only on `fullWidth` tab.",
          "num-Thickness in pixels.",
          "str-Hexadecimal color of the form `#rrggbb`.",
          "num-The corner radius in pixels."
        ],
        "shortDesc": "setIndicatorStyle"
      },
      "setTabPadding": {
        "desc": "Sets the padding of the tab items\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-The tab-item left padding.",
          "num-The tab-item top padding.",
          "num-The tab-item right padding.",
          "num-The tab-item bottom padding.",
          "str-Unit of measurement. Default is `px`. You can pass `%` `rem` `vw`."
        ],
        "shortDesc": "setTabPadding"
      },
      "animate": {
        "desc": "Animate the component\n\n",
        "pNames": [
          "anim",
          "duration"
        ],
        "pTypes": [
          "str-The type of animation. Here are the available values `bounce` `flash` `pulse` `rubberBand` `shakeX` `shakeY` `headShake` `swing` `tada` `wobble` `jello` `heartBeat` \\n Back Entrances `backInDown` `backInLeft` `backInRight` `backInUp` \\n Back Exits `backOutDown` `backOutLeft` `backOutRight` `backOutUp` \\n Bouncing Entrances `bounceIn` `bounceInDown` `bounceInLeft` `bounceInRight` `bounceInUp` \\n Bouncing exits `bounceOut` `bounceOutDown` `bounceOutLeft` `bounceOutRight` `bounceOutUp` \\n Fading entrances `fadeIn` `fadeInDown` `fadeInDownBig` `fadeInLeft` `fadeInLeftBig` `fadeInRight` `fadeInRightBig` `fadeInUp` `fadeInUpBig` `fadeInTopLeft` `fadeInTopRight` `fadeInBottomLeft` `fadeInBottomRight` \\n Fading exits `fadeOut` `fadeOutDown` `fadeOutDownBig` `fadeOutLeft` `fadeOutLeftBig` `fadeOutRight` `fadeOutRightBig` `fadeOutUp` `fadeOutUpBig` `fadeOutTopLeft` `fadeOutTopRight` `fadeOutBottomRight` `fadeOutBottomLeft` \\n Flippers `flip` `flipInX` `flipInY` `flipOutX` `flipOutY` \\n Lightspeed `lightSpeedInRight` `lightSpeedInLeft` `lightSpeedOutRight` `lightSpeedOutLeft` \\n Rotating Entrances `rotateIn` `rotateInDownLeft` `rotateInDownRight` `rotateInUpLeft` `rotateInUpRight` \\n Rotating Exits `rotateOut` `rotateOutDownLeft` `rotateOutDownRight` `rotateOutUpLeft` `rotateOutUpRight` \\n Specials `hinge` `jackInTheBox` `rollIn` `rollOut` \\n Zooming Entrances `zoomIn` `zoomInDown` `zoomInLeft` `zoomInRight` `zoomInUp` \\n Zooming Exits `zoomOut` `zoomOutDown` `zoomOutLeft` `zoomOutRight` `zoomOutUp` \\n Sliding Entrances `slideInDown` `slideInLeft` `slideInRight` `slideInUp` \\n Sliding Exits `slideOutDown` `slideOutLeft` `slideOutRight` `slideOutUp`.",
          "num-The time in milliseconds."
        ],
        "shortDesc": "animate"
      },
      "setSize": {
        "desc": "Sets the size of the component\n\n",
        "pNames": [
          "width",
          "height"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the parent height. [0-1]"
        ],
        "shortDesc": "setSize"
      },
      "show": {
        "desc": "Show the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "show"
      },
      "hide": {
        "desc": "Hide the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "hide"
      },
      "gone": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "gone"
      },
      "destroy": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "destroy"
      },
      "setScale": {
        "desc": "Sets the x and y scaling of the component\n\n",
        "pNames": [
          "x",
          "y"
        ],
        "pTypes": [
          "num-The x-scale of the component.Values less than `0` is smaller than the normal. While values greater than `1` is greater than the normal.",
          "num-The y-scale of the component. Values less than `1` is smaller than the normal. While vaues greater than `1` is greater than the normal."
        ],
        "shortDesc": "setScale"
      },
      "getPosition": {
        "desc": "Returns the position of the component. The return object is of the form `{ left, top, right, bottom\n\n",
        "pNames": [
          "options"
        ],
        "pTypes": [
          "str-The mode of the measurements. Values can be `px` or `%`"
        ],
        "shortDesc": "getPosition",
        "retval": "obj"
      },
      "setMargins": {
        "desc": "Sets the margin of the component\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "str-`px` or `%`"
        ],
        "shortDesc": "setMargins"
      },
      "setPadding": {
        "desc": "Sets the padding component container\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the component width.",
          "num-Fraction of the component height. [0-1]",
          "num-Fraction of the component width. [0-1]",
          "num-Fraction of the component height. [0-1]",
          "str-The size thickness mode. Can be `px`"
        ],
        "shortDesc": "setPadding"
      },
      "setPosition": {
        "desc": "Sets the position of the component relative to its parent dimensions\n\n",
        "pNames": [
          "left",
          "top",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the screen height. [0-1]",
          "str-Unit of measurement. Can be `px` or `%` or any css unit of measurement."
        ],
        "shortDesc": "setPosition"
      },
      "setBorder": {
        "desc": "Sets the border line for the component container\n\n",
        "pNames": [
          "width",
          "clr",
          "style"
        ],
        "pTypes": [
          "num-Border-left thickness in pixels.",
          "str-Border color in hexadecimal form `#rrggbb`",
          "str-Border-styles. Values can be `dotted` `dashed` `solid` `double` `groove` `ridge` `inset` and `outset`. Default is `solid`"
        ],
        "shortDesc": "setBorder"
      },
      "bringForward": {
        "desc": "Bring this component forward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A negative value behaves like `sendBackward` method."
        ],
        "shortDesc": "bringForward"
      },
      "sendBackward": {
        "desc": "Bring this component backward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A positve value behaves like `bringForward` method."
        ],
        "shortDesc": "sendBackward"
      }
    }
  },
  "addText": {
    "abbrev": "txt",
    "desc": "#addText.md",
    "pNames": [
      "parent",
      "text",
      "options",
      "width",
      "height"
    ],
    "pTypes": [
      "obj-The layout control where to add the text control",
      "str-The text to be displayed on the text control",
      "str-A comma separated string. Options can be one or a combination of the following: \\n Variants: `H1` `H2` `H3` `H4` `H5` `H6` `body1` `body2` `overline` `subtitle1` `subtitle2` `button` `caption`.\\nLines: `Singleline` `Multiline`.\\nAlignment: `Left` `Center` `Right` `Justify`.\\nColor: `Primary` `Secondary` `Error`.\\nFormat `Html` `Icon` `Italize` `Monospace` `Bold` `Underline` \\n Utils: `Touchable`",
      "num-Fraction of the screen width",
      "num-Fraction of the screen height"
    ],
    "retval": "obj-Text Component",
    "shortDesc": "addText",
    "subf": {
      "setHtml": {
        "desc": "Sets an html on the text control\n\n",
        "pNames": [
          "html"
        ],
        "pTypes": [
          "str-An html string"
        ],
        "shortDesc": "setHtml"
      },
      "getHtml": {
        "desc": "Returns the html text\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "getHtml",
        "retval": "str"
      },
      "setTextShadow": {
        "desc": "Sets a shadow on the text in a text control\n\n",
        "pNames": [
          "radius",
          "dx",
          "dy",
          "color"
        ],
        "pTypes": [
          "num-The radius in pixels",
          "num-X-offset of the shadow",
          "num-Y-offset of the shadow",
          "obj-A hexadecimal color e.g. `#aarrggbb`"
        ],
        "shortDesc": "setTextShadow"
      },
      "setOnTouch": {
        "desc": "Adds a callback handler when the component is touch\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "event "
            ],
            "pTypes": [
              "obj-The click event object."
            ]
          }
        ],
        "shortDesc": "setOnTouch"
      },
      "setOnContextMenu": {
        "desc": "Adds a callback function on right click\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "event "
            ],
            "pTypes": [
              "obj-The pointer event object."
            ]
          }
        ],
        "shortDesc": "setOnContextMenu"
      },
      "animate": {
        "desc": "Animate the component\n\n",
        "pNames": [
          "anim",
          "duration"
        ],
        "pTypes": [
          "str-The type of animation. Here are the available values `bounce` `flash` `pulse` `rubberBand` `shakeX` `shakeY` `headShake` `swing` `tada` `wobble` `jello` `heartBeat` \\n Back Entrances `backInDown` `backInLeft` `backInRight` `backInUp` \\n Back Exits `backOutDown` `backOutLeft` `backOutRight` `backOutUp` \\n Bouncing Entrances `bounceIn` `bounceInDown` `bounceInLeft` `bounceInRight` `bounceInUp` \\n Bouncing exits `bounceOut` `bounceOutDown` `bounceOutLeft` `bounceOutRight` `bounceOutUp` \\n Fading entrances `fadeIn` `fadeInDown` `fadeInDownBig` `fadeInLeft` `fadeInLeftBig` `fadeInRight` `fadeInRightBig` `fadeInUp` `fadeInUpBig` `fadeInTopLeft` `fadeInTopRight` `fadeInBottomLeft` `fadeInBottomRight` \\n Fading exits `fadeOut` `fadeOutDown` `fadeOutDownBig` `fadeOutLeft` `fadeOutLeftBig` `fadeOutRight` `fadeOutRightBig` `fadeOutUp` `fadeOutUpBig` `fadeOutTopLeft` `fadeOutTopRight` `fadeOutBottomRight` `fadeOutBottomLeft` \\n Flippers `flip` `flipInX` `flipInY` `flipOutX` `flipOutY` \\n Lightspeed `lightSpeedInRight` `lightSpeedInLeft` `lightSpeedOutRight` `lightSpeedOutLeft` \\n Rotating Entrances `rotateIn` `rotateInDownLeft` `rotateInDownRight` `rotateInUpLeft` `rotateInUpRight` \\n Rotating Exits `rotateOut` `rotateOutDownLeft` `rotateOutDownRight` `rotateOutUpLeft` `rotateOutUpRight` \\n Specials `hinge` `jackInTheBox` `rollIn` `rollOut` \\n Zooming Entrances `zoomIn` `zoomInDown` `zoomInLeft` `zoomInRight` `zoomInUp` \\n Zooming Exits `zoomOut` `zoomOutDown` `zoomOutLeft` `zoomOutRight` `zoomOutUp` \\n Sliding Entrances `slideInDown` `slideInLeft` `slideInRight` `slideInUp` \\n Sliding Exits `slideOutDown` `slideOutLeft` `slideOutRight` `slideOutUp`.",
          "num-The time in milliseconds."
        ],
        "shortDesc": "animate"
      },
      "setSize": {
        "desc": "Sets the size of the component\n\n",
        "pNames": [
          "width",
          "height"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the parent height. [0-1]"
        ],
        "shortDesc": "setSize"
      },
      "show": {
        "desc": "Show the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "show"
      },
      "hide": {
        "desc": "Hide the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "hide"
      },
      "gone": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "gone"
      },
      "destroy": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "destroy"
      },
      "setScale": {
        "desc": "Sets the x and y scaling of the component\n\n",
        "pNames": [
          "x",
          "y"
        ],
        "pTypes": [
          "num-The x-scale of the component.Values less than `0` is smaller than the normal. While values greater than `1` is greater than the normal.",
          "num-The y-scale of the component. Values less than `1` is smaller than the normal. While vaues greater than `1` is greater than the normal."
        ],
        "shortDesc": "setScale"
      },
      "getPosition": {
        "desc": "Returns the position of the component. The return object is of the form `{ left, top, right, bottom\n\n",
        "pNames": [
          "options"
        ],
        "pTypes": [
          "str-The mode of the measurements. Values can be `px` or `%`"
        ],
        "shortDesc": "getPosition",
        "retval": "obj"
      },
      "setMargins": {
        "desc": "Sets the margin of the component\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "str-`px` or `%`"
        ],
        "shortDesc": "setMargins"
      },
      "setPadding": {
        "desc": "Sets the padding component container\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the component width.",
          "num-Fraction of the component height. [0-1]",
          "num-Fraction of the component width. [0-1]",
          "num-Fraction of the component height. [0-1]",
          "str-The size thickness mode. Can be `px`"
        ],
        "shortDesc": "setPadding"
      },
      "setPosition": {
        "desc": "Sets the position of the component relative to its parent dimensions\n\n",
        "pNames": [
          "left",
          "top",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the screen height. [0-1]",
          "str-Unit of measurement. Can be `px` or `%` or any css unit of measurement."
        ],
        "shortDesc": "setPosition"
      },
      "setBorder": {
        "desc": "Sets the border line for the component container\n\n",
        "pNames": [
          "width",
          "clr",
          "style"
        ],
        "pTypes": [
          "num-Border-left thickness in pixels.",
          "str-Border color in hexadecimal form `#rrggbb`",
          "str-Border-styles. Values can be `dotted` `dashed` `solid` `double` `groove` `ridge` `inset` and `outset`. Default is `solid`"
        ],
        "shortDesc": "setBorder"
      },
      "setCornerRadius": {
        "desc": "Sets the corner radius of the component\n\n",
        "pNames": [
          "tl",
          "tr",
          "bl",
          "br",
          "mode"
        ],
        "pTypes": [
          "num-Top-Left border radius in pixels.",
          "num-Top-Right border radius in pixels.",
          "num-Bottom-Left border radius in pixels.",
          "num-Bottom-Right border radius in pixels.",
          "str-Unit. Values are `px` `rem` or `%`."
        ],
        "shortDesc": "setCornerRadius"
      },
      "bringForward": {
        "desc": "Bring this component forward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A negative value behaves like `sendBackward` method."
        ],
        "shortDesc": "bringForward"
      },
      "sendBackward": {
        "desc": "Bring this component backward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A positve value behaves like `bringForward` method."
        ],
        "shortDesc": "sendBackward"
      }
    }
  },
  "addTextField": {
    "abbrev": "tfd",
    "desc": "#addTextField.md",
    "pNames": [
      "parent",
      "text",
      "options",
      "width",
      "height"
    ],
    "pTypes": [
      "obj-The layout where to add the TextField Component.",
      "str-The initial value of the TextField",
      "str-A comma separated options for the TextField Component. \\n Color: `Primary` or `Secondary` \\n Sizes: `Small` or `Medium` \\n Type: `Text` `Password` `Email` `Search` `Number` `Date` `Time` or `DateTime` \\n Variant: `Standard` `Filled` or `Outlined` \\n Utils: `Autofocus`",
      "num-Fraction of the screen width.",
      "num-Fraction of the screen height."
    ],
    "retval": "obj-TextField Component",
    "shortDesc": "addTextField",
    "subf": {
      "setOnEnter": {
        "desc": "Sets a callback function on `enter` or `submit` event\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "text "
            ],
            "pTypes": [
              "str-The text value of the input."
            ]
          }
        ],
        "shortDesc": "setOnEnter"
      },
      "setOnChange": {
        "desc": "Sets a callback function on `values changes` event\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "text "
            ],
            "pTypes": [
              "str-The text value of the input."
            ]
          }
        ],
        "shortDesc": "setOnChange"
      },
      "setOnFocus": {
        "desc": "Adds a callback function when the textfield is focus or blur\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "focus "
            ],
            "pTypes": [
              "bin-The focus state of the input component."
            ]
          }
        ],
        "shortDesc": "setOnFocus"
      },
      "setRows": {
        "desc": "Sets the minimum and maximum number of rows on a multiline type TextField\n\n",
        "pNames": [
          "min",
          "max"
        ],
        "pTypes": [
          "num-The minimum number of rows.",
          "num-The maximum number of rows."
        ],
        "shortDesc": "setRows"
      },
      "setStartAdornment": {
        "desc": "Set a start adornment control into the TextField Component\n\n",
        "pNames": [
          "text",
          "type"
        ],
        "pTypes": [
          "str-Text or material icon font.",
          "str-A comma separated options for start adornment control. Options can be \\n `Icon` : If the adornment is an icon. \\n `Touchable` : If the adornment is touchable."
        ],
        "shortDesc": "setStartAdornment"
      },
      "setStartAdornmentOnTouch": {
        "desc": "Add a callback handler when the start adornment control is touch\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          ""
        ],
        "shortDesc": "setStartAdornmentOnTouch"
      },
      "getStartAdornment": {
        "desc": "Returns the start adornment text\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "getStartAdornment",
        "retval": "str"
      },
      "setEndAdornment": {
        "desc": "Add an end adornment control into the TextField Component\n\n",
        "pNames": [
          "text",
          "type"
        ],
        "pTypes": [
          "str-Text or material icon font.",
          "str-A comma separated options for end adornment control. Options can be \\n `Icon` : If the adornment is an icon. \\n `Touchable` : If the adornment is touchable."
        ],
        "shortDesc": "setEndAdornment"
      },
      "setEndAdornmentOnTouch": {
        "desc": "Add a callback handler when the end adornment control is touch\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          ""
        ],
        "shortDesc": "setEndAdornmentOnTouch"
      },
      "getEndAdornment": {
        "desc": "Returns the end adornment text\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "getEndAdornment",
        "retval": "str"
      },
      "setOnTouch": {
        "desc": "Adds a callback handler when the component is touch\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "event "
            ],
            "pTypes": [
              "obj-The click event object."
            ]
          }
        ],
        "shortDesc": "setOnTouch"
      },
      "setOnContextMenu": {
        "desc": "Adds a callback function on right click\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "event "
            ],
            "pTypes": [
              "obj-The pointer event object."
            ]
          }
        ],
        "shortDesc": "setOnContextMenu"
      },
      "animate": {
        "desc": "Animate the component\n\n",
        "pNames": [
          "anim",
          "duration"
        ],
        "pTypes": [
          "str-The type of animation. Here are the available values `bounce` `flash` `pulse` `rubberBand` `shakeX` `shakeY` `headShake` `swing` `tada` `wobble` `jello` `heartBeat` \\n Back Entrances `backInDown` `backInLeft` `backInRight` `backInUp` \\n Back Exits `backOutDown` `backOutLeft` `backOutRight` `backOutUp` \\n Bouncing Entrances `bounceIn` `bounceInDown` `bounceInLeft` `bounceInRight` `bounceInUp` \\n Bouncing exits `bounceOut` `bounceOutDown` `bounceOutLeft` `bounceOutRight` `bounceOutUp` \\n Fading entrances `fadeIn` `fadeInDown` `fadeInDownBig` `fadeInLeft` `fadeInLeftBig` `fadeInRight` `fadeInRightBig` `fadeInUp` `fadeInUpBig` `fadeInTopLeft` `fadeInTopRight` `fadeInBottomLeft` `fadeInBottomRight` \\n Fading exits `fadeOut` `fadeOutDown` `fadeOutDownBig` `fadeOutLeft` `fadeOutLeftBig` `fadeOutRight` `fadeOutRightBig` `fadeOutUp` `fadeOutUpBig` `fadeOutTopLeft` `fadeOutTopRight` `fadeOutBottomRight` `fadeOutBottomLeft` \\n Flippers `flip` `flipInX` `flipInY` `flipOutX` `flipOutY` \\n Lightspeed `lightSpeedInRight` `lightSpeedInLeft` `lightSpeedOutRight` `lightSpeedOutLeft` \\n Rotating Entrances `rotateIn` `rotateInDownLeft` `rotateInDownRight` `rotateInUpLeft` `rotateInUpRight` \\n Rotating Exits `rotateOut` `rotateOutDownLeft` `rotateOutDownRight` `rotateOutUpLeft` `rotateOutUpRight` \\n Specials `hinge` `jackInTheBox` `rollIn` `rollOut` \\n Zooming Entrances `zoomIn` `zoomInDown` `zoomInLeft` `zoomInRight` `zoomInUp` \\n Zooming Exits `zoomOut` `zoomOutDown` `zoomOutLeft` `zoomOutRight` `zoomOutUp` \\n Sliding Entrances `slideInDown` `slideInLeft` `slideInRight` `slideInUp` \\n Sliding Exits `slideOutDown` `slideOutLeft` `slideOutRight` `slideOutUp`.",
          "num-The time in milliseconds."
        ],
        "shortDesc": "animate"
      },
      "setSize": {
        "desc": "Sets the size of the component\n\n",
        "pNames": [
          "width",
          "height"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the parent height. [0-1]"
        ],
        "shortDesc": "setSize"
      },
      "show": {
        "desc": "Show the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "show"
      },
      "hide": {
        "desc": "Hide the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "hide"
      },
      "gone": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "gone"
      },
      "destroy": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "destroy"
      },
      "setScale": {
        "desc": "Sets the x and y scaling of the component\n\n",
        "pNames": [
          "x",
          "y"
        ],
        "pTypes": [
          "num-The x-scale of the component.Values less than `0` is smaller than the normal. While values greater than `1` is greater than the normal.",
          "num-The y-scale of the component. Values less than `1` is smaller than the normal. While vaues greater than `1` is greater than the normal."
        ],
        "shortDesc": "setScale"
      },
      "getPosition": {
        "desc": "Returns the position of the component. The return object is of the form `{ left, top, right, bottom\n\n",
        "pNames": [
          "options"
        ],
        "pTypes": [
          "str-The mode of the measurements. Values can be `px` or `%`"
        ],
        "shortDesc": "getPosition",
        "retval": "obj"
      },
      "setMargins": {
        "desc": "Sets the margin of the component\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "str-`px` or `%`"
        ],
        "shortDesc": "setMargins"
      },
      "setPadding": {
        "desc": "Sets the padding component container\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the component width.",
          "num-Fraction of the component height. [0-1]",
          "num-Fraction of the component width. [0-1]",
          "num-Fraction of the component height. [0-1]",
          "str-The size thickness mode. Can be `px`"
        ],
        "shortDesc": "setPadding"
      },
      "setPosition": {
        "desc": "Sets the position of the component relative to its parent dimensions\n\n",
        "pNames": [
          "left",
          "top",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the screen height. [0-1]",
          "str-Unit of measurement. Can be `px` or `%` or any css unit of measurement."
        ],
        "shortDesc": "setPosition"
      },
      "setBorder": {
        "desc": "Sets the border line for the component container\n\n",
        "pNames": [
          "width",
          "clr",
          "style"
        ],
        "pTypes": [
          "num-Border-left thickness in pixels.",
          "str-Border color in hexadecimal form `#rrggbb`",
          "str-Border-styles. Values can be `dotted` `dashed` `solid` `double` `groove` `ridge` `inset` and `outset`. Default is `solid`"
        ],
        "shortDesc": "setBorder"
      },
      "setCornerRadius": {
        "desc": "Sets the corner radius of the component\n\n",
        "pNames": [
          "tl",
          "tr",
          "bl",
          "br",
          "mode"
        ],
        "pTypes": [
          "num-Top-Left border radius in pixels.",
          "num-Top-Right border radius in pixels.",
          "num-Bottom-Left border radius in pixels.",
          "num-Bottom-Right border radius in pixels.",
          "str-Unit. Values are `px` `rem` or `%`."
        ],
        "shortDesc": "setCornerRadius"
      },
      "bringForward": {
        "desc": "Bring this component forward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A negative value behaves like `sendBackward` method."
        ],
        "shortDesc": "bringForward"
      },
      "sendBackward": {
        "desc": "Bring this component backward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A positve value behaves like `bringForward` method."
        ],
        "shortDesc": "sendBackward"
      }
    }
  },
  "addTimePicker": {
    "abbrev": "tpk",
    "desc": "#addTimePicker.md",
    "pNames": [
      "time",
      "options"
    ],
    "pTypes": [
      "str-A default time value to which the timepicker begins. Value is of the form `HH:mm`",
      "str-A comma separated options for the time picker. Options can be `Portrait` `24H` `12H`"
    ],
    "retval": "obj-TimePicker Component",
    "shortDesc": "addTimePicker",
    "subf": {
      "show": {
        "desc": "Show the date picker the dialog\n\nHide the date picker dialog\n\nSets a callback function to execute when date picker dialog is submitted\n\nSets the format of the date to be passed into the onSelect callback\n\nGet the current visibility of the date picker\n\n",
        "pNames": [
          "callback",
          "format"
        ],
        "pTypes": [
          {
            "pNames": [
              "value "
            ],
            "pTypes": [
              "str-The selected time of the form `HH:MM:SS`. Change the format by setting the `format` property."
            ]
          },
          "str-A time format. Can be of the form \\n Hour formats \\n `H` : 0 1 ... 22 23 \\n `HH` : \t00 01 ... 22 23 \\n `h` : 1 2 ... 11 12 \\n `hh` : \t01 02 ... 11 12 \\n Minute formats \\n `m` : \t0 1 ... 58 59 \\n `mm` : 00 01 ... 58 59 \\n AM/PM \\n `A` : AM or PM \\n `a` : am pm"
        ],
        "shortDesc": "show",
        "retval": "bin"
      }
    }
  },
  "addTreeView": {
    "abbrev": "trv",
    "desc": "#addTreeView.md",
    "pNames": [
      "parent",
      "list",
      "options",
      "width",
      "height"
    ],
    "pTypes": [
      "obj-The parent layout where to add the TreeView component.",
      "obj-An object of the treeview items. See example below.",
      "str-A comma separated TreeView options.",
      "num-Fraction of the screen width.",
      "num-Fraction of the screen height."
    ],
    "retval": "obj-TreeView Component",
    "shortDesc": "addTreeView",
    "subf": {
      "setOnTouch": {
        "desc": "Add a on touch handler to the TreeView item when click\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "value ",
              "path "
            ],
            "pTypes": [
              "str-The selected tree item.",
              "str-The complete path of the tree item."
            ]
          }
        ],
        "shortDesc": "setOnTouch"
      },
      "setList": {
        "desc": "Updates the list items of the TreeView component\n\n",
        "pNames": [
          "obj"
        ],
        "pTypes": [
          "obj-The list object of the treeview items. See example above."
        ],
        "shortDesc": "setList"
      },
      "addItem": {
        "desc": "Add a tree items to the tree view\n\n",
        "pNames": [
          "name",
          "obj"
        ],
        "pTypes": [
          "str-The label text for the new item.",
          "obj-See list object for more info."
        ],
        "shortDesc": "addItem"
      },
      "getItem": {
        "desc": "Returns the list items object of a given parent tree item name\n\n",
        "pNames": [
          "name"
        ],
        "pTypes": [
          "str-The parent name of the tree items."
        ],
        "shortDesc": "getItem",
        "retval": "obj"
      },
      "setOnContextMenu": {
        "desc": "Adds a callback function on right click\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "event "
            ],
            "pTypes": [
              "obj-The pointer event object."
            ]
          }
        ],
        "shortDesc": "setOnContextMenu"
      },
      "animate": {
        "desc": "Animate the component\n\n",
        "pNames": [
          "anim",
          "duration"
        ],
        "pTypes": [
          "str-The type of animation. Here are the available values `bounce` `flash` `pulse` `rubberBand` `shakeX` `shakeY` `headShake` `swing` `tada` `wobble` `jello` `heartBeat` \\n Back Entrances `backInDown` `backInLeft` `backInRight` `backInUp` \\n Back Exits `backOutDown` `backOutLeft` `backOutRight` `backOutUp` \\n Bouncing Entrances `bounceIn` `bounceInDown` `bounceInLeft` `bounceInRight` `bounceInUp` \\n Bouncing exits `bounceOut` `bounceOutDown` `bounceOutLeft` `bounceOutRight` `bounceOutUp` \\n Fading entrances `fadeIn` `fadeInDown` `fadeInDownBig` `fadeInLeft` `fadeInLeftBig` `fadeInRight` `fadeInRightBig` `fadeInUp` `fadeInUpBig` `fadeInTopLeft` `fadeInTopRight` `fadeInBottomLeft` `fadeInBottomRight` \\n Fading exits `fadeOut` `fadeOutDown` `fadeOutDownBig` `fadeOutLeft` `fadeOutLeftBig` `fadeOutRight` `fadeOutRightBig` `fadeOutUp` `fadeOutUpBig` `fadeOutTopLeft` `fadeOutTopRight` `fadeOutBottomRight` `fadeOutBottomLeft` \\n Flippers `flip` `flipInX` `flipInY` `flipOutX` `flipOutY` \\n Lightspeed `lightSpeedInRight` `lightSpeedInLeft` `lightSpeedOutRight` `lightSpeedOutLeft` \\n Rotating Entrances `rotateIn` `rotateInDownLeft` `rotateInDownRight` `rotateInUpLeft` `rotateInUpRight` \\n Rotating Exits `rotateOut` `rotateOutDownLeft` `rotateOutDownRight` `rotateOutUpLeft` `rotateOutUpRight` \\n Specials `hinge` `jackInTheBox` `rollIn` `rollOut` \\n Zooming Entrances `zoomIn` `zoomInDown` `zoomInLeft` `zoomInRight` `zoomInUp` \\n Zooming Exits `zoomOut` `zoomOutDown` `zoomOutLeft` `zoomOutRight` `zoomOutUp` \\n Sliding Entrances `slideInDown` `slideInLeft` `slideInRight` `slideInUp` \\n Sliding Exits `slideOutDown` `slideOutLeft` `slideOutRight` `slideOutUp`.",
          "num-The time in milliseconds."
        ],
        "shortDesc": "animate"
      },
      "setSize": {
        "desc": "Sets the size of the component\n\n",
        "pNames": [
          "width",
          "height"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the parent height. [0-1]"
        ],
        "shortDesc": "setSize"
      },
      "show": {
        "desc": "Show the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "show"
      },
      "hide": {
        "desc": "Hide the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "hide"
      },
      "gone": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "gone"
      },
      "destroy": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "destroy"
      },
      "setScale": {
        "desc": "Sets the x and y scaling of the component\n\n",
        "pNames": [
          "x",
          "y"
        ],
        "pTypes": [
          "num-The x-scale of the component.Values less than `0` is smaller than the normal. While values greater than `1` is greater than the normal.",
          "num-The y-scale of the component. Values less than `1` is smaller than the normal. While vaues greater than `1` is greater than the normal."
        ],
        "shortDesc": "setScale"
      },
      "getPosition": {
        "desc": "Returns the position of the component. The return object is of the form `{ left, top, right, bottom\n\n",
        "pNames": [
          "options"
        ],
        "pTypes": [
          "str-The mode of the measurements. Values can be `px` or `%`"
        ],
        "shortDesc": "getPosition",
        "retval": "obj"
      },
      "setMargins": {
        "desc": "Sets the margin of the component\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "str-`px` or `%`"
        ],
        "shortDesc": "setMargins"
      },
      "setPadding": {
        "desc": "Sets the padding component container\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the component width.",
          "num-Fraction of the component height. [0-1]",
          "num-Fraction of the component width. [0-1]",
          "num-Fraction of the component height. [0-1]",
          "str-The size thickness mode. Can be `px`"
        ],
        "shortDesc": "setPadding"
      },
      "setPosition": {
        "desc": "Sets the position of the component relative to its parent dimensions\n\n",
        "pNames": [
          "left",
          "top",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the screen height. [0-1]",
          "str-Unit of measurement. Can be `px` or `%` or any css unit of measurement."
        ],
        "shortDesc": "setPosition"
      },
      "setBorder": {
        "desc": "Sets the border line for the component container\n\n",
        "pNames": [
          "width",
          "clr",
          "style"
        ],
        "pTypes": [
          "num-Border-left thickness in pixels.",
          "str-Border color in hexadecimal form `#rrggbb`",
          "str-Border-styles. Values can be `dotted` `dashed` `solid` `double` `groove` `ridge` `inset` and `outset`. Default is `solid`"
        ],
        "shortDesc": "setBorder"
      },
      "setCornerRadius": {
        "desc": "Sets the corner radius of the component\n\n",
        "pNames": [
          "tl",
          "tr",
          "bl",
          "br",
          "mode"
        ],
        "pTypes": [
          "num-Top-Left border radius in pixels.",
          "num-Top-Right border radius in pixels.",
          "num-Bottom-Left border radius in pixels.",
          "num-Bottom-Right border radius in pixels.",
          "str-Unit. Values are `px` `rem` or `%`."
        ],
        "shortDesc": "setCornerRadius"
      },
      "bringForward": {
        "desc": "Bring this component forward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A negative value behaves like `sendBackward` method."
        ],
        "shortDesc": "bringForward"
      },
      "sendBackward": {
        "desc": "Bring this component backward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A positve value behaves like `bringForward` method."
        ],
        "shortDesc": "sendBackward"
      }
    }
  },
  "addWebView": {
    "abbrev": "web",
    "desc": "#addWebView.md",
    "pNames": [
      "parent",
      "url",
      "options",
      "width",
      "height"
    ],
    "pTypes": [
      "obj-The parent layout where to add the WebView component.",
      "str-The url of the website.",
      "str-A comma separated options for WebView.",
      "num-Fraction of the parent width.",
      "num-Fraction of the parent height."
    ],
    "retval": "obj-WebView Component",
    "shortDesc": "addWebView",
    "subf": {
      "setOnLoad": {
        "desc": "Adds a event handler for onload event\n\n\nThe example above will call the function `Hello` defined in the WebView passing\nthe three arguments which is a text, number and a boolean\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          ""
        ],
        "shortDesc": "setOnLoad"
      },
      "setOnTouch": {
        "desc": "Adds a callback handler when the component is touch\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "event "
            ],
            "pTypes": [
              "obj-The click event object."
            ]
          }
        ],
        "shortDesc": "setOnTouch"
      },
      "setOnContextMenu": {
        "desc": "Adds a callback function on right click\n\n",
        "pNames": [
          "callback"
        ],
        "pTypes": [
          {
            "pNames": [
              "event "
            ],
            "pTypes": [
              "obj-The pointer event object."
            ]
          }
        ],
        "shortDesc": "setOnContextMenu"
      },
      "animate": {
        "desc": "Animate the component\n\n",
        "pNames": [
          "anim",
          "duration"
        ],
        "pTypes": [
          "str-The type of animation. Here are the available values `bounce` `flash` `pulse` `rubberBand` `shakeX` `shakeY` `headShake` `swing` `tada` `wobble` `jello` `heartBeat` \\n Back Entrances `backInDown` `backInLeft` `backInRight` `backInUp` \\n Back Exits `backOutDown` `backOutLeft` `backOutRight` `backOutUp` \\n Bouncing Entrances `bounceIn` `bounceInDown` `bounceInLeft` `bounceInRight` `bounceInUp` \\n Bouncing exits `bounceOut` `bounceOutDown` `bounceOutLeft` `bounceOutRight` `bounceOutUp` \\n Fading entrances `fadeIn` `fadeInDown` `fadeInDownBig` `fadeInLeft` `fadeInLeftBig` `fadeInRight` `fadeInRightBig` `fadeInUp` `fadeInUpBig` `fadeInTopLeft` `fadeInTopRight` `fadeInBottomLeft` `fadeInBottomRight` \\n Fading exits `fadeOut` `fadeOutDown` `fadeOutDownBig` `fadeOutLeft` `fadeOutLeftBig` `fadeOutRight` `fadeOutRightBig` `fadeOutUp` `fadeOutUpBig` `fadeOutTopLeft` `fadeOutTopRight` `fadeOutBottomRight` `fadeOutBottomLeft` \\n Flippers `flip` `flipInX` `flipInY` `flipOutX` `flipOutY` \\n Lightspeed `lightSpeedInRight` `lightSpeedInLeft` `lightSpeedOutRight` `lightSpeedOutLeft` \\n Rotating Entrances `rotateIn` `rotateInDownLeft` `rotateInDownRight` `rotateInUpLeft` `rotateInUpRight` \\n Rotating Exits `rotateOut` `rotateOutDownLeft` `rotateOutDownRight` `rotateOutUpLeft` `rotateOutUpRight` \\n Specials `hinge` `jackInTheBox` `rollIn` `rollOut` \\n Zooming Entrances `zoomIn` `zoomInDown` `zoomInLeft` `zoomInRight` `zoomInUp` \\n Zooming Exits `zoomOut` `zoomOutDown` `zoomOutLeft` `zoomOutRight` `zoomOutUp` \\n Sliding Entrances `slideInDown` `slideInLeft` `slideInRight` `slideInUp` \\n Sliding Exits `slideOutDown` `slideOutLeft` `slideOutRight` `slideOutUp`.",
          "num-The time in milliseconds."
        ],
        "shortDesc": "animate"
      },
      "setSize": {
        "desc": "Sets the size of the component\n\n",
        "pNames": [
          "width",
          "height"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the parent height. [0-1]"
        ],
        "shortDesc": "setSize"
      },
      "show": {
        "desc": "Show the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "show"
      },
      "hide": {
        "desc": "Hide the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "hide"
      },
      "gone": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "gone"
      },
      "destroy": {
        "desc": "Destroy the component\n\n",
        "pNames": [],
        "pTypes": [],
        "shortDesc": "destroy"
      },
      "setScale": {
        "desc": "Sets the x and y scaling of the component\n\n",
        "pNames": [
          "x",
          "y"
        ],
        "pTypes": [
          "num-The x-scale of the component.Values less than `0` is smaller than the normal. While values greater than `1` is greater than the normal.",
          "num-The y-scale of the component. Values less than `1` is smaller than the normal. While vaues greater than `1` is greater than the normal."
        ],
        "shortDesc": "setScale"
      },
      "getPosition": {
        "desc": "Returns the position of the component. The return object is of the form `{ left, top, right, bottom\n\n",
        "pNames": [
          "options"
        ],
        "pTypes": [
          "str-The mode of the measurements. Values can be `px` or `%`"
        ],
        "shortDesc": "getPosition",
        "retval": "obj"
      },
      "setMargins": {
        "desc": "Sets the margin of the component\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "num-Fraction of the parent width.",
          "num-Fraction of the parent height.",
          "str-`px` or `%`"
        ],
        "shortDesc": "setMargins"
      },
      "setPadding": {
        "desc": "Sets the padding component container\n\n",
        "pNames": [
          "left",
          "top",
          "right",
          "bottom",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the component width.",
          "num-Fraction of the component height. [0-1]",
          "num-Fraction of the component width. [0-1]",
          "num-Fraction of the component height. [0-1]",
          "str-The size thickness mode. Can be `px`"
        ],
        "shortDesc": "setPadding"
      },
      "setPosition": {
        "desc": "Sets the position of the component relative to its parent dimensions\n\n",
        "pNames": [
          "left",
          "top",
          "mode"
        ],
        "pTypes": [
          "num-Fraction of the parent width. [0-1]",
          "num-Fraction of the screen height. [0-1]",
          "str-Unit of measurement. Can be `px` or `%` or any css unit of measurement."
        ],
        "shortDesc": "setPosition"
      },
      "setBorder": {
        "desc": "Sets the border line for the component container\n\n",
        "pNames": [
          "width",
          "clr",
          "style"
        ],
        "pTypes": [
          "num-Border-left thickness in pixels.",
          "str-Border color in hexadecimal form `#rrggbb`",
          "str-Border-styles. Values can be `dotted` `dashed` `solid` `double` `groove` `ridge` `inset` and `outset`. Default is `solid`"
        ],
        "shortDesc": "setBorder"
      },
      "setCornerRadius": {
        "desc": "Sets the corner radius of the component\n\n",
        "pNames": [
          "tl",
          "tr",
          "bl",
          "br",
          "mode"
        ],
        "pTypes": [
          "num-Top-Left border radius in pixels.",
          "num-Top-Right border radius in pixels.",
          "num-Bottom-Left border radius in pixels.",
          "num-Bottom-Right border radius in pixels.",
          "str-Unit. Values are `px` `rem` or `%`."
        ],
        "shortDesc": "setCornerRadius"
      },
      "bringForward": {
        "desc": "Bring this component forward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A negative value behaves like `sendBackward` method."
        ],
        "shortDesc": "bringForward"
      },
      "sendBackward": {
        "desc": "Bring this component backward by a given z-index\n\n",
        "pNames": [
          "zIndex"
        ],
        "pTypes": [
          "num-The z-index. A positve value behaves like `bringForward` method."
        ],
        "shortDesc": "sendBackward"
      }
    }
  }
}