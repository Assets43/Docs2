<sample Basic>
from native import ui

def OnStart():
    <b>nxt = ui.Nxt()
    nxt.SetOnConnected(OnConnected)
    nxt.ShowDevices()</b>

def OnConnected():
    nxt.Beep(100, 500)
</sample>

<sample Auto Connect>
from native import app

def OnStart():
    nxt = app.CreateNxt()

    <b>deviceName = "myNXTbrick"
    paired = nxt.IsPaired(deviceName)
    if paired:
        app.ShowProgress("Connecting to " + deviceName + "...")
        nxt.SetOnConnect(nxt_OnConnect)
        nxt.Connect(deviceName)</b>

def nxt_OnConnect(success, nxt):
    if success:
        app.ShowPopup("Connected to: " + nxt.GetBtName() + " : " + nxt.GetBtAddress())
        nxt.Beep(2000, 200)
    else:
        app.Alert("Failed to connect!")
    app.HideProgress()
</sample>

<sample Sensors>
from native import app

def OnStart():
    nxt = app.CreateNxt()

    lay = app.CreateLayout("linear", "FillXY,VCenter")

    list = "Color,Distance,Light,Mail,Sound,Touch"
    spnType = app.CreateSpinner(list, .3)
    spnType.SetOnChange(spnType_OnChange)
    lay.AddChild(spnType)

    spnInput = app.CreateSpinner("1,2,3,4", .3)
    lay.AddChild(spnInput)

    btn = app.CreateButton("Measure", .3, .1)
    btn.SetOnTouch(ReadSensor)
    lay.AddChild(btn)

    app.AddLayout(lay)

def spnType_OnChange():
    app.SimulateTouch(spnInput)

def ReadSensor():
    res = "invalid"
    inp = int(spnInput.GetText())

    switch = {
        "Color": lambda: nxt.ToColorName(nxt.ReadColorSensor(inp, "ColorDetect")),
        "Distance": lambda: str(nxt.ReadDistanceSensor(inp)) + " cm",
        "Light": lambda: str(nxt.ReadLightSensor(inp, False)),
        "Mail": lambda: nxt.ReadMail(inp, "Text", False),
        "Sound": lambda: str(nxt.ReadSoundSensor(inp, "dB")),
        "Touch": lambda: str(nxt.ReadTouchSensor(inp)),
    }

    result = switch.get(spnType.GetText())
    if result:
        res = result()

    if res:
        app.ShowPopup(res)
    else:
        app.ShowPopup("No Value")
</sample>