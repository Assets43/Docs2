<sample Basic Image>
from hybrid import ui
from native import app

def OnStart():
    # Creates a fullscreen layout with objects vertically centered.
    main = ui.addLayout("main", "Linear", "VCenter,FillXY")

    image = "https://upload.wikimedia.org/wikipedia/commons/thumb/9/90/Hapus_Mango.jpg/220px-Hapus_Mango.jpg"

    # Add an image control to the main layout with a width of 7/10 of the parent width
    img = ui.addImage(main, image, "", 0.5)

    # Add callback handler for `onTouch` event on the image control
    img.setOnTouch(onTouch)

def onTouch(event):
    ui.showPopup("You touched the mango!")
</sample>

<sample Avatar>
from hybrid import ui
from native import app

def OnStart():
    # Creates a fullscreen layout with objects vertically centered.
    main = ui.addLayout("main", "Linear", "VCenter,FillXY")

    image = "https://upload.wikimedia.org/wikipedia/commons/thumb/9/90/Hapus_Mango.jpg/220px-Hapus_Mango.jpg"

    # Add an image control to the main layout.
    # Avatar option will ignore the width of the image control.
    img = ui.addImage(main, image, "Avatar")

    # Add callback handler for `onTouch` event on the image control
    img.setOnTouch(onTouch)

def onTouch(event):
    ui.showPopup("You touched the mango!")
</sample>

<sample Button>
from hybrid import ui
from native import app

def OnStart():
    # Creates a fullscreen layout with objects vertically centered.
    main = ui.addLayout("main", "Linear", "VCenter,FillXY")

    image = "https://upload.wikimedia.org/wikipedia/commons/thumb/9/90/Hapus_Mango.jpg/220px-Hapus_Mango.jpg"

    # Add an image control to the main layout.
    # `Button` option will add touch effect when image is click.
    img = ui.addImage(main, image, "Button", 0.5)

    # Add callback handler for `onTouch` event on the image control
    img.setOnTouch(onTouch)

def onTouch(event):
    ui.showPopup("You touched the mango!")
</sample>

<sample Drawings>
from hybrid import ui
from native import app

def OnStart():
    # Creates a fullscreen layout with objects vertically centered.
    main = ui.addLayout("main", "Linear", "VCenter", 1, 1)

    # Add an image control into the main layout.
    # Pass canvas option to enable drawings on the image
    img = ui.addImage(main, "", "canvas", 1, 1)
    img.lineCap = "round"
    img.lineJoin = "round"

    # Draw a line from (130, 40) to (300, 500)
    img.drawLine(130, 40, 300, 500, "#009688", 10)

    # Draw a square from (320, 200) with a side of 200
    img.drawSquare(320, 200, 200, "#683ab7")

    # Draw a circle centered at (400, 300) with a radius of 300
    img.drawCircle(400, 300, 250, "#00000000", "", 20)

    # Draw an arc centered at (800, 200) with a radius of 100
    # from 40 degrees to 270 degrees
    img.drawArc(800, 200, 100, 40, 270, "#44009688", "#009688", 10)

    # Draw a polyline from the given set of points below.
    points = [
        [0, 0],
        [400, 40],
        [20, 40],
        [300, 340],
        [140, 500]
    ]
    img.lineCap = "square"
    img.lineJoin = "miter"
    img.drawPolyline(points, "blue", 10)
</sample>

<sample Text and Shapes>
from hybrid import ui
from native import app

def OnStart():
    # create a main layout with object vertically centered
    main = ui.addLayout("main", "Linear", "VCenter", 1, 1)

    # add a canvas image
    img = ui.addImage(main, "", "canvas", "300px", "500px")

    # draw rectangle
    img.drawRectangle(0, 0, 300, 500, "#fff", "", 4)

    # draw polygon
    img.drawPolygon([
        {"x": 300, "y": 0},
        {"x": 300, "y": 500},
        {"x": 0, "y": 500}
    ])

    # draw text
    img.textSize = 100
    img.textWeight = "bold"
    img.fillColor = "white"
    img.drawText("Hello", 30, 225, "", "", 3)
    img.drawText("World", 10, 325, "", "", 3)
</sample>

<sample Analog Clock>
from hybrid import ui
from native import app
import math

def OnStart():
    global img
    # Create a linear layout with objects vertically centered.
    main = ui.addLayout("main", "Linear", "VCenter", 1, 1)

    ui.addAppBar(main, "Analog Clock")

    # Create a canvas image
    img = ui.addImage(main, "", "canvas", "300px", "300px")

    # Set the initial line styles
    img.lineCap = "round"
    img.lineWidth = 4
    img.strokeColor = "#009688"
    img.lineJoin = "round"

    # Create a text to display the time
    time = ui.addText(main, "00:00:00", "h6,bold")
    time.setMargins(0, 0.05, 0, 0)

    # Call the draw function every second
    setInterval(draw.bind(), 1000)

def draw():
    # Clear all the drawings first in the canvas
    img.clear()

    x, y, n = 0, 0, 0

    # Draw the 12 dot for every hour
    for n in range(1, 13):
        x = 130 * math.cos(n * (math.pi / 6))
        y = 130 * math.sin(n * (math.pi / 6))

        x += 150
        y += 150

        img.drawCircle(x, y, 4, "#311b92")

    date = new Date()

    # Get the hour, minutes and seconds
    hour = date.getHours() if date.getHours() <= 12 else date.getHours() - 12
    minutes = date.getMinutes()
</sample>