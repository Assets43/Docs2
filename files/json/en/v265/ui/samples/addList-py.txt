<xml>
    <sample Basic usage>
        cfg.Light
        cfg.MUI

        from native import app
        from native import ui

        class Main(App):
            def onStart(self):
                lay = ui.createLayout("Linear", "VCenter,FillXY")

                btn = ui.createFabOutline("more_vert")
                btn.setOnTouch(self.btn_OnTouch)
                lay.addChild(btn)
                app.addLayout(lay)

            def btn_OnTouch(self):
                menu = ui.showMenu(self, "Item 1, Item 2, Item 3")
                menu.setOnSelect(self.menu_OnSelect)

            def menu_OnSelect(self, item):
                app.showPopup(item)
    </sample>

    <sample Basic>
        from native import app
        from native import ui

        class Main(App):
            def onStart(self):
                self.main = ui.addLayout("main", "Linear", "VCenter,FillXY")

                self.items = [
                    "Checkbox item 1",
                    "Checkbox item 2",
                    "Checkbox item 3"
                ]

                self.ckg = ui.addCheckboxGroup(self.main, self.items)
                self.ckg.setOnTouch(self.onTouch)

            def onTouch(self, value, item, index):
                ui.showPopup(f"Value of {item} is {value}")
    </sample>

    <sample Colors>
        from native import app
        from native import ui

        class Main(App):
            def onStart(self):
                self.main = ui.addLayout("main", "Linear", "VCenter,FillXY")
                self.main.setChildSpacing("evenly")

                list = [
                    "Checkbox item 1",
                    "Checkbox item 2",
                    "Checkbox item 3"
                ]

                self.ckg1 = ui.addCheckboxGroup(self.main, list)
                self.ckg1.setOnTouch(self.onTouch)

                self.ckg2 = ui.addCheckboxGroup(self.main, list, "Primary")
                self.ckg2.setOnTouch(self.onTouch)

                self.ckg3 = ui.addCheckboxGroup(self.main, list, "Secondary")
                self.ckg3.setOnTouch(self.onTouch)

            def onTouch(self, value, item, index):
                ui.showPopup(f"Value of {item} is {value}")
    </sample>

    <sample Elevated>
        from native import app
        from native import ui

        class Main(App):
            def onStart(self):
                self.main = ui.addLayout("main", "Linear", "VCenter,FillXY")

                list = [
                    "Checkbox item 1",
                    "Checkbox item 2",
                    "Checkbox item 3"
                ]

                self.ckg = ui.addCheckboxGroup(self.main, list, "Elevated,Secondary", 0.6)

                self.ckg.setLabel("Select as many as you can")

                self.ckg.setElevation(4)
                self.ckg.setOnTouch(self.onTouch)

            def onTouch(self, value, item, index):
                ui.showPopup(f"Value of {item} is {value}")
    </sample>

    <sample Outlined>
        from native import app
        from native import ui

        class Main(App):
            def onStart(self):
                self.main = ui.addLayout("main", "Linear", "VCenter,FillXY")

                list = [
                    "Checkbox item 1",
                    "Checkbox item 2",
                    "Checkbox item 3"
                ]

                self.ckg = ui.addCheckboxGroup(self.main, list, "Outlined,Secondary", 0.9)
                self.ckg.setOnTouch(self.onTouch)

                self.ckg.setLabel("Select as many as you can")

                self.ckg.setCornerRadius(20)

            def onTouch(self, value, item, index):
                ui.showPopup(f"Value of {item} is {value}")
    </sample>

    <sample Drawer Implementation>
        from native import app
        from native import ui

        class Main(App):
            def onStart(self):
                self.main = ui.addLayout("main", "Linear", "VCenter,FillXY")

                self.apb = ui.addAppBar(self.main, "My App", "Menu,Fixed")
                self.apb.setOnMenu(self.openDrawer)

                ui.addText(self.main, "<---- Swipe left ----->", "Center")

                self.drawerLay = ui.addLayout(None, "Linear")
                self.drawer = ui.addDrawer(self.drawerLay, "left", 0.7)
                self.drawer.setOnClose(self.onClose)

                lst1 = [
                    ["music_note", "Audios"],
                    ["movie", "Videos"],
                    ["insert_drive_file", "Documents"]
                ]
                self.lstMenu1 = ui.addList(self.drawerLay, lst1, "Icon", 1)
                self.lstMenu1.label = "Main navigation"
                self.lstMenu1.setOnTouch(self.onSelect)

                ui.addDivider(self.drawerLay, 1)

                lst2 = [
                    ["mail", "All Mail"],
                    ["inbox", "Inbox"],
                    ["drafts", "Outbox"],
                    ["send", "Sent"]
                ]
                self.lstMenu2 = ui.addList(self.drawerLay, lst2, "Icon", 1)
                self.lstMenu2.label = "Secondary navigation"
                self.lstMenu2.setOnTouch(self.onSelect)
            
            def openDrawer(self):
                self.drawer.show()

            def onSelect(self, title, index, value):
                app.showPopup(value)

            def onClose(self):
                self.drawer.hide()
    </sample>

    <sample Basic list>
        from native import app
        from native import ui

        class Main(App):
            def onStart(self):
                from native import app
                from native import ui

                self.main = ui.addLayout("main", "Linear", "VCenter,FillXY")

                list = ["Javascript", "Java", "Python"]

                self.lst = ui.addList(self.main, list,