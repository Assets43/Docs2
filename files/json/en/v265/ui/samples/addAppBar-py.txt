<sample Basic AppBar>
class Main extends App
    onStart()
        #  Creates a fullscreen linear layout with objects align Top and Center
        this.main = ui.addLayout("main", "Linear", "Top,Center", 1, 1)

        #  Adds an appbar to the layout
        this.apb = ui.addAppBar(this.main, "My App", "", 1)

        #  Adds a button control with margins 1/10 of the parent width.
        this.btn = ui.addButton(this.main, "Button")
        this.btn.margins = 0.1

</sample>

<sample Fixed appbar with drawer>
class Main extends App
    onStart()
        #  Creates a fullscreen linear layout with objects vertically centered
        this.main = ui.addLayout("main", "Linear", "VCenter", 1, 1)

        #  Add an appbar to the layout
        this.apb = ui.addAppBar(this.main, "My app", "Menu,Fixed", 1)

        #  Add a callback handler to show the drawer onMenu event
        this.apb.setOnMenu( this.showDrawer )

        #  Add a drawer layout
        this.drawLay = ui.addLayout(null, "Linear", "Top")

        #  Add a drawer to the app and pass the drawer layout
        this.drawer = ui.addDrawer(this.drawLay, "left")

        #  Add a list to the drawer layout. See `List` component for customization.
        lst = [
            ["folder", "Folders"],
            ["music_note", "Audios"],
            ["photo", "Photos"]
        ]
        this.lstMenu = ui.addList(this.drawLay, lst, "Icon", 1 )
        this.lstMenu.label = "Main navigation"

        #  Add a callback handler to the list onTouch event
        this.lstMenu.setOnTouch( this.onTouch )

    showDrawer()
        this.drawer.show()

    onTouch( title )
        #  Set the appbar text with the selected list item
        this.apb.text = title

        #  Close the drawer
        this.drawer.hide()

</sample>

<sample Appbar with actions>
class Main extends App
    onStart()
        #  Creates a fullscreen layout with objects vertically centered
        this.main = ui.addLayout("main", "Linear", "Top,Center", 1, 1)

        this.apb = ui.addAppBar(this.main, "My App", "Menu,Primary")
        this.apb.setOnMenu( this.showDrawer )
    
        #  Add an icon buttons to the appbar with onTouch callbacks
        this.btn1 = ui.addButton(this.apb.layout, "mail", "icon")
        this.btn1.setOnTouch(() =>ui.showPopup("Messages", "Bottom"))

        this.btn2 = ui.addButton(this.apb.layout, "person", "icon")
        this.btn2.setOnTouch(() =>ui.showPopup("Account", "Bottom"))

        this.btn3 = ui.addButton(this.apb.layout, "more_vert", "icon")
        this.btn3.setOnTouch(() =>ui.showPopup("More options", "Bottom"))
    
        #  Adds a drawer layout
        this.drawLay = ui.addLayout(null, "Linear", "Top")

        #  Adds a drawer to the app and pass the drawer layout
        this.drawer = ui.addDrawer(this.drawLay, "left")

        #  Adds a list to the drawer layout. See `List` component for customization.
        lst = [
            ["folder", "Folders"],
            ["music_note", "Audios"],
            ["photo", "Photos"]
        ]
        this.lstMenu = ui.addList(this.drawLay, lst, "Icon", 1 )
        this.lstMenu.label = "Main navigation"

        #  Add a callback handler to the list onTouch event
        this.lstMenu.setOnTouch( this.onTouch )

    showDrawer()
        this.drawer.show()

    onTouch( title )
        #  Set the appbar text with the selected list item
        this.apb.text = title

        #  Close the drawer
        this.drawer.hide()

</sample>

<sample Appbar with search field>
class Main extends App
    onStart()
        #  Creates a fullscreen layout with objects vertically centered.
        this.main = ui.addLayout( "main", "Linear", "Top", 1, 1 )

        #  Add an appbar to the main layout
        this.apb = ui.addAppBar( this.main, "My app", "Default" )
    
        #  Adds a textfield to the appbar
        this.tfd = ui.addTextField(this.apb.layout, "", "Search,Outlined,Small")
        this.tfd.placeholder = "Search"
        this.tfd.hide()

        #  Add a search icon button to the appbar
        this.searchBtn = ui.addButton(this.apb.layout, "search", "icon")

        #  Add a callback handler when the button is click
        this.searchBtn.setOnTouch( this.showSearchField )

    showSearchField()
        if this.searchBtn.text == "search":
            this.tfd.show()
            this.searchBtn.text = "close"
        else:
            this.tfd.hide()
            this.searchBtn.text = "search"


</sample>
